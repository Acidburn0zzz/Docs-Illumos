{
    "docs": [
        {
            "location": "/", 
            "text": "illumos is a Unix operating system which provides\nnext-generation features for downstream \ndistributions\n,\nincluding \nadvanced system debugging\n, \nnext\ngeneration filesystem\n, networking, and virtualization\noptions.\n\n\nillumos is freely available from our \nsource\nrepository\n, and most distributions\nbased on it are also open source. You can see recent changes\n\nhere\n.\n\n\nillumos is \ndeveloped\n by both volunteers and companies building\nproducts on top of the software.\n\n\nillumos is an excellent base for both traditional and cloud-native deployments.\n\n\nWe believe in \ncross-pollination and collaboration\n\nwith other open source projects.\n\n\nPlease see the \nabout\n page to learn more!", 
            "title": "Home"
        }, 
        {
            "location": "/about/", 
            "text": "what \nis\n illumos?\n\n\nTo quote the \nillumos Developer's Guide\n:\n\n\n\n\nillumos is a consolidation of software that forms the core of an Operating\nSystem. It includes the kernel, device drivers, core system libraries, and\nutilities. It is the home of many technologies including ZFS, DTrace, Zones,\nctf, FMA, and more. We pride ourselves on having a stable, highly\nobservable, and technologically different system. In addition, illumos\ntraces it roots back through Sun Microsystems to the original releases of\nUNIX and BSD.\n\n\n\n\nillumos itself does not offer an OS distribution -- it is the core from which\n\ndistributions\n can be created.\n\n\nPlease see the \nhistory page\n for more information about the\norigins of illumos.\n\n\nLicensing\n\n\nillumos is licensed under the \nCDDL\n.\n\n\nCommunity Values\n\n\n\n\nEmpathy as a core engineering tenet\n\n\nCode quality and correctness\n\n\n\n\nTechnology Features\n\n\nThe following are shared development tenets and features for distributions utilizing illumos:\n\n\n\n\nStability\n\n\nSMP support for many CPUs\n\n\nSecurity multi-user facilities like Roles and Privileges\n\n\nMulti-tenancy with Zones\n\n\nUnparalleled system introspection with \nDTrace\n\n\nA single pipeline for system issues with the Fault Management Architecture (FMA)\n\n\nNetwork virtualization with Crossbow\n\n\nHardware virtualization with KVM\n\n\nExcellent online documentation\n\n\nSource code for the entire system\n\n\n\n\nUses for illumos\n\n\nWhile it can be and is used in any nearly situation where a UNIX-type server is\nneeded, illumos excels at storage applications, large multi-tenant systems, and\nother cloud-centric uses. \n\n\nSupported hardware platforms\n\n\nillumos currently supports: \n\n\n\n\ni86pc (x86, x86_64) architectures\n\n\nAMD64 (except KVM support)\n\n\n\n\nThere are also several SPARC distributions of illumos; if you are interested in\nrunning illumos on SPARC, please refer directly to those distributions' docs.\n\n\nTo determine if a specific piece of hardware will work with illumos, please\nrefer to the \nHardware Compatability List\n.\n\n\nFor pre-defined builds of server-grade hardware, you may also refer to\n\nJoyent Engineering Manufactory\ndatabase\n.    \n\n\nillumos Development Model\n\n\nPlease refer to the \nillumos Developer's Guide\n\nand the \ndevelopment section\n.\n\n\nContributing to illumos\n\n\nPlease see the \ncontribution\n if you'd like to\nparticipate in the project.\n\n\nThird Party Software\n\n\nillumos does not itself ship third party software, or contain software like webservers and so forth. \n\n\nDistributions include their own package management.", 
            "title": "What is illumos?"
        }, 
        {
            "location": "/about/#what-is-illumos", 
            "text": "To quote the  illumos Developer's Guide :   illumos is a consolidation of software that forms the core of an Operating\nSystem. It includes the kernel, device drivers, core system libraries, and\nutilities. It is the home of many technologies including ZFS, DTrace, Zones,\nctf, FMA, and more. We pride ourselves on having a stable, highly\nobservable, and technologically different system. In addition, illumos\ntraces it roots back through Sun Microsystems to the original releases of\nUNIX and BSD.   illumos itself does not offer an OS distribution -- it is the core from which distributions  can be created.  Please see the  history page  for more information about the\norigins of illumos.", 
            "title": "what is illumos?"
        }, 
        {
            "location": "/about/#licensing", 
            "text": "illumos is licensed under the  CDDL .", 
            "title": "Licensing"
        }, 
        {
            "location": "/about/#community-values", 
            "text": "Empathy as a core engineering tenet  Code quality and correctness", 
            "title": "Community Values"
        }, 
        {
            "location": "/about/#technology-features", 
            "text": "The following are shared development tenets and features for distributions utilizing illumos:   Stability  SMP support for many CPUs  Security multi-user facilities like Roles and Privileges  Multi-tenancy with Zones  Unparalleled system introspection with  DTrace  A single pipeline for system issues with the Fault Management Architecture (FMA)  Network virtualization with Crossbow  Hardware virtualization with KVM  Excellent online documentation  Source code for the entire system", 
            "title": "Technology Features"
        }, 
        {
            "location": "/about/#uses-for-illumos", 
            "text": "While it can be and is used in any nearly situation where a UNIX-type server is\nneeded, illumos excels at storage applications, large multi-tenant systems, and\nother cloud-centric uses.", 
            "title": "Uses for illumos"
        }, 
        {
            "location": "/about/#supported-hardware-platforms", 
            "text": "illumos currently supports:    i86pc (x86, x86_64) architectures  AMD64 (except KVM support)   There are also several SPARC distributions of illumos; if you are interested in\nrunning illumos on SPARC, please refer directly to those distributions' docs.  To determine if a specific piece of hardware will work with illumos, please\nrefer to the  Hardware Compatability List .  For pre-defined builds of server-grade hardware, you may also refer to Joyent Engineering Manufactory\ndatabase .", 
            "title": "Supported hardware platforms"
        }, 
        {
            "location": "/about/#illumos-development-model", 
            "text": "Please refer to the  illumos Developer's Guide \nand the  development section .", 
            "title": "illumos Development Model"
        }, 
        {
            "location": "/about/#contributing-to-illumos", 
            "text": "Please see the  contribution  if you'd like to\nparticipate in the project.", 
            "title": "Contributing to illumos"
        }, 
        {
            "location": "/about/#third-party-software", 
            "text": "illumos does not itself ship third party software, or contain software like webservers and so forth.   Distributions include their own package management.", 
            "title": "Third Party Software"
        }, 
        {
            "location": "/about/who/", 
            "text": "Who uses illumos?\n\n\nMany communities and businesses base their products and services on illumos. In\naddition to providing the core for projects and products, components of illumos\nhave been ported to other operating systems.\n\n\nOrganizations\n\n\n\n\n\n\n\n\nOrganization\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nFreeBSD\n\n\nIncorporates ZFS, DTrace, mdb\n\n\n\n\n\n\nApple\n\n\nIncorporates DTrace\n\n\n\n\n\n\nJoyent\n\n\nPublic and on-prem cloud\n\n\n\n\n\n\nLucera\n\n\nFinanial infrastructure services\n\n\n\n\n\n\nDelphix\n\n\nDatabase virtualization\n\n\n\n\n\n\nNexenta\n\n\nStorage appliance\n\n\n\n\n\n\nEveryCity\n\n\nManaged cloud services\n\n\n\n\n\n\nProject FIFO\n\n\nOn-prem cloud\n\n\n\n\n\n\nCirconus\n\n\nMonitoring services\n\n\n\n\n\n\nPobox\n\n\nEmail services\n\n\n\n\n\n\nTopicbox\n\n\nMailing list services\n\n\n\n\n\n\nDanubeCloud\n\n\nOn-prem cloud\n\n\n\n\n\n\n\n\nCollaboration\n\n\nCross-pollination and collaboration history.\n\n\n2018\n\n\n\n\nJoyent and OpenBSD collaborate in Meltdown design mitigations\n\n\n\n\n2016\n\n\n\n\nUbuntu incorporates ZFS\n\n\n\n\n2013\n\n\n\n\nOpenZFS on OS X\n\n\n\n\n2010\n\n\n\n\nNetBSD began porting DTrace in 2010\n\n\n\n\n2009\n\n\n\n\nFreeBSD integrated DTrace in 7.1\n\n\n\n\n2008\n\n\n\n\nFreeBSD integrated ZFS in 7.0\n\n\nLLNL created the ZFS On Linux project\n\n\n\n\n2007\n\n\n\n\nApple integrated DTrace in Mac OS X 10.5 (2007)", 
            "title": "Who uses illumos?"
        }, 
        {
            "location": "/about/who/#who-uses-illumos", 
            "text": "Many communities and businesses base their products and services on illumos. In\naddition to providing the core for projects and products, components of illumos\nhave been ported to other operating systems.", 
            "title": "Who uses illumos?"
        }, 
        {
            "location": "/about/who/#organizations", 
            "text": "Organization  Description      FreeBSD  Incorporates ZFS, DTrace, mdb    Apple  Incorporates DTrace    Joyent  Public and on-prem cloud    Lucera  Finanial infrastructure services    Delphix  Database virtualization    Nexenta  Storage appliance    EveryCity  Managed cloud services    Project FIFO  On-prem cloud    Circonus  Monitoring services    Pobox  Email services    Topicbox  Mailing list services    DanubeCloud  On-prem cloud", 
            "title": "Organizations"
        }, 
        {
            "location": "/about/who/#collaboration", 
            "text": "Cross-pollination and collaboration history.", 
            "title": "Collaboration"
        }, 
        {
            "location": "/about/who/#2018", 
            "text": "Joyent and OpenBSD collaborate in Meltdown design mitigations", 
            "title": "2018"
        }, 
        {
            "location": "/about/who/#2016", 
            "text": "Ubuntu incorporates ZFS", 
            "title": "2016"
        }, 
        {
            "location": "/about/who/#2013", 
            "text": "OpenZFS on OS X", 
            "title": "2013"
        }, 
        {
            "location": "/about/who/#2010", 
            "text": "NetBSD began porting DTrace in 2010", 
            "title": "2010"
        }, 
        {
            "location": "/about/who/#2009", 
            "text": "FreeBSD integrated DTrace in 7.1", 
            "title": "2009"
        }, 
        {
            "location": "/about/who/#2008", 
            "text": "FreeBSD integrated ZFS in 7.0  LLNL created the ZFS On Linux project", 
            "title": "2008"
        }, 
        {
            "location": "/about/who/#2007", 
            "text": "Apple integrated DTrace in Mac OS X 10.5 (2007)", 
            "title": "2007"
        }, 
        {
            "location": "/about/features/", 
            "text": "debug\n\n\nfault management\n\n\nfilesystem\n\n\nfirewall\n\n\nlinux emulation\n\n\nvirtual network\n\n\nsecurity\n\n\nservice\n\n\nvirtualization types", 
            "title": "Features"
        }, 
        {
            "location": "/about/leadership/", 
            "text": "Leadership\n\n\nThere are two levels of leadership in the illumos project: Members of the Dev\nCouncil, and Request To Integrate (RTI) Advocates.\n\n\nDeveloper Council\n\n\nThe Dev Council is a technical steering committee drawn from well-known\ndevelopers of Solaris, whose role is to make high-level architecture decisions.\n\n\n\n\n\n\n\n\nMember\n\n\nOrganization\n\n\n\n\n\n\n\n\n\n\nAdam Leventhal\n\n\nDelphix\n\n\n\n\n\n\nBryan Cantrill\n\n\nJoyent\n\n\n\n\n\n\nGarrett D\u2019Amore\n\n\nunaffiliated\n\n\n\n\n\n\nGordon Ross\n\n\nNexenta\n\n\n\n\n\n\nRich Lowe\n\n\nunaffiliated\n\n\n\n\n\n\n\n\nAdvocates\n\n\nAdvocates are the gatekeepers to the illumos core: they have the ultimate say\nin what code is accepted, and their primary job is to ensure quality and\nstability for all illumos users.\n\n\nAdvocates are appointed by the illumos Developer Council.\n\n\n\n\n\n\n\n\nMember\n\n\nHandle\n\n\nOrganization\n\n\nExpertise\n\n\n\n\n\n\n\n\n\n\nAlbert Lee\n\n\ntrisk\n\n\nSoftNAS\n\n\nStorage, drivers, userland.\n\n\n\n\n\n\nChris Siden\n\n\ncsiden\n\n\nDelphix\n\n\nZFS\n\n\n\n\n\n\nDan McDonald\n\n\ndanmcd\n\n\nJoyent\n\n\nCryptography, Networking\n\n\n\n\n\n\nGarrett D'Amore\n\n\ngdamore\n\n\nunaffiliated\n\n\nDrivers, etc.\n\n\n\n\n\n\nGordon Ross\n\n\ngwr\n\n\nNexenta\n\n\nCIFS/SMB, VFS layer, ZFS ACLs, etc.\n\n\n\n\n\n\nHans Rosenfeld\n\n\nWoodstock\n\n\nJoyent\n\n\nMisc.\n\n\n\n\n\n\nJoshua M. Clulow\n\n\nLeftWing\n\n\nJoyent\n\n\nMisc.\n\n\n\n\n\n\nMatt Ahrens\n\n\nmahrens\n\n\nDelphix\n\n\nZFS\n\n\n\n\n\n\nRich Lowe\n\n\nrichlowe\n\n\nunaffiliated\n\n\nMisc.\n\n\n\n\n\n\nRobert Mustacchi\n\n\nrmustacc\n\n\nJoyent\n\n\nVirtualization, SMF, PCI, MDB, DTrace, x86 platform, etc.\n\n\n\n\n\n\n\n\nLife as an Advocate\n\n\nContributors send you patches, build results, test results, check results,\nreview results. If you're happy with all of this, you integrate the change on\ntheir behalf.\n\n\nYou should have received a diff in hg export or similar format, including a\nfull set of metadata (Reviewed by: lines, authorship, etc.). If you didn't,\nfeel free to ask whoever submitted the patch to submit it in this format, you\nshouldn't have to go search the list archives for reviewers.\n\n\nUsing your judgement\n\n\nThe whole reason we have RTI advocates or, if you're not steeped in Sun-ish\nhistory, follow a \"pull\" model, is that it provides us with a step in the\nprocess where in theory experienced people can exercise their (in theory)\nbetter judgement, and everyone can benefit from less breakage. This is 95% of\nthe work involved.\n\n\nThings Advocates Focus On\n\n\n\n\nDo you know the areas of the system affected well enough to even have an opinion?\n\n\nIf not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything).\n\n\nIs the commit well-formed?\n\n\nThe author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine!\n\n\nIs the pbchk output as clean as you want it to be?\n\n\nIn general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out).\n\n\nIs the users build clean?\n\n\nThey'll be giving you a \nmail_msg\n file, it will ideally be absolutely free of any noise. In practice, there are times when there will be noise for other reasons, not related to their integration. You should check! One thing to double check is that lint was actually run. It's surprisingly easy to glance at an incremental build, and not notice that the source was never linted.\n\n\nDid the submitter test their changes to your satisfaction?\n\n\nCan you think of anything else that should be tested? Ask for it!\n\n\nDid the testing actually test the area changed by the patch? Check!\n\n\nRead the diff. Check that nothing stands out that reviewers may have missed\n\n\nFeel free to run a build yourself, if you're paranoid, but don't feel compelled to.", 
            "title": "Leadership"
        }, 
        {
            "location": "/about/leadership/#leadership", 
            "text": "There are two levels of leadership in the illumos project: Members of the Dev\nCouncil, and Request To Integrate (RTI) Advocates.", 
            "title": "Leadership"
        }, 
        {
            "location": "/about/leadership/#developer-council", 
            "text": "The Dev Council is a technical steering committee drawn from well-known\ndevelopers of Solaris, whose role is to make high-level architecture decisions.     Member  Organization      Adam Leventhal  Delphix    Bryan Cantrill  Joyent    Garrett D\u2019Amore  unaffiliated    Gordon Ross  Nexenta    Rich Lowe  unaffiliated", 
            "title": "Developer Council"
        }, 
        {
            "location": "/about/leadership/#advocates", 
            "text": "Advocates are the gatekeepers to the illumos core: they have the ultimate say\nin what code is accepted, and their primary job is to ensure quality and\nstability for all illumos users.  Advocates are appointed by the illumos Developer Council.     Member  Handle  Organization  Expertise      Albert Lee  trisk  SoftNAS  Storage, drivers, userland.    Chris Siden  csiden  Delphix  ZFS    Dan McDonald  danmcd  Joyent  Cryptography, Networking    Garrett D'Amore  gdamore  unaffiliated  Drivers, etc.    Gordon Ross  gwr  Nexenta  CIFS/SMB, VFS layer, ZFS ACLs, etc.    Hans Rosenfeld  Woodstock  Joyent  Misc.    Joshua M. Clulow  LeftWing  Joyent  Misc.    Matt Ahrens  mahrens  Delphix  ZFS    Rich Lowe  richlowe  unaffiliated  Misc.    Robert Mustacchi  rmustacc  Joyent  Virtualization, SMF, PCI, MDB, DTrace, x86 platform, etc.", 
            "title": "Advocates"
        }, 
        {
            "location": "/about/leadership/#life-as-an-advocate", 
            "text": "Contributors send you patches, build results, test results, check results,\nreview results. If you're happy with all of this, you integrate the change on\ntheir behalf.  You should have received a diff in hg export or similar format, including a\nfull set of metadata (Reviewed by: lines, authorship, etc.). If you didn't,\nfeel free to ask whoever submitted the patch to submit it in this format, you\nshouldn't have to go search the list archives for reviewers.", 
            "title": "Life as an Advocate"
        }, 
        {
            "location": "/about/leadership/#using-your-judgement", 
            "text": "The whole reason we have RTI advocates or, if you're not steeped in Sun-ish\nhistory, follow a \"pull\" model, is that it provides us with a step in the\nprocess where in theory experienced people can exercise their (in theory)\nbetter judgement, and everyone can benefit from less breakage. This is 95% of\nthe work involved.", 
            "title": "Using your judgement"
        }, 
        {
            "location": "/about/leadership/#things-advocates-focus-on", 
            "text": "Do you know the areas of the system affected well enough to even have an opinion?  If not, you should probably leave this for someone else who might (note that we don't have perfect coverage, so you can't just punt on everything).  Is the commit well-formed?  The author line should include both a name and a well formed email address, and should match the actual author. The format here is very important for SCM export. Don't just assume it's fine!  Is the pbchk output as clean as you want it to be?  In general, there should be no noise from any check, however some areas are not clean for the various style checks, you should check this is actually the case (in general, areas that are innately dirty are very dirty, and stand out).  Is the users build clean?  They'll be giving you a  mail_msg  file, it will ideally be absolutely free of any noise. In practice, there are times when there will be noise for other reasons, not related to their integration. You should check! One thing to double check is that lint was actually run. It's surprisingly easy to glance at an incremental build, and not notice that the source was never linted.  Did the submitter test their changes to your satisfaction?  Can you think of anything else that should be tested? Ask for it!  Did the testing actually test the area changed by the patch? Check!  Read the diff. Check that nothing stands out that reviewers may have missed  Feel free to run a build yourself, if you're paranoid, but don't feel compelled to.", 
            "title": "Things Advocates Focus On"
        }, 
        {
            "location": "/about/distro/", 
            "text": "the illumos family\n\n\nIntroduction\n\n\nSimilar to other operating systems, there are many different OS distributions\nbased on the common illumos ecosystem.\n\n\nSome of them are maintained by enthusiasts, others are primarily developed by\ncommercial companies with their own priorities and focus, and some mainly\ndiffer in their packaging systems.\n\n\nMost of these projects contribute back to the common core set of software, which the\nillumos project is all about.\n\n\nCommon Features\n\n\nAll illumos-derived systems should include the following technologies:\n\n\n\n\nDTrace\n\n\nmdb\n\n\nZFS\n\n\nZones\n\n\nVirtual networking (Crossbow)\n\n\nFault Management Framework\n\n\nService Management Framework\n\n\n\n\nComparison\n\n\nNot all distributions have the latest features or run on both x86 and SPARC.\nFor major feature differences, the following chart may be helpful.\n\n\nActive Spins\n\n\n\n\n\n\n\n\nProject\n\n\nSource\n\n\nFocus\n\n\nOpen Source\n\n\nPackaging\n\n\nx86\n\n\nSPARC\n\n\nKVM\n\n\nLX\n\n\n\n\n\n\n\n\n\n\nSmartOS\n\n\nJoyent\n\n\nHypervisor\n\n\ncheck\n\n\npkgsrc\n\n\ncheck\n\n\n\n\ncheck\n\n\ncheck\n\n\n\n\n\n\nOmniOS CE\n\n\nOmniOS CE Association\n\n\nServers\n\n\ncheck\n\n\nIPS\n\n\ncheck\n\n\n\n\ncheck\n\n\ncheck\n\n\n\n\n\n\nOpenIndiana\n\n\nOpenIndiana\n\n\nWorkstation, Servers\n\n\ncheck\n\n\nIPS\n\n\ncheck\n\n\n\n\ncheck\n\n\n\n\n\n\n\n\nNexenStor\n\n\nNexenta\n\n\nStorage\n\n\n\n\nAPT\n\n\ncheck\n\n\n\n\n\n\n\n\n\n\n\n\nTribblix\n\n\nPeter Tribble\n\n\nWorkstation, Servers\n\n\ncheck\n\n\nSVR4\n\n\ncheck\n\n\ncheck\n\n\ncheck\n\n\n\n\n\n\n\n\nDilOS\n\n\nigork\n\n\nWorkstation, Servers\n\n\ncheck\n\n\nAPT\n\n\ncheck\n\n\ncheck\n\n\ncheck\n\n\ncheck\n\n\n\n\n\n\n\n\nUnmaintained Spins\n\n\n\n\n\n\n\n\nProject\n\n\nSource\n\n\nFocus\n\n\nOpen Source\n\n\nPackaging\n\n\nx86\n\n\nSPARC\n\n\n\n\n\n\n\n\n\n\nv9os\n\n\nMilaX\n\n\nServer\n\n\ncheck\n\n\nIPS\n\n\n\n\ncheck\n\n\n\n\n\n\nXStreamOS\n\n\nSonicle\n\n\nServer\n\n\n\n\n\n\ncheck", 
            "title": "Distributions"
        }, 
        {
            "location": "/about/distro/#the-illumos-family", 
            "text": "", 
            "title": "the illumos family"
        }, 
        {
            "location": "/about/distro/#introduction", 
            "text": "Similar to other operating systems, there are many different OS distributions\nbased on the common illumos ecosystem.  Some of them are maintained by enthusiasts, others are primarily developed by\ncommercial companies with their own priorities and focus, and some mainly\ndiffer in their packaging systems.  Most of these projects contribute back to the common core set of software, which the\nillumos project is all about.", 
            "title": "Introduction"
        }, 
        {
            "location": "/about/distro/#common-features", 
            "text": "All illumos-derived systems should include the following technologies:   DTrace  mdb  ZFS  Zones  Virtual networking (Crossbow)  Fault Management Framework  Service Management Framework", 
            "title": "Common Features"
        }, 
        {
            "location": "/about/distro/#comparison", 
            "text": "Not all distributions have the latest features or run on both x86 and SPARC.\nFor major feature differences, the following chart may be helpful.", 
            "title": "Comparison"
        }, 
        {
            "location": "/about/distro/#active-spins", 
            "text": "Project  Source  Focus  Open Source  Packaging  x86  SPARC  KVM  LX      SmartOS  Joyent  Hypervisor  check  pkgsrc  check   check  check    OmniOS CE  OmniOS CE Association  Servers  check  IPS  check   check  check    OpenIndiana  OpenIndiana  Workstation, Servers  check  IPS  check   check     NexenStor  Nexenta  Storage   APT  check       Tribblix  Peter Tribble  Workstation, Servers  check  SVR4  check  check  check     DilOS  igork  Workstation, Servers  check  APT  check  check  check  check", 
            "title": "Active Spins"
        }, 
        {
            "location": "/about/distro/#unmaintained-spins", 
            "text": "Project  Source  Focus  Open Source  Packaging  x86  SPARC      v9os  MilaX  Server  check  IPS   check    XStreamOS  Sonicle  Server    check", 
            "title": "Unmaintained Spins"
        }, 
        {
            "location": "/about/faq/", 
            "text": "Quick Links\n\n\n\n\nSecurity Information\n\n\nManual pages\n\n\nMailing lists\n\n\nBug reporting\n\n\n\n\nWhat is the objective of the illumos project?\n\n\nillumos is a fully open community project to develop a reliable and scalable\noperating system. It began as a fork of the former\n\nOpenSolaris\n operating system.\n\n\nOur goal is to foster open development of technologies for the 21\nst\n century\nwhile building on a twenty-year heritage, but free from the oversight of a\nsingle corporate entity and the resulting challenges thereof.\n\n\nWhile our code base has a long history and many engineering traditions attached\nto it, our development processes are being reinvented in an attempt to remove\nbarriers while maintaining consistently high code quality.\n\n\nHow do I download the software?\n\n\nThe source code developed by the project is a fork of the Sun/Oracle code base\nreferred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is\nthe home of the technologies that previously defined OpenSolaris and Solaris,\nsuch as the kernel, network stack, filesystems, and device drivers, and all of\nthe basic userland libraries and applications.\n\n\nThe illumos code base forms the foundation of \ndistributions\n.\nTo use the operating system, just download and install one of the\ndistributions.\n\n\nTo download the source code, follow the section on Git or Mercurial in \nHow To\nBuild illumos\n. You can also \nbrowse and search the\nillumos code online\n.\n\n\nIs illumos free software (open source)?\n\n\nThe bulk of the illumos source code is available under the Common Development\nand Distribution License (CDDL), an OSI-approved free software license based on\nthe Mozilla Public License (MPL).\n\n\nThere are some components with other licenses including BSD and MIT. We also\ninclude some software with the GNU General Public License (GPL) or the\nLesser/Library General Public License (LGPL).\n\n\nThere still remain some binary-only, closed source components that we inherited\nfrom Oracle which we are working to replace. Unlike OpenSolaris, we do not\nrequire a closed source compiler.\n\n\nIs illumos a community project?\n\n\nYes!\n\n\nMultiple community groups and interests (including people like you!) are\nstakeholders in the project, and anyone and everyone is welcome to\n\ncontribute\n.\n\n\nillumos was initiated by then-employees of Nexenta in collaboration with former\nOpenSolaris community members and volunteers. While companies including\nNexenta, Joyent, and Delphix sponsor some of the work in illumos, the project\nis independent of their business decisions. illumos exists as a common base for\nmultiple commercial and community distributions.\n\n\nHow do I start contributing?\n\n\nillumos thrives on the efforts of its contributors. Have a look at the guide on\n\nHow To Contribute\n if you want to submit code.\n\n\nIf you want to help in other ways then have a look at the \nMailing\nLists\n.\n\n\nMost of the developers can be found on \nIRC\n\nand you're invited to drop in and say \"hi!\"\n\n\nHow do I build illumos?\n\n\nSee \nHow To Build illumos\n.\n\n\nHow do I build a distribution based on illumos?\n\n\nOpenSolaris was historically difficult to build as a distribution because it\nwas assembled by many separate teams at Sun. The illumos community\ndistributions are working to make this easier.\n\n\nSome distributions have\n\ndocumented\n their build\nprocesses.\n\n\nIs illumos compatible with Solaris/OpenSolaris?\n\n\nillumos is very likely to be compatible with Solaris/OpenSolaris binaries and\ndrivers before Oracle closed the gate in 2010. After that, all bets are off.\nSolaris 10 update 11, and Solaris 11, and beyond, may contain incompatible\nchanges.\n\n\nWhat changes does illumos maintain?\n\n\n\n\nOpen internationalization libraries and data files.\n\n\nOpen replacements for closed binaries.\n\n\nCode that Oracle may choose to no longer maintain.\n\n\nCommunity enhancements to critical technologies like DTrace and ZFS.\n\n\nNew open technologies.\n\n\nPatches/bug-fixes we have independently developed, including security fixes.\n\n\nChanges to ease community development.\n\n\n...and more!\n\n\n\n\nDo you track Oracle changes?\n\n\nWe originally intended to closely follow upstream changes, but became a fork by\nnecessity because Oracle's software is no longer open source. We now represent\nthe open future of the code base after Sun.\n\n\nWill you work on sending illumos changes upstream?\n\n\nWe would like Oracle to use changes from illumos, as long as they are willing\nto abide by the open source license for our code. Where we use code from other\nfree software projects, we also respect their licenses and keep the source\nopen.\n\n\nWhy did you announce the project after it was set up and much of the code written?\n\n\nThis decision was made for multiple reasons. The signal to noise ratio in the\nOpenSolaris community had grown low, and announcing the project would have\ndistracted the developers from actual code and contribution. Most vocal members\ntalked about opening the code rather than writing it. illumos chose the\nopposite. Before the formal announcement, we reached out to developers in the\ncommunity and solicited their help and participation.\n\n\nAnd the name illumos?\n\n\nWe started off with the codename \"FreeON\", and later realized it is used by an\nexisting project. We finally settled on illumos, after many hours of\nsuggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written\nin lowercase) ties in with Sun and light. It's the closest to ON we could get!", 
            "title": "FAQ"
        }, 
        {
            "location": "/about/faq/#quick-links", 
            "text": "Security Information  Manual pages  Mailing lists  Bug reporting", 
            "title": "Quick Links"
        }, 
        {
            "location": "/about/faq/#what-is-the-objective-of-the-illumos-project", 
            "text": "illumos is a fully open community project to develop a reliable and scalable\noperating system. It began as a fork of the former OpenSolaris  operating system.  Our goal is to foster open development of technologies for the 21 st  century\nwhile building on a twenty-year heritage, but free from the oversight of a\nsingle corporate entity and the resulting challenges thereof.  While our code base has a long history and many engineering traditions attached\nto it, our development processes are being reinvented in an attempt to remove\nbarriers while maintaining consistently high code quality.", 
            "title": "What is the objective of the illumos project?"
        }, 
        {
            "location": "/about/faq/#how-do-i-download-the-software", 
            "text": "The source code developed by the project is a fork of the Sun/Oracle code base\nreferred to as \"OS/Net\" or \"ON\" (short for Operating System/Networking). It is\nthe home of the technologies that previously defined OpenSolaris and Solaris,\nsuch as the kernel, network stack, filesystems, and device drivers, and all of\nthe basic userland libraries and applications.  The illumos code base forms the foundation of  distributions .\nTo use the operating system, just download and install one of the\ndistributions.  To download the source code, follow the section on Git or Mercurial in  How To\nBuild illumos . You can also  browse and search the\nillumos code online .", 
            "title": "How do I download the software?"
        }, 
        {
            "location": "/about/faq/#is-illumos-free-software-open-source", 
            "text": "The bulk of the illumos source code is available under the Common Development\nand Distribution License (CDDL), an OSI-approved free software license based on\nthe Mozilla Public License (MPL).  There are some components with other licenses including BSD and MIT. We also\ninclude some software with the GNU General Public License (GPL) or the\nLesser/Library General Public License (LGPL).  There still remain some binary-only, closed source components that we inherited\nfrom Oracle which we are working to replace. Unlike OpenSolaris, we do not\nrequire a closed source compiler.", 
            "title": "Is illumos free software (open source)?"
        }, 
        {
            "location": "/about/faq/#is-illumos-a-community-project", 
            "text": "Yes!  Multiple community groups and interests (including people like you!) are\nstakeholders in the project, and anyone and everyone is welcome to contribute .  illumos was initiated by then-employees of Nexenta in collaboration with former\nOpenSolaris community members and volunteers. While companies including\nNexenta, Joyent, and Delphix sponsor some of the work in illumos, the project\nis independent of their business decisions. illumos exists as a common base for\nmultiple commercial and community distributions.", 
            "title": "Is illumos a community project?"
        }, 
        {
            "location": "/about/faq/#how-do-i-start-contributing", 
            "text": "illumos thrives on the efforts of its contributors. Have a look at the guide on How To Contribute  if you want to submit code.  If you want to help in other ways then have a look at the  Mailing\nLists .  Most of the developers can be found on  IRC \nand you're invited to drop in and say \"hi!\"", 
            "title": "How do I start contributing?"
        }, 
        {
            "location": "/about/faq/#how-do-i-build-illumos", 
            "text": "See  How To Build illumos .", 
            "title": "How do I build illumos?"
        }, 
        {
            "location": "/about/faq/#how-do-i-build-a-distribution-based-on-illumos", 
            "text": "OpenSolaris was historically difficult to build as a distribution because it\nwas assembled by many separate teams at Sun. The illumos community\ndistributions are working to make this easier.  Some distributions have documented  their build\nprocesses.", 
            "title": "How do I build a distribution based on illumos?"
        }, 
        {
            "location": "/about/faq/#is-illumos-compatible-with-solarisopensolaris", 
            "text": "illumos is very likely to be compatible with Solaris/OpenSolaris binaries and\ndrivers before Oracle closed the gate in 2010. After that, all bets are off.\nSolaris 10 update 11, and Solaris 11, and beyond, may contain incompatible\nchanges.", 
            "title": "Is illumos compatible with Solaris/OpenSolaris?"
        }, 
        {
            "location": "/about/faq/#what-changes-does-illumos-maintain", 
            "text": "Open internationalization libraries and data files.  Open replacements for closed binaries.  Code that Oracle may choose to no longer maintain.  Community enhancements to critical technologies like DTrace and ZFS.  New open technologies.  Patches/bug-fixes we have independently developed, including security fixes.  Changes to ease community development.  ...and more!", 
            "title": "What changes does illumos maintain?"
        }, 
        {
            "location": "/about/faq/#do-you-track-oracle-changes", 
            "text": "We originally intended to closely follow upstream changes, but became a fork by\nnecessity because Oracle's software is no longer open source. We now represent\nthe open future of the code base after Sun.", 
            "title": "Do you track Oracle changes?"
        }, 
        {
            "location": "/about/faq/#will-you-work-on-sending-illumos-changes-upstream", 
            "text": "We would like Oracle to use changes from illumos, as long as they are willing\nto abide by the open source license for our code. Where we use code from other\nfree software projects, we also respect their licenses and keep the source\nopen.", 
            "title": "Will you work on sending illumos changes upstream?"
        }, 
        {
            "location": "/about/faq/#why-did-you-announce-the-project-after-it-was-set-up-and-much-of-the-code-written", 
            "text": "This decision was made for multiple reasons. The signal to noise ratio in the\nOpenSolaris community had grown low, and announcing the project would have\ndistracted the developers from actual code and contribution. Most vocal members\ntalked about opening the code rather than writing it. illumos chose the\nopposite. Before the formal announcement, we reached out to developers in the\ncommunity and solicited their help and participation.", 
            "title": "Why did you announce the project after it was set up and much of the code written?"
        }, 
        {
            "location": "/about/faq/#and-the-name-illumos", 
            "text": "We started off with the codename \"FreeON\", and later realized it is used by an\nexisting project. We finally settled on illumos, after many hours of\nsuggestions and counter-suggestions. illumos (pronounced i-llu-MOS and written\nin lowercase) ties in with Sun and light. It's the closest to ON we could get!", 
            "title": "And the name illumos?"
        }, 
        {
            "location": "/about/logo/", 
            "text": "The illumos logo\n\n\nThe illumos mark is a trademark, and it is important to note that there are\nsome restrictions on its use. The logo itself was created by\n\nRowan\n for illumos.\n\n\nDownload\n\n\nZip of all logos.\n\n\nUsage\n\n\n\n\nThe \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable.\n\n\nThe other icons may be used for personal use (for example to print a T-shirt).\n\n\nAll other use must be approved by Garrett D'Amore.\n\n\nFor most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate.\n\n\nDo not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable.\n\n\nDo not alter the colors in the logo.\n\n\nDo not use the logo at an angle, and do not distort or warp it.\n\n\nGenerally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix.  The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred.\n\n\nThere are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion).\n\n\n\n\nExamples\n\n\n\n\n\n\n\n\nLogo\n\n\nFormats\n\n\n\n\n\n\n\n\n\n\n\n\nsvg \nscalable\neps \nscalable\npng \n64px\npng \n166px\npng \n2057px\n\n\n\n\n\n\n\n\nsvg scalable optimized for \nsmaller\n sizes\n svg scalable optimized for \nlarger\n sizes\n eps scalable optimized for \nsmaller\n sizes\n eps scalable optimized for \nlarger\n sizes\n png \n90px wide\n png \n139px wide\n png \n267px wide\n png \n3320px wide\n\n\n\n\n\n\n\n\nsvg scalable optimized for \nsmaller\n sizes\n svg scalable optimized for \nlarger\n sizes\n eps scalable optimized for \nsmaller\n sizes\n eps scalable optimized for \nlarger\n sizes\n png \n90 px wide\n png \n139 px wide\n png \n267 px wide\n png \n3320 px wide\n\n\n\n\n\n\n\n\npng \n32 px\n png \n63 px\n png \n26 px\n\n\n\n\n\n\n\n\npng \n32 px\n png \n63 px\n png \n126 px\n\n\n\n\n\n\n\n\nThese versions are optimized for screen display. If you need an alternate color\nspace (CMYK, or single or two color only), please send an email to \nGarrett\nD'Amore\n.", 
            "title": "Logo"
        }, 
        {
            "location": "/about/logo/#the-illumos-logo", 
            "text": "The illumos mark is a trademark, and it is important to note that there are\nsome restrictions on its use. The logo itself was created by Rowan  for illumos.", 
            "title": "The illumos logo"
        }, 
        {
            "location": "/about/logo/#download", 
            "text": "Zip of all logos.", 
            "title": "Download"
        }, 
        {
            "location": "/about/logo/#usage", 
            "text": "The \"Powered by\" versions may be used on websites, login banners, distribution media, or other situations to indicate that either a service is running on the illumos operating system, or that a distribution is based upon it. Other uses are unacceptable.  The other icons may be used for personal use (for example to print a T-shirt).  All other use must be approved by Garrett D'Amore.  For most uses, the full-color phoenix with the illumos name next to it is preferred. Use the \"large phoenix\" or \"small phoenix\" version according to how much space is available. The phoenix without the illumos name may be used where the name would be inappropriate.  Do not change the size or position of any parts of the logo relative to each other. Only use the whole logo as a unit, exactly as it is provided. You may scale the vector formats up or down as required. The PNG format should only be scaled down. In all cases, the proportions must be constrained so the logo is not squeezed or stretched. Do not make the logo so small that it becomes unreadable.  Do not alter the colors in the logo.  Do not use the logo at an angle, and do not distort or warp it.  Generally, maintain a clear space on all four sides of the logo. This space should be equal to approximately 25% of the height of the phoenix.  The font used in the logo is Museo Sans. Some versions use Museo Slab, but Museo Sans is preferred.  There are two versions of the text, one which is optimized for smaller sizes (where the ratio of the word \"illumos\" to the logo is larger), and one for larger displays (where the text is a bit smaller in proportion).", 
            "title": "Usage"
        }, 
        {
            "location": "/about/logo/#examples", 
            "text": "Logo  Formats       svg  scalable eps  scalable png  64px png  166px png  2057px     svg scalable optimized for  smaller  sizes  svg scalable optimized for  larger  sizes  eps scalable optimized for  smaller  sizes  eps scalable optimized for  larger  sizes  png  90px wide  png  139px wide  png  267px wide  png  3320px wide     svg scalable optimized for  smaller  sizes  svg scalable optimized for  larger  sizes  eps scalable optimized for  smaller  sizes  eps scalable optimized for  larger  sizes  png  90 px wide  png  139 px wide  png  267 px wide  png  3320 px wide     png  32 px  png  63 px  png  26 px     png  32 px  png  63 px  png  126 px     These versions are optimized for screen display. If you need an alternate color\nspace (CMYK, or single or two color only), please send an email to  Garrett\nD'Amore .", 
            "title": "Examples"
        }, 
        {
            "location": "/security/", 
            "text": "illumos Security Information\n\n\nIntroduction\n\n\nReporting security incidents\n\n\nPlease send mail to \n.\n\n\nTODO: Provide GPG key(s).\n\n\nRecent vulnerabilities\n\n\nAdvisory information\n\n\nHow to update your system", 
            "title": "Security"
        }, 
        {
            "location": "/security/#illumos-security-information", 
            "text": "", 
            "title": "illumos Security Information"
        }, 
        {
            "location": "/security/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/security/#reporting-security-incidents", 
            "text": "Please send mail to  .  TODO: Provide GPG key(s).", 
            "title": "Reporting security incidents"
        }, 
        {
            "location": "/security/#recent-vulnerabilities", 
            "text": "", 
            "title": "Recent vulnerabilities"
        }, 
        {
            "location": "/security/#advisory-information", 
            "text": "", 
            "title": "Advisory information"
        }, 
        {
            "location": "/security/#how-to-update-your-system", 
            "text": "", 
            "title": "How to update your system"
        }, 
        {
            "location": "/flagdays/", 
            "text": "Flag Days\n\n\nThe following are notices sent to the \ndeveloper@ mailing\nlist\n to attract attention for specific changes, or call\nout specific actions that developers may need to perform to continue working\nwith the sources. Such messages should also be archived here, for future\nreference. \n\n\n2018\n\n\n\n\n2018-01-25 HEADS UP: Removal of 32-bit x86 kernel\n\n\n\n\n2017\n\n\n\n\n2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype\n\n\n2017-03-07 HEADS UP: Removal of on and rpc.rexd\n\n\n2017-03-10 HEADSUP: updates 7720 \n 7715\n\n\n2017-09-27 Heads Up: Build changes required for UEFI\n\n\n\n\n2016\n\n\n\n\n2016-02-23 HEADS UP: 3661 Sync mDNS with upstream\n\n\n2016-07-14 Heads-up: 6950 ARC should cache compressed data\n\n\n2016-08-22 FLAG DAY: EOF of SunSSH\n\n\n2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster\n\n\n2016-09-23 Heads Up: Loader Project Phase 1 has Integrated\n\n\n2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7\n\n\n2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation.\n\n\n2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000\n\n\n2016-12-02 headsup for shell setup and /etc/skel\n\n\n2016-12-16 HEADS UP illumos GCC 4.4.4-il-4\n\n\n\n\n2015\n\n\n\n\n2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers.\n\n\n2015-02-25 HEADS UP: machid commands removed\n\n\n2015-02-26 HEADS-UP: ctf tools no longer act like strip(1)\n\n\n2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs\n\n\n2015-03-23 FLAG DAY for Timezone\n\n\n2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold\n\n\n2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later\n\n\n2015-06-04 Head-up! 5917 User-mode SMB server\n\n\n2015-07-13 FLAG DAY: make/dmake are now part of illumos\n\n\n2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space)\n\n\nUpdate\n\n\n2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone\n\n\n\n\n2014\n\n\n\n\n2014-01-28 HEADS-UP: GCC is now the default compiler\n\n\n2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate\n\n\n2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong\n\n\n2014-06-09 HEADS UP: legacy interfaces removed\n\n\n2014-07-21 HEADS UP: Mandoc integrated\n\n\n2014-08-15 HEADS UP / FLAG DAY: legacy (K\nR) prototypes are gone\n\n\n2014-08-16 HEADS-UP removal of ntfsprogs and parted\n\n\n2014-10-18 HEADS UP: libm integrated\n\n\n\n\n2013\n\n\n\n\n2013-08-16 heads up: 3915 build changes, C++\n\n\n\n\n2012\n\n\n\n\n2012-06-15 Illumos will now build with GCC 4.4.4 + patches\n\n\n2012-09-21 FLAG DAY: Default GCC version is now 4.4.4\n\n\n2012-09-22 FLAG DAY: Many more GCC warnings now enabled\n\n\n2012-10-18 HEADS UP: onbld has switched to Python 2.6\n\n\n\n\n2011\n\n\n\n\n2011-03-04 Heads up: iSCSI UNMAP support\n\n\n2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property\n\n\n2011-09-08 HEADS UP: Mailing List Behaviour\n\n\n\n\n2010\n\n\n\n\n2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository\n\n\n2010-08-19 HEADS UP: opensolaris.sh updated \n renamed\n\n\n2010-08-30 HEADS UP: English Locales Available\n\n\n2010-09-07 HEADS UP: use ssh for hg\n\n\n2010-09-12 FLAG DAY: signed crypto removed\n\n\n2010-09-16 HEADS UP: new process when nuking closed bits\n\n\n2010-09-20 HEADS UP: netservices is gone\n\n\n2010-10-08 HEADS UP: locale data pushed\n\n\n2010-11-08 Heads up: perl 5.8.4 removal\n\n\n2010-11-18 HEADS UP: solistice enterprise agent removed\n\n\n2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed\n\n\n2010-12-04 HEADS UP: open source iprb\n\n\n2010-12-04 HEADS UP: new timegm() and strptime/strftime options\n\n\n2010-12-15 HEADS UP: new \"sed\" integrated", 
            "title": "Flag Days"
        }, 
        {
            "location": "/flagdays/#flag-days", 
            "text": "The following are notices sent to the  developer@ mailing\nlist  to attract attention for specific changes, or call\nout specific actions that developers may need to perform to continue working\nwith the sources. Such messages should also be archived here, for future\nreference.", 
            "title": "Flag Days"
        }, 
        {
            "location": "/flagdays/#2018", 
            "text": "2018-01-25 HEADS UP: Removal of 32-bit x86 kernel", 
            "title": "2018"
        }, 
        {
            "location": "/flagdays/#2017", 
            "text": "2017-03-02 Heads up: 7788 loader: zfs boot should check for provided fstype  2017-03-07 HEADS UP: Removal of on and rpc.rexd  2017-03-10 HEADSUP: updates 7720   7715  2017-09-27 Heads Up: Build changes required for UEFI", 
            "title": "2017"
        }, 
        {
            "location": "/flagdays/#2016", 
            "text": "2016-02-23 HEADS UP: 3661 Sync mDNS with upstream  2016-07-14 Heads-up: 6950 ARC should cache compressed data  2016-08-22 FLAG DAY: EOF of SunSSH  2016-08-31 HEADS UP: illumos-gate debug variant is available in hipster  2016-09-23 Heads Up: Loader Project Phase 1 has Integrated  2016-09-30 FLAG DAY - 5969 update illumos-gate to use python2.7  2016-10-15 HEADS-UP: illumos supports ASLR and other forms of exploit mitigation.  2016-11-09 HEADS UP: new driver for Intel WifiLink 4965/100/1000/2000/5000/6000  2016-12-02 headsup for shell setup and /etc/skel  2016-12-16 HEADS UP illumos GCC 4.4.4-il-4", 
            "title": "2016"
        }, 
        {
            "location": "/flagdays/#2015", 
            "text": "2015-02-20 Heads-up: Flag day for build machines that provided (only) Apache 1.3 headers.  2015-02-25 HEADS UP: machid commands removed  2015-02-26 HEADS-UP: ctf tools no longer act like strip(1)  2015-02-26 HEADS UP: illumos supports booting from EFI-labeled disks now, including large disks and whole-disk vdevs  2015-03-23 FLAG DAY for Timezone  2015-05-05 FLAG DAY - 4719 affects nightly, package, and poold  2015-05-05 HEADS UP -- illumos-gate can now be built on OmniOS r151014 or later  2015-06-04 Head-up! 5917 User-mode SMB server  2015-07-13 FLAG DAY: make/dmake are now part of illumos  2015-10-17 Heads up: Impact of illumos 5876 (sys/regset.h pollutes name space)  Update  2015-10-30 HEADS UP: Java kerberos GUI (gkadmin) gone", 
            "title": "2015"
        }, 
        {
            "location": "/flagdays/#2014", 
            "text": "2014-01-28 HEADS-UP: GCC is now the default compiler  2014-02-19 HEADS UP: Nightly will no longer bringover from Subversion, build SVR4 packages, or support the old SFW gate  2014-02-19 HEADS UP: nightly now exits non-0 when pretty much anything goes wrong  2014-06-09 HEADS UP: legacy interfaces removed  2014-07-21 HEADS UP: Mandoc integrated  2014-08-15 HEADS UP / FLAG DAY: legacy (K R) prototypes are gone  2014-08-16 HEADS-UP removal of ntfsprogs and parted  2014-10-18 HEADS UP: libm integrated", 
            "title": "2014"
        }, 
        {
            "location": "/flagdays/#2013", 
            "text": "2013-08-16 heads up: 3915 build changes, C++", 
            "title": "2013"
        }, 
        {
            "location": "/flagdays/#2012", 
            "text": "2012-06-15 Illumos will now build with GCC 4.4.4 + patches  2012-09-21 FLAG DAY: Default GCC version is now 4.4.4  2012-09-22 FLAG DAY: Many more GCC warnings now enabled  2012-10-18 HEADS UP: onbld has switched to Python 2.6", 
            "title": "2012"
        }, 
        {
            "location": "/flagdays/#2011", 
            "text": "2011-03-04 Heads up: iSCSI UNMAP support  2011-05-14 Heads-up: Resurrect the ZFS \"aclmode\" property  2011-09-08 HEADS UP: Mailing List Behaviour", 
            "title": "2011"
        }, 
        {
            "location": "/flagdays/#2010", 
            "text": "2010-08-15 HEADS UP: Illumos no longer depends upon the 'extras' pkg repository  2010-08-19 HEADS UP: opensolaris.sh updated   renamed  2010-08-30 HEADS UP: English Locales Available  2010-09-07 HEADS UP: use ssh for hg  2010-09-12 FLAG DAY: signed crypto removed  2010-09-16 HEADS UP: new process when nuking closed bits  2010-09-20 HEADS UP: netservices is gone  2010-10-08 HEADS UP: locale data pushed  2010-11-08 Heads up: perl 5.8.4 removal  2010-11-18 HEADS UP: solistice enterprise agent removed  2010-11-19 HEADS UP: sparc build fixed, niagra crypto removed  2010-12-04 HEADS UP: open source iprb  2010-12-04 HEADS UP: new timegm() and strptime/strftime options  2010-12-15 HEADS UP: new \"sed\" integrated", 
            "title": "2010"
        }, 
        {
            "location": "/about/history/", 
            "text": "A Brief History of Everything^WUNIX\n\n\nIn the Second Age of Computing, the UNIX operating system emerged, in pieces,\nfrom the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks\nfrom AT\nTs Bell Labs.\n\n\nFrom there, the river\n\ndiverges\n\nalmost as much as our metaphors. However, the forks we care about start with\nBSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail\nthis history in greater depth (and to a large degree they do not necessarily\nconcern us.)\n\n\nIn 2005 Sun Microsystems released Solaris 10 which contains several truly\ninnovative features we continue to rely on to this day. Just as importantly,\nhowever, Sun also opensourced the operating system as OpenSolaris. While there\nwere a few governance missteps along the way, it was a bold move.\n\n\nIf you're interested in the history of OpenSolaris, Jim Grisanzio has \nwritten\nan in-depth piece on it\n.\n\n\nIn 2010 Oracle acquired Sun, and \nsilently closed the\ngate\n. The\nsource code was no longer updated, communications to the open source community\nstopped. OpenSolaris was effectively dead.\n\n\nFrom this, however, project founder Garrett D'Amore took the last drop of the\ngate and \nannounced illumos\n in mid-2010.\n\n\nFor a longer, more flavorful description of Solaris and illumos history, Bryan\nCantrill's \nFork Yeah! The Rise and Development of\nillumos\n talk from USENIX LISA\n2011 should be considered required viewing. (Note: Potentially not suitable for\nminors.)\n\n\nSince 2010, a number of companies have built their businesses around illumos,\nor are running on one of the distributions built from it. For a very incomplete\nlist, please see \nwho is using illumos\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/about/history/#a-brief-history-of-everythingwunix", 
            "text": "In the Second Age of Computing, the UNIX operating system emerged, in pieces,\nfrom the minds of Ken Thompson, Dennis Ritchie, Doug McIllroy and bright sparks\nfrom AT Ts Bell Labs.  From there, the river diverges \nalmost as much as our metaphors. However, the forks we care about start with\nBSD and System V UNIX R4, which begat SunOS and Solaris. Other documents detail\nthis history in greater depth (and to a large degree they do not necessarily\nconcern us.)  In 2005 Sun Microsystems released Solaris 10 which contains several truly\ninnovative features we continue to rely on to this day. Just as importantly,\nhowever, Sun also opensourced the operating system as OpenSolaris. While there\nwere a few governance missteps along the way, it was a bold move.  If you're interested in the history of OpenSolaris, Jim Grisanzio has  written\nan in-depth piece on it .  In 2010 Oracle acquired Sun, and  silently closed the\ngate . The\nsource code was no longer updated, communications to the open source community\nstopped. OpenSolaris was effectively dead.  From this, however, project founder Garrett D'Amore took the last drop of the\ngate and  announced illumos  in mid-2010.  For a longer, more flavorful description of Solaris and illumos history, Bryan\nCantrill's  Fork Yeah! The Rise and Development of\nillumos  talk from USENIX LISA\n2011 should be considered required viewing. (Note: Potentially not suitable for\nminors.)  Since 2010, a number of companies have built their businesses around illumos,\nor are running on one of the distributions built from it. For a very incomplete\nlist, please see  who is using illumos .", 
            "title": "A Brief History of Everything^WUNIX"
        }, 
        {
            "location": "/about/announcement/", 
            "text": "Project Announcement\n\n\nIntroduction\n\n\nOn August 3, 2010, Garrett D'Amore announced the illumos project, \"a community\neffort of some core Solaris engineers to create a truly open source Solaris by\nswapping closed source bits of OpenSolaris with open implementations.\"\n\n\nIn January, 2012, he reflected on \nExperiences Starting an Open Source\nOperating\nSystem\n\nin a talk at SCALE 10x.\n\n\nGarrett's original slides\n\n\nTranscript\n\n\nOK, everybody. Thank you for joining us. My name is Garrett D\nAmore. Hopefully\neveryone is hearing this. We had some technology challenges such as, such as it\ngoes in our industry, and I apologise for the late start but here we are\nanyway.\n\nSo Illumos. First off I do want to point out before we get started, that there\nis a Q \n A window in the Go2 webinar screen and Anil who is helping me out\nhere, is monitoring that. You can ask questions there and he will forward them\nto me. We also have a backchannel on IRC if you go to irc.freenode.net and the\nback channel is #illumos. I-L-L-U-M-O-S, and Anil\ns monitoring that as well,\nand he\nll let me know if there\ns pertinent questions I should address. I will\ntry to address those questions at the end, however.\n\n[Slide 1, 1:06]\n\nSo, without further adieu, let\ns go ahead and continue. So, thanks for joining\nus. I think that the topic there on the first page slide, hopefully everybody\nsees it. By the way if you aren\nt able to see the slides now, we will be\nposting them up, excuse me Anil have you already posted those? Ok, so Anil with\npost them momentarily. So, hopefully you can get them, and they\nll be on the\nwebsite at www.illumos.org. Just looking at that font on the slide, and realize\nthe \nI\n really doesn\nt stand out vary differently from the \nL.\n I apologize for\nthat, it\ns I-L-L. And our topic is \nHope and Light Springs Anew.\n\n\nSo, the name... well first off I hope everyone understands that this\npresentation is targeted towards the OpenSolaris audience so I didn\nt really go\ninto a lot of background there. It will become clear as we go on. If you are\nhere asking about Windows or something else you\nre probably in the wrong\nconference call.\n\n[Slide 2, 2:19]\n\nSo what\ns in a name? First \nIllum\n from Latin for \nLight\n and \nOS\n for\n\nOperating System.\n However even though I printed it out this way on the slide,\nnow we\nve been spelling it all one word with any unusual spellings, so\nI-L-L-U-M-O-S, with only the \nI\n capitalized.\n\n[Slide 3, 2:41]\n\nSo, actually what is this project about? Well the first thing is that the\nproject is designed here to solve a key problem, and that is that not all of\nOpenSolaris is really open source. And there\ns a lot of other potential\nconcerns in the community, but this one is really kind of a core one, and from\nsolving this, I think a lot of other issues can be solved. So the critical\ncomponents of OpenSolaris. Well, first off I guess I should say that most of\nthe important parts of OpenSolaris are, for booting at least and for building a\nfoundation block for the OS/Net consolidation, out of that consolidation it\ns\nnearly completely open source, except for a few pieces. One of the most\nstriking pieces is this part called \nlibc-i18n,\n which is a component you need\nto build a working C library. It\ns a substantial percentage of libc is tied up\nin that libc-i18n, in some cases because it\ns i18n code, in other cases because\nof dependencies and well dependencies is probably the best way to put it.\n\nThe NFS lock manager, of course, there\ns the crypto framework, a number of\nreally important drivers. mpt I listed here is a pretty famous one its for a\npretty popular series of HBAs from LSI. But there\ns a lot of other drivers that\nare closed source, and in fact even some key platform code, although that\ns for\nthe most port an issue for the SPARC port. Most of the critical platform code\nfor x86 is open, in fact I can\nt think of anything critical that\ns closed.\nThis list is by no means exhaustive, but it\ns a good start.\n\nSo the problem with the fact that not all of this source is open is that it\nreally does present some big challenges to anyone downstream or who depends on\nOS/Net or consequently OpenSolaris and of course this involves Nexenta,\nBelinux, Schillix these are all derivative distributions from the original\nsource from Oracle. And this problem is not new to the industry; some years ago\nApple had done the community a great favor by opening a bunch of their code in\nthe form of Darwin. However I think you can Google around for MacOS X and\nDarwin and see the end result of that. And that is, the end result, I think,\nthat we would all like to avoid.\n\n[Slide 4, 5:32]\n\nSo there\ns a lot of good stuff, with all the other issues going on with the\ncommunity that\ns built up around the code. First off there\ns technology in\nthe code, zfs, dtrace, crossbow, zones, I think everyone who\ns familiar with\nOpensolaris will recognize this stuff, and if you don\nt, Google will readily\nfill you in with lots and lots of detail on all of these technologies, and this\nis just a brief list of some of the big names. There\ns a lot of others beyond\nthis. And of course the community behind these technologies is made up of a\nnumber of just incredible engineers, I\nve been fortunate to work with some of\nthe brightest people on the planet, I believe, on Solaris and SunOS code. And\nwe are also backed by an outstanding set of enthusiasts, and our eco-system\nreally is quite vibrant, particularly in light of some of the other challenges\nit continues to be so vibrant. This I think says a lot. And of course the other\nthing is that it\ns not all closed. In fact, the vast majority of the code is\nindeed open. So the problem of, the problem faced to resolve this is actually\nquite tractable.\n\n[Slide 5, 7:06]\n\nTechnology issues, there it goes, alright. I apologise. OK. So around this\neffort. I talked a little about the issue of the code. To elaborate a little\nbit further, what we\nve done is taken OS/Net, this consolidation which really\nmakes up the kernel and a bunch of critical system utilities and made a child\nof it, and this is really a source code management type term but what it means\nis that it has an ancestry relationship with the upstream which in this case is\nthe code from Oracle, and we track the upstream very closely, and we also have\nthe goal of being 100% compatible with the code from Oracle. I say ABI\ncompatible, what that means is that the idea is that you can take an\napplication that is compiled and runs well on Solaris, and the same exact\napplication compiles and runs on Illumos, so that is an important point.\n\nWe also, the idea is no closed code. There\ns a fully open libc, I would want to\nhave a fully open kernel, and fully open drivers. As you\nll see we are not all\nthe way there yet but we made really good progress, and continue to work on\nthis. The other idea is that this project then becomes a repository where we\ncan take changes from contributors that for a variety of reasons might be\nunacceptable to Oracle, and I can detail all those later, maybe in Q \n A or\nmaybe separately. There\ns a lot of potential possibilities here, and as long as\nwe don\nt really break the idea of ABI compatibility with Solaris and we don\nt\ndiverge needlessly from the upstream ON consolidation, there\ns a lot of room\nfor innovation.\n\n[Slide 6, 9:19]\n\nSo the focus of Illumos is really ON right now, OS/Net, that\ns that core\nconsolidation that I talked about. But one of the ideas is that this also can\nthen ultimately build a community that can act as an umbrella for these other\nprojects, and other pieces, that become interesting, once you solve this\ncritical problem of that core foundation. X11, which is basically the graphical\nwindowing system. The desktop components. The C runtime. Some of the\ndistributions. And there is potentially a lot of ways which people can\ninnovate, and contribute. Which unfortunately, in the current community is\nquite difficult to do. We hope that we can become a lot more of a facilitator\nin that kind of development and collaboration.\n\n[Slide 7, 10:16]\n\nSo, around this, we hope to build a community. And, I think we actually have\nreally started one pretty strongly, from the people who have already either\nagreed to participate or are participating. And this community stands\nindependently from the OpenSolaris community. What that means is that we own\nour own identity, and we can\nt be shut down, and we\nre not slaves to any\ncorporate master. And even though Nexenta is a major sponsor, and I\nm very\ngrateful that Nexenta is. They\nre my employer, and they are funding my time on\nthis. But the identity and the project, is owned by the community. And that\nmeans we\nre governed and run by the community. On that topic, I have a few\nbullet points there about our resources being distributed, the fact that we\nre\ngoing to basically run this as a Meritocracy, with a light hand on governance,\nwhich is one of the areas we think we can improve upon from the previous\nattempts.\n\n[Slide 8, 11:28]\n\nSo there\ns a large number of people. I started the project, so I guess I\nm the\ndefactor \nleader\n. But you know, there\ns actually quite a - it was a dozen when\nI wrote this, it\ns probably grown since then. This project started out with\njust a few developers, that I wanted have real focus on just getting the code\ndone. Without engaging in a lot of conversation. Even with that small, focused\ngroup, it\ns already still growing. And now, today, as of right this minute, we\nhope to engage a much much broader audience. A we hope to invite, all of you -\nactually we do invite all of you. So come join us. In this presentation you\nll\nsee there\ns a website you can join, there\ns mailing lists you can join. A\nnumber of the community leaders, a lot of whom you will be familiar with, if\nyou\nre already a part of this group. In fact, hang on just a minute. Some of\nthem are on this call. And actually we have a couple who have agreed to speak.\nI\nd like to tie in one. Anil\ns checking on it for me. Just a minute.\n\n[12:48]\n\nSimon, we\nre going to go ahead and un-mute your mic. Are you available to talk?\nOk, great. So Simon Phipps is one of the - he didn\nt start out as an existing\ncore member. But he\ns agreed to help us out, and as you\nll see later, he\ns\nagreed to take a role in this, and I\nm hoping that Simon has some good things\nto say.\n\n*\nSimon Phipps, SP\n* Hi Garrett.\n\n*\nGDA\n* Simon Phipps, maybe not the best introduction.\n\n*\nSP\n* I\nm very pleased that you\nre doing this, Garrett. You know I\nve seen a\nproject like this before, when we started OpenJDK there was some concern, that\nSun wasn\nt going to get around to opening all of the Java code, so some\ncommunity members got together and formed a project called \nIcedTea\n, which was\ndownstream of OpenJDK, but to which people could innovate and could fix the\nnon-free parts of OpenJDK. It was the existence of that project, that made\nOpenJDK a fully free project, and led to it having the existence beyond the\nsponsorship that Sun put into it. I\nm looking at Illumos at the moment, and I\nthink it\ns exactly the right step to take. It\ns good that it\ns downstream of\nOracle. If they choose to use it, it could do a great deal of good to their\nSolaris products. If they choose not to use it, then it\ns a great place for the\ncommunity to assemble, and give a future to Solaris.\n\n*\nGDA\n* Ok. Great. And thanks for your support. That was Simon Phipps. Simon\ncurrently sits on the board for the Open Source Initiative. I think that\ns\ncorrect, is that correct, Simon?\n\n*\nSP\n* That\ns correct. I\nm on the board of directors of OSI, the Open Source\nInitiative. At the moment, while we still have one, I\nm a member of the\nOpenSolaris Governing Board, as well.\n\n*\nGDA\n* Ok. And he also writes for Computer World UK. I\nm sure you can find his\nblog pretty easily. Thank you very much Simon. Let\ns go ahead and move along.\nOne of the points that\ns on there, before I switch to the next slide, is that I\nbelieve that we actually do already have critical mass to drive this project\nforward. That\ns one of the real challenges for a project like this. The\ncodebase, when you look at the size of OS/Net, is quite enormous, but the\nnumber of people, and people who are actual do-ers rather than talk-ers, who\nare involved and interested and engaged, already, is - I\nm actually astounded,\nand thrilled to have such a - frankly an illustrious group of contributors\ninvolved. I have great hope. Moving forward.\n\n[Slide 9, 15:50]\n\nWe have quite a few community partners. Of course, Nexenta is one of these, and\nthere\ns a number of these names that you will recognise, if you\nre familiar\nwith the OpenSolaris community. Google is great at filling each one of these\nout. I\nm not going to present all of them to you. But I\nm really pleased that a\nformer colleague of mine at Oracle, is with us, and he has taken a position as\nVice President of Engineering at Joyent. Hopefully he\ns on the line. His name\nis Brian Cantrill. He\ns one of the co-creators of DTrace as I understand it.\nCan we un-mute his mic? We\nre having some technical issues here, hopefully\nwe\nll get Brian in, in a few minutes. In the meantime, I\nm going to go ahead\nand move on.\n\n[Slide 10, 16:52]\n\nThe 800 pound gorilla. This is the question that is probably on a lot of\npeople\ns minds. The 800 pound gorilla being that company that bought former\nowner of the Intellectual Property behind most of OpenSolaris, Oracle. The\ninteractions here, it\ns really important that we understand what these\ninteractions are, and what they\nre intended to be. The first of these is that\nIllumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have\npersonally invited Oracle to participate as a peer, although they don\nt get to\nown it, we would love to have their participation. To the extent that they are\nallowed to, per whatever arrangements they have with Oracle, welcome the\nindividual employees of Oracle, to participate here as well. We\nd love to have\na collaborative and cooperative relationship with Oracle. Just as with any of\nour other corporate partners. From that slide I just had, you can see a few.\nThat slide, by the way, is by no means complete. I hope that it will not be the\nend statement, either. But we\nre not going to depend on them. I\nm being told\nnow that Brian is available, so I\nm going to go ahead and switch back to Brian.\n\n[18:12]\n\n*\nBryan Cantrill, BC\n* Hey Garrett. This is terrific news. A great development\nfor the OpenSolaris community. Looking back, historically, I think we at Sun (I\nshould say \nthey\n now I guess) - I think that Sun understood the importance of\nthe right to fork the operating system, but I think we\nve underestimated the\nimportance of the power to fork the operating system. As you know, as we all\nknow, we never quite made it to 100% of the source. And what that, effectively,\nforbid - not explicitly, I mean we didn\nt do it by design - but because there\nwere these encumbrances that didn\nt allow us to open source elements of the\noperating system, it effectively did not allow for a fork. A fork is a really\nimportant check against an open source project. A fork is what allows people to\ninnovate. A fork is what allows people to not get hung up on governance models.\nIt allows them to express their independence from a project. Whilst people had\nthe right, strictly speaking, they didn\nt have the power, because it was not\nall open source. Today is a really critical development. It is giving all of\nus, in the community, the power to fork the system. Not that we want to\nactually exercise that power in a way that is divisive, but we need to be able\nto exercise that power in a way that is innovative. I think that is going to\nallow many of us - now speaking as Joyent - many of us in the community who\ndepend on the innovations in this system for the value that we bring to our\ncustomers, it is going to allow all of us to begin to differentiate ourselves\nin the marketplace, it\ns going to allow all of us to be able to really innovate\nto the operating system, and allows us all to collaborate. I think that,\nspeaking for Joyent, we have modifications to the system that we have not been\nable to integrate for a variety of reasons. We believe with Illumos - with the\nIllumos project - that we will be able to begin to integrate some of these\nmodifications. Many of them, of course, are small - bugfixes and so on. But\nthings that for a variety of reasons couldn\nt be taken further upstream. I,\npersonally, and we, Joyent, are thrilled. This is a tremendous, tremendous\ndevelopment. Garrett, you and your team, are to be commended for some very\ndifficult technical work. To be clear, we are not completely out of the woods\nyet. We boot. That\ns good. But we got work ahead of us. Collectively. As a\ncommunity. To get to a vibrant base, that will allow for innovation. I\nm much\nmore confident now, than I have been at any time in the last five years, that\nwe\nre going to get there as a community. So, very exciting development, and I\nthink you see the number of people that are on Freenode. A lot of folks are\ninterested in this. I think for us as a community it\ns a real reboot. We owe\nour debt of gratitude to Garrett and the Illumos project.\n\n[21:44]\n\n*\nGDA\n* Thank you very much, Brian. I\nm very, very pleased that you and the\nrest of the crew at Joyent are going to be able to join us, and collaborate to\nexpand upon the great work that is already part of SunOS base. With that, I\nm\ngoing to go ahead and switch back, because I want to keep moving ahead. On this\none slide, the 800 pound gorilla. So I think that this idea that Brian really\nhit on, is that we have the power to fork. We are not a fork, but what we do is\nwe represent the ability of the community to do that. That\ns key.\n\n[Slide 11, 22:30]\n\nIn fact, here\ns my top slide on that. What if the tap is turned off? What if,\nthe upstream, ceases to be cooperative, or just goes away. For a lot of\nreasons, I don\nt think that\ns going to happen. Even if the community around\nthat code-base were to be abandoned, or shut down - or even change it\ns\ncharacter in a way that it might be hard to recognise it, the code-base, I\nexpect personally, for that to remain available. That code that is already\navailable, and for it to continue to be updated, on some level of frequency.\nBut in the event, that it were to go away, we believe that with the developers\nwe have, and especially, the growing ecosystem that already just on day one\nhere, seems to be exploding. I think we have critical mass to continue to\nsustain it. As I said, I\nm thrilled that Joyent, and there is a bunch of other\npeople, are a part of that. Of course, if this happens, then we - by definition\n- become a fork. We are not a fork today, because of the way we track OS/Net.\nIn my mind, in a classical sense, a fork starts from the starting point, and\nmoves away, and becomes something else. So we\nre more like a project that -\nwe\nre going to continue to try to work closely with Oracle. As I think that\nBrian talked about, really the idea is that Illumos is the insurance that the\nentire community needs, against this sort of scenario of what happens if the\ntap is turned off.\n\n[Slide 12, 24:14]\n\nWhat are some of the major goals of this project. I think we\nve already talked\nabout some of these. We want to be a self-hosting SunOS derivative. We\nre not\nquite there yet, but we\nre getting there. We\nve made good strides. Fully open\nsource, of course. That\ns kind of, I think, a key thing. I already touched on\nthe 100% ABI compatibility with Solaris. So, for those who are listening in,\nand aren\nt familiar with the acronym ABI, that\ns Application Binary\nInterface, and really what it means, is that your existing applications work\nwithout being recompiled. This next, fourth bullet point, I haven\nt touched on\nit today, and it\ns really key. Probably it deserves a little bit of discussion.\nThat is, that we want the things that we put into Illumos to be usable by\nOracle. To be able to be taken back into the upstream code from Oracle. This is\npart of the - we\nre not a fork today. Working and collaborate in a\ncollaborative relationship with Oracle. So there\ns a bunch of other\nconsequences that fall out of this. But the key thing is that the code that\nintegrates into Illumos really should be - it should be reasonable for somebody\nto integrate that back into the Oracle code base. If whatever political or\nbusiness goals, that were preventing that, were removed. Of course, we don\nt\nwant to have any corporate dependencies on the Illumos project. I think I\nve\nalready talked about this. This last bullet point, the basis for other\ndistributions. For people not familiar with the way OpenSolaris distributions\nare built today, there is typically this bottom piece, called ON. And there is\na bunch of other pieces, that are put together, and then these are all\nconstructed together, to create a full operating system. And there\ns a number\nof distributions besides the one that Oracle creates, called OpenSolaris.\nThere\ns Schillix, there\ns Belenix, and of course, my favourite, Nexenta. This\nis just a few of them. There\ns quite a few others. MilaX, EON, and we haven\nt\ntalked to all of the people producing these distributions, but at least the\nones that we have talked to are already engaged in looking at Illumos as their\nfuture base line. So they\nre participating. I\nm going to make a brief note\nhere, there is another individual who is a part of the Illumos developer\ncommunity, who\ns also working on a completely open, community driven, version\nof the distribution, formerly known as Indiana. I\nm not going to say anything\nmore about that, because that would be stealing his thunder. Hopefully, you\nll\nhear more from him in the coming days or weeks.\n\n[Slide 13, 27:10]\n\nA little bit here about how the project is organised. Basically, we\nre going to\nhave two groups, one group is this notion of administrative council, that\nbasically handles non-technical matters. So resource management. We do have\nservers, we have mailing lists. There is probably matters of evangelism and\nmarketing and all these others things that happen. We wanted to seperate the\ntechnical from the non-technical. So the people focused on the code, and\ngetting things done, didn\nt have to be bothered by the day-to-day running of\nthe details. Likewise, the people running the day-to-day details don\nt have to\nbe all-star developers. Initially, I\nm the chairman. It\ns a benevolent\ndictatorship until we come up with some other form of rule that works. The idea\nis to make this as much as possible, reasonable consensus driven, although\nthere will be a smaller group, that actually runs the administrative council. I\nhave already appointed a few members, that may change. Hopefully they will\nselect some additional members, to fill out their own ranks. The idea is a\nmeritocracy, the people who are actually helping to do things, rather than just\npeople who want to stand up and claim credit.\n\n[Slide 14, 28:35]\n\nThe other half of this is the developer council. I had a little tie-in from a\njoke here. A community member actually, had a nice tagline here, his name is\nMatthew, you\nll see him on IRC as lewellyn. His line was \nif you have a\npolarising issue, the first thing you have to work out if it\ns AC or DC\n.\nThanks to lewellyn for that little tid-bit. It\ns, again a benevolent\ndictatorship, and I\nm going to take the role as tech lead on the project. I\nll\nprobably keep that lead, longer than I will the leadership in the other side,\nbecause I really do view myself as a technical individual. Again, the initial\nmembers will be appointed. The idea is that this really made up of the\ndevelopers who have the ability and - not just the ability - but the right to\ncommit, and a consensus driven meritocracy. My hope is that as tech lead, I\nhelp define direction, but I only get involved in arbitration if no other\nalternative, solution can be arrived at via consensus.\n\n[29:55]\n\nI\nm seeing something on my UI here that says that we may be having network\ntrouble. Can somebody indicate on the IRC channel, am I coming across clearly?\nOk. Anil\ns giving the thumbs up. So I\nm going to keep going. Maybe it\ns not too\nbad.\n\n[Slide 15, 30:10]\n\nRules for integration. This is getting down to the nuts and bolts of how we\nexpect to operate. As I think I already mentioned, again ON here is OS/Net.\nThat\ns that consolidation from the upstream. We have the same kind of\nguidelines. You still gotta pass your cstyle, lint, you know, test your code,\nhave it reviewed, so forth. We do have some license restrictions, and really\nthese have a lot to do with this goal of making it easy for Oracle to take our\ncode and re-integrate it back into the upstream.\n\n\n\n\nCredits\n\n\n\n\nBrian Bienvenu (taemun)\n\n\nA. Hettinger (oninoshiko)", 
            "title": "Announcement"
        }, 
        {
            "location": "/about/announcement/#project-announcement", 
            "text": "", 
            "title": "Project Announcement"
        }, 
        {
            "location": "/about/announcement/#introduction", 
            "text": "On August 3, 2010, Garrett D'Amore announced the illumos project, \"a community\neffort of some core Solaris engineers to create a truly open source Solaris by\nswapping closed source bits of OpenSolaris with open implementations.\"  In January, 2012, he reflected on  Experiences Starting an Open Source\nOperating\nSystem \nin a talk at SCALE 10x.  Garrett's original slides", 
            "title": "Introduction"
        }, 
        {
            "location": "/about/announcement/#transcript", 
            "text": "OK, everybody. Thank you for joining us. My name is Garrett D Amore. Hopefully\neveryone is hearing this. We had some technology challenges such as, such as it\ngoes in our industry, and I apologise for the late start but here we are\nanyway.\n\nSo Illumos. First off I do want to point out before we get started, that there\nis a Q   A window in the Go2 webinar screen and Anil who is helping me out\nhere, is monitoring that. You can ask questions there and he will forward them\nto me. We also have a backchannel on IRC if you go to irc.freenode.net and the\nback channel is #illumos. I-L-L-U-M-O-S, and Anil s monitoring that as well,\nand he ll let me know if there s pertinent questions I should address. I will\ntry to address those questions at the end, however.\n\n[Slide 1, 1:06]\n\nSo, without further adieu, let s go ahead and continue. So, thanks for joining\nus. I think that the topic there on the first page slide, hopefully everybody\nsees it. By the way if you aren t able to see the slides now, we will be\nposting them up, excuse me Anil have you already posted those? Ok, so Anil with\npost them momentarily. So, hopefully you can get them, and they ll be on the\nwebsite at www.illumos.org. Just looking at that font on the slide, and realize\nthe  I  really doesn t stand out vary differently from the  L.  I apologize for\nthat, it s I-L-L. And our topic is  Hope and Light Springs Anew. \n\nSo, the name... well first off I hope everyone understands that this\npresentation is targeted towards the OpenSolaris audience so I didn t really go\ninto a lot of background there. It will become clear as we go on. If you are\nhere asking about Windows or something else you re probably in the wrong\nconference call.\n\n[Slide 2, 2:19]\n\nSo what s in a name? First  Illum  from Latin for  Light  and  OS  for Operating System.  However even though I printed it out this way on the slide,\nnow we ve been spelling it all one word with any unusual spellings, so\nI-L-L-U-M-O-S, with only the  I  capitalized.\n\n[Slide 3, 2:41]\n\nSo, actually what is this project about? Well the first thing is that the\nproject is designed here to solve a key problem, and that is that not all of\nOpenSolaris is really open source. And there s a lot of other potential\nconcerns in the community, but this one is really kind of a core one, and from\nsolving this, I think a lot of other issues can be solved. So the critical\ncomponents of OpenSolaris. Well, first off I guess I should say that most of\nthe important parts of OpenSolaris are, for booting at least and for building a\nfoundation block for the OS/Net consolidation, out of that consolidation it s\nnearly completely open source, except for a few pieces. One of the most\nstriking pieces is this part called  libc-i18n,  which is a component you need\nto build a working C library. It s a substantial percentage of libc is tied up\nin that libc-i18n, in some cases because it s i18n code, in other cases because\nof dependencies and well dependencies is probably the best way to put it.\n\nThe NFS lock manager, of course, there s the crypto framework, a number of\nreally important drivers. mpt I listed here is a pretty famous one its for a\npretty popular series of HBAs from LSI. But there s a lot of other drivers that\nare closed source, and in fact even some key platform code, although that s for\nthe most port an issue for the SPARC port. Most of the critical platform code\nfor x86 is open, in fact I can t think of anything critical that s closed.\nThis list is by no means exhaustive, but it s a good start.\n\nSo the problem with the fact that not all of this source is open is that it\nreally does present some big challenges to anyone downstream or who depends on\nOS/Net or consequently OpenSolaris and of course this involves Nexenta,\nBelinux, Schillix these are all derivative distributions from the original\nsource from Oracle. And this problem is not new to the industry; some years ago\nApple had done the community a great favor by opening a bunch of their code in\nthe form of Darwin. However I think you can Google around for MacOS X and\nDarwin and see the end result of that. And that is, the end result, I think,\nthat we would all like to avoid.\n\n[Slide 4, 5:32]\n\nSo there s a lot of good stuff, with all the other issues going on with the\ncommunity that s built up around the code. First off there s technology in\nthe code, zfs, dtrace, crossbow, zones, I think everyone who s familiar with\nOpensolaris will recognize this stuff, and if you don t, Google will readily\nfill you in with lots and lots of detail on all of these technologies, and this\nis just a brief list of some of the big names. There s a lot of others beyond\nthis. And of course the community behind these technologies is made up of a\nnumber of just incredible engineers, I ve been fortunate to work with some of\nthe brightest people on the planet, I believe, on Solaris and SunOS code. And\nwe are also backed by an outstanding set of enthusiasts, and our eco-system\nreally is quite vibrant, particularly in light of some of the other challenges\nit continues to be so vibrant. This I think says a lot. And of course the other\nthing is that it s not all closed. In fact, the vast majority of the code is\nindeed open. So the problem of, the problem faced to resolve this is actually\nquite tractable.\n\n[Slide 5, 7:06]\n\nTechnology issues, there it goes, alright. I apologise. OK. So around this\neffort. I talked a little about the issue of the code. To elaborate a little\nbit further, what we ve done is taken OS/Net, this consolidation which really\nmakes up the kernel and a bunch of critical system utilities and made a child\nof it, and this is really a source code management type term but what it means\nis that it has an ancestry relationship with the upstream which in this case is\nthe code from Oracle, and we track the upstream very closely, and we also have\nthe goal of being 100% compatible with the code from Oracle. I say ABI\ncompatible, what that means is that the idea is that you can take an\napplication that is compiled and runs well on Solaris, and the same exact\napplication compiles and runs on Illumos, so that is an important point.\n\nWe also, the idea is no closed code. There s a fully open libc, I would want to\nhave a fully open kernel, and fully open drivers. As you ll see we are not all\nthe way there yet but we made really good progress, and continue to work on\nthis. The other idea is that this project then becomes a repository where we\ncan take changes from contributors that for a variety of reasons might be\nunacceptable to Oracle, and I can detail all those later, maybe in Q   A or\nmaybe separately. There s a lot of potential possibilities here, and as long as\nwe don t really break the idea of ABI compatibility with Solaris and we don t\ndiverge needlessly from the upstream ON consolidation, there s a lot of room\nfor innovation.\n\n[Slide 6, 9:19]\n\nSo the focus of Illumos is really ON right now, OS/Net, that s that core\nconsolidation that I talked about. But one of the ideas is that this also can\nthen ultimately build a community that can act as an umbrella for these other\nprojects, and other pieces, that become interesting, once you solve this\ncritical problem of that core foundation. X11, which is basically the graphical\nwindowing system. The desktop components. The C runtime. Some of the\ndistributions. And there is potentially a lot of ways which people can\ninnovate, and contribute. Which unfortunately, in the current community is\nquite difficult to do. We hope that we can become a lot more of a facilitator\nin that kind of development and collaboration.\n\n[Slide 7, 10:16]\n\nSo, around this, we hope to build a community. And, I think we actually have\nreally started one pretty strongly, from the people who have already either\nagreed to participate or are participating. And this community stands\nindependently from the OpenSolaris community. What that means is that we own\nour own identity, and we can t be shut down, and we re not slaves to any\ncorporate master. And even though Nexenta is a major sponsor, and I m very\ngrateful that Nexenta is. They re my employer, and they are funding my time on\nthis. But the identity and the project, is owned by the community. And that\nmeans we re governed and run by the community. On that topic, I have a few\nbullet points there about our resources being distributed, the fact that we re\ngoing to basically run this as a Meritocracy, with a light hand on governance,\nwhich is one of the areas we think we can improve upon from the previous\nattempts.\n\n[Slide 8, 11:28]\n\nSo there s a large number of people. I started the project, so I guess I m the\ndefactor  leader . But you know, there s actually quite a - it was a dozen when\nI wrote this, it s probably grown since then. This project started out with\njust a few developers, that I wanted have real focus on just getting the code\ndone. Without engaging in a lot of conversation. Even with that small, focused\ngroup, it s already still growing. And now, today, as of right this minute, we\nhope to engage a much much broader audience. A we hope to invite, all of you -\nactually we do invite all of you. So come join us. In this presentation you ll\nsee there s a website you can join, there s mailing lists you can join. A\nnumber of the community leaders, a lot of whom you will be familiar with, if\nyou re already a part of this group. In fact, hang on just a minute. Some of\nthem are on this call. And actually we have a couple who have agreed to speak.\nI d like to tie in one. Anil s checking on it for me. Just a minute.\n\n[12:48]\n\nSimon, we re going to go ahead and un-mute your mic. Are you available to talk?\nOk, great. So Simon Phipps is one of the - he didn t start out as an existing\ncore member. But he s agreed to help us out, and as you ll see later, he s\nagreed to take a role in this, and I m hoping that Simon has some good things\nto say.\n\n* Simon Phipps, SP * Hi Garrett.\n\n* GDA * Simon Phipps, maybe not the best introduction.\n\n* SP * I m very pleased that you re doing this, Garrett. You know I ve seen a\nproject like this before, when we started OpenJDK there was some concern, that\nSun wasn t going to get around to opening all of the Java code, so some\ncommunity members got together and formed a project called  IcedTea , which was\ndownstream of OpenJDK, but to which people could innovate and could fix the\nnon-free parts of OpenJDK. It was the existence of that project, that made\nOpenJDK a fully free project, and led to it having the existence beyond the\nsponsorship that Sun put into it. I m looking at Illumos at the moment, and I\nthink it s exactly the right step to take. It s good that it s downstream of\nOracle. If they choose to use it, it could do a great deal of good to their\nSolaris products. If they choose not to use it, then it s a great place for the\ncommunity to assemble, and give a future to Solaris.\n\n* GDA * Ok. Great. And thanks for your support. That was Simon Phipps. Simon\ncurrently sits on the board for the Open Source Initiative. I think that s\ncorrect, is that correct, Simon?\n\n* SP * That s correct. I m on the board of directors of OSI, the Open Source\nInitiative. At the moment, while we still have one, I m a member of the\nOpenSolaris Governing Board, as well.\n\n* GDA * Ok. And he also writes for Computer World UK. I m sure you can find his\nblog pretty easily. Thank you very much Simon. Let s go ahead and move along.\nOne of the points that s on there, before I switch to the next slide, is that I\nbelieve that we actually do already have critical mass to drive this project\nforward. That s one of the real challenges for a project like this. The\ncodebase, when you look at the size of OS/Net, is quite enormous, but the\nnumber of people, and people who are actual do-ers rather than talk-ers, who\nare involved and interested and engaged, already, is - I m actually astounded,\nand thrilled to have such a - frankly an illustrious group of contributors\ninvolved. I have great hope. Moving forward.\n\n[Slide 9, 15:50]\n\nWe have quite a few community partners. Of course, Nexenta is one of these, and\nthere s a number of these names that you will recognise, if you re familiar\nwith the OpenSolaris community. Google is great at filling each one of these\nout. I m not going to present all of them to you. But I m really pleased that a\nformer colleague of mine at Oracle, is with us, and he has taken a position as\nVice President of Engineering at Joyent. Hopefully he s on the line. His name\nis Brian Cantrill. He s one of the co-creators of DTrace as I understand it.\nCan we un-mute his mic? We re having some technical issues here, hopefully\nwe ll get Brian in, in a few minutes. In the meantime, I m going to go ahead\nand move on.\n\n[Slide 10, 16:52]\n\nThe 800 pound gorilla. This is the question that is probably on a lot of\npeople s minds. The 800 pound gorilla being that company that bought former\nowner of the Intellectual Property behind most of OpenSolaris, Oracle. The\ninteractions here, it s really important that we understand what these\ninteractions are, and what they re intended to be. The first of these is that\nIllumos is not a competitor to Solaris. Neither to OpenSolaris. In fact, I have\npersonally invited Oracle to participate as a peer, although they don t get to\nown it, we would love to have their participation. To the extent that they are\nallowed to, per whatever arrangements they have with Oracle, welcome the\nindividual employees of Oracle, to participate here as well. We d love to have\na collaborative and cooperative relationship with Oracle. Just as with any of\nour other corporate partners. From that slide I just had, you can see a few.\nThat slide, by the way, is by no means complete. I hope that it will not be the\nend statement, either. But we re not going to depend on them. I m being told\nnow that Brian is available, so I m going to go ahead and switch back to Brian.\n\n[18:12]\n\n* Bryan Cantrill, BC * Hey Garrett. This is terrific news. A great development\nfor the OpenSolaris community. Looking back, historically, I think we at Sun (I\nshould say  they  now I guess) - I think that Sun understood the importance of\nthe right to fork the operating system, but I think we ve underestimated the\nimportance of the power to fork the operating system. As you know, as we all\nknow, we never quite made it to 100% of the source. And what that, effectively,\nforbid - not explicitly, I mean we didn t do it by design - but because there\nwere these encumbrances that didn t allow us to open source elements of the\noperating system, it effectively did not allow for a fork. A fork is a really\nimportant check against an open source project. A fork is what allows people to\ninnovate. A fork is what allows people to not get hung up on governance models.\nIt allows them to express their independence from a project. Whilst people had\nthe right, strictly speaking, they didn t have the power, because it was not\nall open source. Today is a really critical development. It is giving all of\nus, in the community, the power to fork the system. Not that we want to\nactually exercise that power in a way that is divisive, but we need to be able\nto exercise that power in a way that is innovative. I think that is going to\nallow many of us - now speaking as Joyent - many of us in the community who\ndepend on the innovations in this system for the value that we bring to our\ncustomers, it is going to allow all of us to begin to differentiate ourselves\nin the marketplace, it s going to allow all of us to be able to really innovate\nto the operating system, and allows us all to collaborate. I think that,\nspeaking for Joyent, we have modifications to the system that we have not been\nable to integrate for a variety of reasons. We believe with Illumos - with the\nIllumos project - that we will be able to begin to integrate some of these\nmodifications. Many of them, of course, are small - bugfixes and so on. But\nthings that for a variety of reasons couldn t be taken further upstream. I,\npersonally, and we, Joyent, are thrilled. This is a tremendous, tremendous\ndevelopment. Garrett, you and your team, are to be commended for some very\ndifficult technical work. To be clear, we are not completely out of the woods\nyet. We boot. That s good. But we got work ahead of us. Collectively. As a\ncommunity. To get to a vibrant base, that will allow for innovation. I m much\nmore confident now, than I have been at any time in the last five years, that\nwe re going to get there as a community. So, very exciting development, and I\nthink you see the number of people that are on Freenode. A lot of folks are\ninterested in this. I think for us as a community it s a real reboot. We owe\nour debt of gratitude to Garrett and the Illumos project.\n\n[21:44]\n\n* GDA * Thank you very much, Brian. I m very, very pleased that you and the\nrest of the crew at Joyent are going to be able to join us, and collaborate to\nexpand upon the great work that is already part of SunOS base. With that, I m\ngoing to go ahead and switch back, because I want to keep moving ahead. On this\none slide, the 800 pound gorilla. So I think that this idea that Brian really\nhit on, is that we have the power to fork. We are not a fork, but what we do is\nwe represent the ability of the community to do that. That s key.\n\n[Slide 11, 22:30]\n\nIn fact, here s my top slide on that. What if the tap is turned off? What if,\nthe upstream, ceases to be cooperative, or just goes away. For a lot of\nreasons, I don t think that s going to happen. Even if the community around\nthat code-base were to be abandoned, or shut down - or even change it s\ncharacter in a way that it might be hard to recognise it, the code-base, I\nexpect personally, for that to remain available. That code that is already\navailable, and for it to continue to be updated, on some level of frequency.\nBut in the event, that it were to go away, we believe that with the developers\nwe have, and especially, the growing ecosystem that already just on day one\nhere, seems to be exploding. I think we have critical mass to continue to\nsustain it. As I said, I m thrilled that Joyent, and there is a bunch of other\npeople, are a part of that. Of course, if this happens, then we - by definition\n- become a fork. We are not a fork today, because of the way we track OS/Net.\nIn my mind, in a classical sense, a fork starts from the starting point, and\nmoves away, and becomes something else. So we re more like a project that -\nwe re going to continue to try to work closely with Oracle. As I think that\nBrian talked about, really the idea is that Illumos is the insurance that the\nentire community needs, against this sort of scenario of what happens if the\ntap is turned off.\n\n[Slide 12, 24:14]\n\nWhat are some of the major goals of this project. I think we ve already talked\nabout some of these. We want to be a self-hosting SunOS derivative. We re not\nquite there yet, but we re getting there. We ve made good strides. Fully open\nsource, of course. That s kind of, I think, a key thing. I already touched on\nthe 100% ABI compatibility with Solaris. So, for those who are listening in,\nand aren t familiar with the acronym ABI, that s Application Binary\nInterface, and really what it means, is that your existing applications work\nwithout being recompiled. This next, fourth bullet point, I haven t touched on\nit today, and it s really key. Probably it deserves a little bit of discussion.\nThat is, that we want the things that we put into Illumos to be usable by\nOracle. To be able to be taken back into the upstream code from Oracle. This is\npart of the - we re not a fork today. Working and collaborate in a\ncollaborative relationship with Oracle. So there s a bunch of other\nconsequences that fall out of this. But the key thing is that the code that\nintegrates into Illumos really should be - it should be reasonable for somebody\nto integrate that back into the Oracle code base. If whatever political or\nbusiness goals, that were preventing that, were removed. Of course, we don t\nwant to have any corporate dependencies on the Illumos project. I think I ve\nalready talked about this. This last bullet point, the basis for other\ndistributions. For people not familiar with the way OpenSolaris distributions\nare built today, there is typically this bottom piece, called ON. And there is\na bunch of other pieces, that are put together, and then these are all\nconstructed together, to create a full operating system. And there s a number\nof distributions besides the one that Oracle creates, called OpenSolaris.\nThere s Schillix, there s Belenix, and of course, my favourite, Nexenta. This\nis just a few of them. There s quite a few others. MilaX, EON, and we haven t\ntalked to all of the people producing these distributions, but at least the\nones that we have talked to are already engaged in looking at Illumos as their\nfuture base line. So they re participating. I m going to make a brief note\nhere, there is another individual who is a part of the Illumos developer\ncommunity, who s also working on a completely open, community driven, version\nof the distribution, formerly known as Indiana. I m not going to say anything\nmore about that, because that would be stealing his thunder. Hopefully, you ll\nhear more from him in the coming days or weeks.\n\n[Slide 13, 27:10]\n\nA little bit here about how the project is organised. Basically, we re going to\nhave two groups, one group is this notion of administrative council, that\nbasically handles non-technical matters. So resource management. We do have\nservers, we have mailing lists. There is probably matters of evangelism and\nmarketing and all these others things that happen. We wanted to seperate the\ntechnical from the non-technical. So the people focused on the code, and\ngetting things done, didn t have to be bothered by the day-to-day running of\nthe details. Likewise, the people running the day-to-day details don t have to\nbe all-star developers. Initially, I m the chairman. It s a benevolent\ndictatorship until we come up with some other form of rule that works. The idea\nis to make this as much as possible, reasonable consensus driven, although\nthere will be a smaller group, that actually runs the administrative council. I\nhave already appointed a few members, that may change. Hopefully they will\nselect some additional members, to fill out their own ranks. The idea is a\nmeritocracy, the people who are actually helping to do things, rather than just\npeople who want to stand up and claim credit.\n\n[Slide 14, 28:35]\n\nThe other half of this is the developer council. I had a little tie-in from a\njoke here. A community member actually, had a nice tagline here, his name is\nMatthew, you ll see him on IRC as lewellyn. His line was  if you have a\npolarising issue, the first thing you have to work out if it s AC or DC .\nThanks to lewellyn for that little tid-bit. It s, again a benevolent\ndictatorship, and I m going to take the role as tech lead on the project. I ll\nprobably keep that lead, longer than I will the leadership in the other side,\nbecause I really do view myself as a technical individual. Again, the initial\nmembers will be appointed. The idea is that this really made up of the\ndevelopers who have the ability and - not just the ability - but the right to\ncommit, and a consensus driven meritocracy. My hope is that as tech lead, I\nhelp define direction, but I only get involved in arbitration if no other\nalternative, solution can be arrived at via consensus.\n\n[29:55]\n\nI m seeing something on my UI here that says that we may be having network\ntrouble. Can somebody indicate on the IRC channel, am I coming across clearly?\nOk. Anil s giving the thumbs up. So I m going to keep going. Maybe it s not too\nbad.\n\n[Slide 15, 30:10]\n\nRules for integration. This is getting down to the nuts and bolts of how we\nexpect to operate. As I think I already mentioned, again ON here is OS/Net.\nThat s that consolidation from the upstream. We have the same kind of\nguidelines. You still gotta pass your cstyle, lint, you know, test your code,\nhave it reviewed, so forth. We do have some license restrictions, and really\nthese have a lot to do with this goal of making it easy for Oracle to take our\ncode and re-integrate it back into the upstream.", 
            "title": "Transcript"
        }, 
        {
            "location": "/about/announcement/#credits", 
            "text": "Brian Bienvenu (taemun)  A. Hettinger (oninoshiko)", 
            "title": "Credits"
        }, 
        {
            "location": "/user-guide/", 
            "text": "Getting Started\n\n\nIntroduction\n\n\nAs illumos is the core of an operating system -- but not a distribution itself,\nthe easiest way to get started with illumos is to \ndownload a\ndistro\n and start playing.\n\n\nBooks\n\n\nThere are a number of \nbooks\n relating to illumos\ntechnologies available.\n\n\nIf your goal is to work on illumos itself, the \nDeveloper's\nGuide\n or \nbuilding\nillumos\n are good places to get started.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/user-guide/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/user-guide/#introduction", 
            "text": "As illumos is the core of an operating system -- but not a distribution itself,\nthe easiest way to get started with illumos is to  download a\ndistro  and start playing.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/#books", 
            "text": "There are a number of  books  relating to illumos\ntechnologies available.  If your goal is to work on illumos itself, the  Developer's\nGuide  or  building\nillumos  are good places to get started.", 
            "title": "Books"
        }, 
        {
            "location": "/user-guide/bugs/", 
            "text": "Bug Trackers\n\n\n\n\n\n\n\n\nProject\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nillumos-gate\n\n\nCore. Kernel, userland, drivers, etc.\n\n\n\n\n\n\nOpenIndiana\n\n\nDistribution-specific\n\n\n\n\n\n\nSmartOS\n\n\nDistribution-specific\n\n\n\n\n\n\nJoyent pkgsrc\n\n\nCross-platform packages\n\n\n\n\n\n\n\n\nHow to report problems\n\n\nBefore creating new issues in the bug tracker, please do a search to determine\nif the problem is known or resolved.\n\n\nPlease see the \ndebugging\n section for help with troubleshooting problems.\n\n\nYou can \nreport a new\nissue\n using our\nissue tracker.\n\n\nA good issue report includes:\n\n\n\n\nSteps for reproducing the problem, in as much detail as possible.\n\n\nInformation about your system software and hardware.\n\n\nFor crashes, the contents of the crash information file from the above section.\n\n\n\n\nPlease paste any error messages, or the output of ::msgbuf from mdb directly in the bug description.\n\n\nExamples of bug fixing\n\n\nRyan Zezeski\n goes through fixing a bug in ZFS in this \"illumos Day\" talk.\n(\nvideo\n, \nslides\n)", 
            "title": "Bug Reporting"
        }, 
        {
            "location": "/user-guide/bugs/#bug-trackers", 
            "text": "Project  Description      illumos-gate  Core. Kernel, userland, drivers, etc.    OpenIndiana  Distribution-specific    SmartOS  Distribution-specific    Joyent pkgsrc  Cross-platform packages", 
            "title": "Bug Trackers"
        }, 
        {
            "location": "/user-guide/bugs/#how-to-report-problems", 
            "text": "Before creating new issues in the bug tracker, please do a search to determine\nif the problem is known or resolved.  Please see the  debugging  section for help with troubleshooting problems.  You can  report a new\nissue  using our\nissue tracker.  A good issue report includes:   Steps for reproducing the problem, in as much detail as possible.  Information about your system software and hardware.  For crashes, the contents of the crash information file from the above section.   Please paste any error messages, or the output of ::msgbuf from mdb directly in the bug description.", 
            "title": "How to report problems"
        }, 
        {
            "location": "/user-guide/bugs/#examples-of-bug-fixing", 
            "text": "Ryan Zezeski  goes through fixing a bug in ZFS in this \"illumos Day\" talk.\n( video ,  slides )", 
            "title": "Examples of bug fixing"
        }, 
        {
            "location": "/user-guide/manual/", 
            "text": "Manual pages\n\n\nYou can browse (and link to) the illumos manual pages\n\nonline\n.\n\n\nHistory\n\n\nThe manual pages integrated into illumos-gate are taken from the last source\ndrop provided by Sun at \nhttp://dlc.sun.com/osol/man/downloads\n. These are\noutdated in several respects.\n\n\n\n\nThey are missing descriptions of new features\n\n\nThey may still describe some old features\n\n\nThey have no updates for changes made by us (obviously)\n\n\n\n\nBugs can be filed under the \n'manpages' category of the illumos-gate\nproject\n\nto rectify any omissions.\n\n\nWhile the OpenSolaris build 134 manual pages claim to be under the CDDL in both\npackage license and headers, and newer pages may well claim to be under the\nCDDL in their header comment, we have elected to treat them as tainted and work\nfrom the last explicit source drop. Please do not source text from any\nOpenSolaris page delivered to the system just because it superficially contains\na CDDL header. It is much, much better to be certain.\n\n\nIf you update software in a way that must be reflected in the manual, please\nalso update the manual in the same changeset.", 
            "title": "Manuals"
        }, 
        {
            "location": "/user-guide/manual/#manual-pages", 
            "text": "You can browse (and link to) the illumos manual pages online .", 
            "title": "Manual pages"
        }, 
        {
            "location": "/user-guide/manual/#history", 
            "text": "The manual pages integrated into illumos-gate are taken from the last source\ndrop provided by Sun at  http://dlc.sun.com/osol/man/downloads . These are\noutdated in several respects.   They are missing descriptions of new features  They may still describe some old features  They have no updates for changes made by us (obviously)   Bugs can be filed under the  'manpages' category of the illumos-gate\nproject \nto rectify any omissions.  While the OpenSolaris build 134 manual pages claim to be under the CDDL in both\npackage license and headers, and newer pages may well claim to be under the\nCDDL in their header comment, we have elected to treat them as tainted and work\nfrom the last explicit source drop. Please do not source text from any\nOpenSolaris page delivered to the system just because it superficially contains\na CDDL header. It is much, much better to be certain.  If you update software in a way that must be reflected in the manual, please\nalso update the manual in the same changeset.", 
            "title": "History"
        }, 
        {
            "location": "/user-guide/debug/", 
            "text": "Requires Review\n\n\nThis page contains incomplete content and needs to be reviewed.\n\n\n\n\nDebugging\n\n\nillumos contains a number of facilities for debugging misbehaving systems.\nThese include larger, more complicated frameworks like DTrace and mdb to\nsmaller, more easily digestable tools like truss.\n\n\nBroken builds\n\n\nBroken systems\n\n\nBroken applications", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/debug/#debugging", 
            "text": "illumos contains a number of facilities for debugging misbehaving systems.\nThese include larger, more complicated frameworks like DTrace and mdb to\nsmaller, more easily digestable tools like truss.", 
            "title": "Debugging"
        }, 
        {
            "location": "/user-guide/debug/#broken-builds", 
            "text": "", 
            "title": "Broken builds"
        }, 
        {
            "location": "/user-guide/debug/#broken-systems", 
            "text": "", 
            "title": "Broken systems"
        }, 
        {
            "location": "/user-guide/debug/#broken-applications", 
            "text": "", 
            "title": "Broken applications"
        }, 
        {
            "location": "/user-guide/debug-systems/", 
            "text": "Requires Review\n\n\nThis page contains incomplete content and needs to be reviewed.\n\n\n\n\nDebugging broken systems\n\n\nThis page is intended to help users of operating systems derived from the\nillumos gate to bring problems to the attention of the illumos gate developers.\n\n\n\n\nAll commands in this guide is presumed to be run as a non-privileged\nuser. pfexec will be prepended to commands which need additional privileges. On\nsome systems, the sudo command is used for this purpose.\n\n\n\n\nHelp! My System Crashed or Locked Up!\n\n\nYou might be reading this because your system suddenly printed a panic message\non the console, saved a crash dump, and then rebooted (or the popular\nalternative: suddenly locked up, showed some disk activity, and then rebooted).\nOr perhaps your system stopped responding and never recovered. Calm down. We\nwant to know about this problem.\n\n\nWhen illumos crashes (kernel panics), a crash dump is automatically saved\ncontaining information from kernel memory. This can be copied to a file. A\ndeveloper can use use the crash dump to inspect the state of the system at the\ntime of the crash. You can also generate a crash dump manually to debug a hang.\n\n\nIf you are on a live session where no storage is available, you may have to\nmanually copy down crash or hang information. A serial console is preferred for\nthis.\n\n\nGathering Information from a Crash Dump\n\n\nIf you are on an installed system and a crash occurs, a crash dump will\nnormally be saved. If you are on a live system, skip to the next section.\nAssuming the crash does not recur immediately after the reboot, you can\nretrieve information from the crash dump by following these instructions.\n\n\nLog in as a user with access to pfexec or sudo (typically the user you created\nat install)\n\n\nCheck your crash dump configuration:\n\npfexec dumpadm\n\n\n\nThis should print something like:\n\n\n      Dump content: kernel pages\n       Dump device: /dev/zvol/dsk/rpool/dump (dedicated)\nSavecore directory: /var/crash/kirin\n  Savecore enabled: no\n   Save compressed: on\n\n\n\n\nTo extract the crash dump from the dump volume:\n\n\npfexec mkdir -p /var/crash/`hostname`\npfexec savecore\ncd /var/crash/`hostname`\npfexec savecore -vf vmdump.0\n\n\n\n\nWith the crash dump extracted, you can now copy the kernel messages and stack\ninformation from the crash to a file:\n\n\necho \n::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks\n | mdb 0 \n ~/crash.0\n\n\n\n\nSave the crash.0 file in your home directory for reporting the crash. If\npossible, keep the crash dump files on hand for future examination. If you have\navailable bandwidth and disk space, making this full crash dump accessible to\ndevelopers is invaluable. Note that due to the nature of the dump, it may\ncontain information you consider confidential. Use your judgement when making\nit generally available.\n\n\nNotes\n\n\nConfiguring your crash dump.  The commands \"dumpadm\" and \"coreadm\" and be used\nto list and alter the location and/or the actual contents of the resulting\ncrash dump.\n\n\nEnsuring a successful crash dump\n\n\nIf you do not see a line like \"100% done   .... dump succeeded\" on the console\n(if you have a console) or when you later try to analyze your crash dump via\n\"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number\n0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable\nmulti-threaded dump). In this case in order to successfully force a crash dump\n(if you do not see \"dump succeeded\")  you should modify your system to perform\na non-threaded crash dump by adding the following line to your /etc/system file\n\"set dump_plat_mincpu=0\" and then performing a rconfiguration reboot.\n\n\nForcing a crash dump.\n\n\nIn order to force a crash dump form a working system that still has interactive capabilities you can do one of the following:\n\n\n\n\nas below \"Gathering Information from a Running System\".\n\n\nas below \"Gathering Information from a Running System, using only NMI (x86)\".\n\n\nissue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue.\n\n\nissue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue.\n\n\n\n\nGathering Information from a Running System\n\n\nIf you can reproduce the hang or crash, enabling the kernel debugger beforehand\nis a way to get valuable information about it. The best option, if problem\noccurs after the system has access to storage, is to use the debugger to save a\ncrash dump. Otherwise, you should record as much diagnostic information as\npossible from the debugger.. A serial console or some form of lights-out\nmanagement (LOM) functionality is preferred for interacting with the debugger.\n\n\nTo use a serial console, you need an onboard or USB serial port, a null modem\ncable, and another computer with a serial port, and to boot with the\nappropriate -B console=ttya or similar option.\n\n\nFor a local console, you need a monitor and keyboard. On x86, this must be a\nPS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode.\n\n\nEnabling verbose boot messages and the kernel debugger (kmdb) on x86\n\n\n\n\nAt the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands.\n\n\nHighlight the splashimage line, if it exists, and press 'd' to delete.\n\n\nHighlight the kernel line and press 'e' to edit.\n\n\nAppend -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B)\n\n\nPress 'Enter' when finished, and then press 'b' to boot.\n\n\n\n\nEnabling verbose boot messages and the kernel debugger (kmdb) on SPARC:\n\n\n\n\nPress 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary.\n\n\nAt the ok prompt, type boot -kvd -m verbose and press 'Enter'.\n\n\n\n\nOn both platforms\n\n\n\n\nWait for the kmdb\n prompt to appear, then type moddebug/W 80000000 and press 'Enter'.\n\n\nType snooping/W 1 and press 'Enter'.\n\n\nType :c and press 'Enter'.\n\n\n\n\nIf the system panics, copy down \n::msgbuf\n, \n::status\n and \n::stack\n.\n\n\nIf the system hangs, copy down the last few lines regarding modules on screen,\nand do one of:\n\n\n\n\nOn a serial console, send a BREAK on the serial line using your serial communications program.\n\n\nOn a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'.\n\n\nOn a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.\n\n\nGenerate an NMI if your system provides this capability (hardware button, service processor command).\n\n\n\n\nWhen you are successful the system should drop you into a kmdb prompt.\n\n\n\n\nUse \n$\nsystemdump\n to save a crash dump. The system should automatically reboot when finished.\n\n\nFollow \"Gathering Information About A Crash\", above.\n\n\nIf you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console)..\n\n\n\n\nMore resources:\n\n\n\n\nhttp://blogs.sun.com/dmick/entry/diagnosing_kernel_hangs_panics_with\n\n\nhttp://wikis.sun.com/display/WDD/Enable+the+Deadman+Feature+to+Avoid+a+Hard+Hang\n\n\n\n\nGathering Information from a Running System, Using only NMI (x86)\n\n\nIn order to force a crash dump form a system that seems hung or frozen e.g. no\nlonger has has interactive capabilities if your system supports NMI (hardware\nbutton, service processor command) it might be a good practice to permanently\nconfigure the following:\n\n\n\n\nAdding the line (as user root) \nset pcplusmp:apic_panic_on_nmi = 1\n to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot.\n\n\nNote, If you also have the line \nset pcplusmp:apic_kmdb_on_nmi=1\n in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the \npcplusmp:apic_panic_on_nmi\n setting.\n\n\n\n\nThe above might be a a very good practice as it simplifies forcing a \"crash\ndump\" (avoids the x86 requirement of  keyboard input e.g. press 'Shift-Pause';\nor 'Esc-B'; or 'F1', then 'A'.).  However this simplification will a) not work\non all platforms and b) might even cause issues on a few system types and c)\nworks if your system loads/uses the pcplusmp module (not the apix module).\nBecause of these requirements despite the fact that many admins use this as a\ndefault setting it is not the default configuration for fresh installs of the\nOS.\n\n\nMore resources:\n\n\nhttp://blogs.sun.com/dmick/entry/diagnosing_kernel_hangs_panics_with\n\n\nhttp://wikis.sun.com/display/WDD/Enable+the+Deadman+Feature+to+Avoid+a+Hard+Hang\n\n\nhttp://www.cuddletech.com/blog/pivot/entry.php?id=1044\n\n\nhttp://kristof.willen.be/node/1100\n\n\nhttp://docs.oracle.com/cd/E19963-01/html/817-2543/casestudy-13.html\n\n\nhttp://shanit.blogspot.com/2009/03/solaris-10-crashdumps.html", 
            "title": "Systems"
        }, 
        {
            "location": "/user-guide/debug-systems/#debugging-broken-systems", 
            "text": "This page is intended to help users of operating systems derived from the\nillumos gate to bring problems to the attention of the illumos gate developers.   All commands in this guide is presumed to be run as a non-privileged\nuser. pfexec will be prepended to commands which need additional privileges. On\nsome systems, the sudo command is used for this purpose.", 
            "title": "Debugging broken systems"
        }, 
        {
            "location": "/user-guide/debug-systems/#help-my-system-crashed-or-locked-up", 
            "text": "You might be reading this because your system suddenly printed a panic message\non the console, saved a crash dump, and then rebooted (or the popular\nalternative: suddenly locked up, showed some disk activity, and then rebooted).\nOr perhaps your system stopped responding and never recovered. Calm down. We\nwant to know about this problem.  When illumos crashes (kernel panics), a crash dump is automatically saved\ncontaining information from kernel memory. This can be copied to a file. A\ndeveloper can use use the crash dump to inspect the state of the system at the\ntime of the crash. You can also generate a crash dump manually to debug a hang.  If you are on a live session where no storage is available, you may have to\nmanually copy down crash or hang information. A serial console is preferred for\nthis.", 
            "title": "Help! My System Crashed or Locked Up!"
        }, 
        {
            "location": "/user-guide/debug-systems/#gathering-information-from-a-crash-dump", 
            "text": "If you are on an installed system and a crash occurs, a crash dump will\nnormally be saved. If you are on a live system, skip to the next section.\nAssuming the crash does not recur immediately after the reboot, you can\nretrieve information from the crash dump by following these instructions.  Log in as a user with access to pfexec or sudo (typically the user you created\nat install)  Check your crash dump configuration: pfexec dumpadm  This should print something like:        Dump content: kernel pages\n       Dump device: /dev/zvol/dsk/rpool/dump (dedicated)\nSavecore directory: /var/crash/kirin\n  Savecore enabled: no\n   Save compressed: on  To extract the crash dump from the dump volume:  pfexec mkdir -p /var/crash/`hostname`\npfexec savecore\ncd /var/crash/`hostname`\npfexec savecore -vf vmdump.0  With the crash dump extracted, you can now copy the kernel messages and stack\ninformation from the crash to a file:  echo  ::panicinfo\\n::cpuinfo -v\\n::threadlist -v 10\\n::msgbuf\\n*panic_thread::findstack -v\\n::stacks  | mdb 0   ~/crash.0  Save the crash.0 file in your home directory for reporting the crash. If\npossible, keep the crash dump files on hand for future examination. If you have\navailable bandwidth and disk space, making this full crash dump accessible to\ndevelopers is invaluable. Note that due to the nature of the dump, it may\ncontain information you consider confidential. Use your judgement when making\nit generally available.", 
            "title": "Gathering Information from a Crash Dump"
        }, 
        {
            "location": "/user-guide/debug-systems/#notes", 
            "text": "Configuring your crash dump.  The commands \"dumpadm\" and \"coreadm\" and be used\nto list and alter the location and/or the actual contents of the resulting\ncrash dump.", 
            "title": "Notes"
        }, 
        {
            "location": "/user-guide/debug-systems/#ensuring-a-successful-crash-dump", 
            "text": "If you do not see a line like \"100% done   .... dump succeeded\" on the console\n(if you have a console) or when you later try to analyze your crash dump via\n\"savecore -vd\" or \"savecore\" you see a message like \"savecore: bad magic number\n0\". You are probably are hitting illumos Bug #1110 and Bug #1369 (disable\nmulti-threaded dump). In this case in order to successfully force a crash dump\n(if you do not see \"dump succeeded\")  you should modify your system to perform\na non-threaded crash dump by adding the following line to your /etc/system file\n\"set dump_plat_mincpu=0\" and then performing a rconfiguration reboot.", 
            "title": "Ensuring a successful crash dump"
        }, 
        {
            "location": "/user-guide/debug-systems/#forcing-a-crash-dump", 
            "text": "In order to force a crash dump form a working system that still has interactive capabilities you can do one of the following:   as below \"Gathering Information from a Running System\".  as below \"Gathering Information from a Running System, using only NMI (x86)\".  issue the command \"savecore -L\" from the command line, this is not be the \"best\" method for debugging an issue.  issue the command \"reboot -d\", this is not be the \"best\" method for debugging an issue.", 
            "title": "Forcing a crash dump."
        }, 
        {
            "location": "/user-guide/debug-systems/#gathering-information-from-a-running-system", 
            "text": "If you can reproduce the hang or crash, enabling the kernel debugger beforehand\nis a way to get valuable information about it. The best option, if problem\noccurs after the system has access to storage, is to use the debugger to save a\ncrash dump. Otherwise, you should record as much diagnostic information as\npossible from the debugger.. A serial console or some form of lights-out\nmanagement (LOM) functionality is preferred for interacting with the debugger.  To use a serial console, you need an onboard or USB serial port, a null modem\ncable, and another computer with a serial port, and to boot with the\nappropriate -B console=ttya or similar option.  For a local console, you need a monitor and keyboard. On x86, this must be a\nPS/2 keyboard or a USB keyboard operating in USB legacy (PS/2 emulation) mode.", 
            "title": "Gathering Information from a Running System"
        }, 
        {
            "location": "/user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-x86", 
            "text": "At the GRUB prompt, highlight the boot environment with the arrow keys and press 'e' to edit the commands.  Highlight the splashimage line, if it exists, and press 'd' to delete.  Highlight the kernel line and press 'e' to edit.  Append -kvd -m verbose to the end of the line (and remove console=graphics if it appears after -B)  Press 'Enter' when finished, and then press 'b' to boot.", 
            "title": "Enabling verbose boot messages and the kernel debugger (kmdb) on x86"
        }, 
        {
            "location": "/user-guide/debug-systems/#enabling-verbose-boot-messages-and-the-kernel-debugger-kmdb-on-sparc", 
            "text": "Press 'Stop' ('L1'), then 'A' or send a BREAK on the serial line to interrupt the boot process, if necessary.  At the ok prompt, type boot -kvd -m verbose and press 'Enter'.", 
            "title": "Enabling verbose boot messages and the kernel debugger (kmdb) on SPARC:"
        }, 
        {
            "location": "/user-guide/debug-systems/#on-both-platforms", 
            "text": "Wait for the kmdb  prompt to appear, then type moddebug/W 80000000 and press 'Enter'.  Type snooping/W 1 and press 'Enter'.  Type :c and press 'Enter'.   If the system panics, copy down  ::msgbuf ,  ::status  and  ::stack .  If the system hangs, copy down the last few lines regarding modules on screen,\nand do one of:   On a serial console, send a BREAK on the serial line using your serial communications program.  On a local keyboard on SPARC, press 'Stop' ('L1'), then 'A'.  On a local keyboard on x86, press 'Shift-Pause'; or 'Esc-B'; or 'F1', then 'A'.  Generate an NMI if your system provides this capability (hardware button, service processor command).   When you are successful the system should drop you into a kmdb prompt.   Use  $ systemdump  to save a crash dump. The system should automatically reboot when finished.  Follow \"Gathering Information About A Crash\", above.  If you cannot save a crash dump, and are on a serial console, enter ::msgbuf, ::panicinfo, ::cpuinfo -v and::threadlist -v 10 and record the output. (Or take photos if you're unlucky enough to be at a VGA console)..   More resources:   http://blogs.sun.com/dmick/entry/diagnosing_kernel_hangs_panics_with  http://wikis.sun.com/display/WDD/Enable+the+Deadman+Feature+to+Avoid+a+Hard+Hang", 
            "title": "On both platforms"
        }, 
        {
            "location": "/user-guide/debug-systems/#gathering-information-from-a-running-system-using-only-nmi-x86", 
            "text": "In order to force a crash dump form a system that seems hung or frozen e.g. no\nlonger has has interactive capabilities if your system supports NMI (hardware\nbutton, service processor command) it might be a good practice to permanently\nconfigure the following:   Adding the line (as user root)  set pcplusmp:apic_panic_on_nmi = 1  to your /etc/system file allows a crash dump to be generated on the receipt by your system of an NMI (non-maskable interrupt). Once this line is added you will have to do a reconfiguration reboot.  Note, If you also have the line  set pcplusmp:apic_kmdb_on_nmi=1  in your /etc/system file you will not generate a crash dump, but rather go into the kernel debugger as this later directive takes priority over the  pcplusmp:apic_panic_on_nmi  setting.   The above might be a a very good practice as it simplifies forcing a \"crash\ndump\" (avoids the x86 requirement of  keyboard input e.g. press 'Shift-Pause';\nor 'Esc-B'; or 'F1', then 'A'.).  However this simplification will a) not work\non all platforms and b) might even cause issues on a few system types and c)\nworks if your system loads/uses the pcplusmp module (not the apix module).\nBecause of these requirements despite the fact that many admins use this as a\ndefault setting it is not the default configuration for fresh installs of the\nOS.  More resources:  http://blogs.sun.com/dmick/entry/diagnosing_kernel_hangs_panics_with  http://wikis.sun.com/display/WDD/Enable+the+Deadman+Feature+to+Avoid+a+Hard+Hang  http://www.cuddletech.com/blog/pivot/entry.php?id=1044  http://kristof.willen.be/node/1100  http://docs.oracle.com/cd/E19963-01/html/817-2543/casestudy-13.html  http://shanit.blogspot.com/2009/03/solaris-10-crashdumps.html", 
            "title": "Gathering Information from a Running System, Using only NMI (x86)"
        }, 
        {
            "location": "/user-guide/debug-apps/", 
            "text": "Inspecting An Application Crash\n\n\nCheck your core file configuration:\n\n\n# coreadm\n\n\n\n\nThis should print something like:\n\n\n     global core file pattern: \n     global core file content: default\n       init core file pattern: core\n       init core file content: default\n            global core dumps: disabled\n       per-process core dumps: enabled\n      global setid core dumps: disabled\n per-process setid core dumps: disabled\n     global core dump logging: disabled\n\n\n\n\nIf the global core file pattern is empty and per-process core dumps are\nenabled, an application crash will save a core file named core in the working\ndirectory.  To print the stack information from the crash:\n\n\npstack core", 
            "title": "Applications"
        }, 
        {
            "location": "/user-guide/debug-apps/#inspecting-an-application-crash", 
            "text": "Check your core file configuration:  # coreadm  This should print something like:       global core file pattern: \n     global core file content: default\n       init core file pattern: core\n       init core file content: default\n            global core dumps: disabled\n       per-process core dumps: enabled\n      global setid core dumps: disabled\n per-process setid core dumps: disabled\n     global core dump logging: disabled  If the global core file pattern is empty and per-process core dumps are\nenabled, an application crash will save a core file named core in the working\ndirectory.  To print the stack information from the crash:  pstack core", 
            "title": "Inspecting An Application Crash"
        }, 
        {
            "location": "/developers/", 
            "text": "How to build illumos\n\n\n\n\nPlease also refer to the \nillumos Developer's Guide\n.\n\n\n\n\n\n\nRequires Review\n\n\nThis page references some old practices and needs to be reviewed.\n\n\n\n\nIntroduction\n\n\nThis document will help prepare you to build the source code for illumos. It\nassumes some familiarity with development on Unix-like systems.\n\n\n\n\nMy First illumos Build\n\n\nIf you are just dipping your toes into illumos, you should consider reading\n\nRyan Zezeski's post on his own first\nbuild\n!\n\n\n\n\nYou need an illumos-based operating system to build illumos. Cross-compilation\nis not supported.\n\n\nIf you don't have one installed, the quickest way to get started is to download\nand install either \nOpenIndiana\n or\n\nOmniOS\n and install them in a VM or on metal.\n\n\n\n\nAll commands in this guide assume you run them as an unprivileged user.\nsudo will be prepended to commands which need additional privileges; on some\nsystems pfexec can be used instead, if your user has the correct RBAC profiles.\nThe generic commands below use a $USER variable to define the current\n(unprivileged) user account's name which will ultimately be used to compile the\nproject. If you are not using a stock shell or have manipulated the $USER\nvariable in your environment at a site, system, or user level, you are\nresponsible for diagnosing and addressing any consequences.\n\n\n\n\nHardware Support\n\n\nYou'll generally have good luck with common x86 components, but it's always a\ngood idea to refer to the \nHardware Combatibility\nList\n or Joyent's \nManufactory\ndatabase\n.\n\n\nInstalling required packages\n\n\nYou will need to install the basic development environment to build illumos.\n\n\nOpenIndiana\n\n\nsudo pkg install build-essential\n\n\n\n\nOmniOS\n\n\nsudo pkg install pkg:/developer/illumos-tools\n\n\n\n\nCompilers\n\n\nThe source code was traditionally built using Sun's closed-source compiler\nsuite, which was named Sun Studio at the time of the illumos fork.  We now\nbuild illumos with GCC, but you will still need some tools from Sun Studio and\nthose are available as packages in the legacy OpenSolaris repository.\n\n\nGCC\n\n\nThe primary version of GCC necessary for development and integration 4.4.4\n(4.4.4-il-4) should have been installed on your system when you installed the\nprerequisites above.\n\n\n\n\nOpenIndiana Hipster 20161030\n\n\nOpenIndiana Hipster 20161030 ships with gcc-4.4.4-il-3, so make sure to update that package to -il-4 before building.\nBuilding with 4.4.4-il-3 leads to build failures with warnings as below in the mail_msg and nightly.log:\n\n../../i86pc/os/trap.c:2188: error: unknown conversion type character \n-\n in format [-Wformat]\n../../i86pc/os/trap.c:2188: error: too many arguments for format [-Wformat-extra-args]\n\n\n\n\n\nNote that the compiler for building \nillumos-gate\n installs into\n\n/opt/gcc/4.4.4\n on OpenIndiana, and \n/opt/gcc-4.4.4\n on OmniOS and is not\navailable in the default PATH for building application programs.\n\n\nYou can add (OI example) \nPATH=\n/opt/gcc/4.4.4/bin:$PATH\n; export PATH\n to your\nprofile to reference this compiler, or install one of the other GCC builds,\ndestined as the current default compiler for application programs (versions\nranging from 3.4.3 to 4.6.x, see \npkg info -r '*gcc*'\n for details du-jour).\n\n\nUnfortunately, Sun Studio \nlint\n is currently required even for GCC-only builds.\nWe currently deliver Lint libraries built using the closed Sun Studio version\nof lint. OmniOS includes this in its \nsunstudio12.1\n package.  On OpenIndiana\nit's delivered as part of \ndeveloper/sunstudio12u1/cc\n, which you shouldn't\ninstall explicitly if you've already installed \nbuild-essential\n.\n\n\nSun Studio\n\n\nBuilding with Sun Studio is generally unsupported. If you have need of it,\nplease refer to \nBuilding With Sun Studio\n.\n\n\nNext Steps\n\n\nOnce you've got the prerequisites installed, you're ready to start \nbuilding\nillumos\n.", 
            "title": "Overview"
        }, 
        {
            "location": "/developers/#how-to-build-illumos", 
            "text": "Please also refer to the  illumos Developer's Guide .    Requires Review  This page references some old practices and needs to be reviewed.", 
            "title": "How to build illumos"
        }, 
        {
            "location": "/developers/#introduction", 
            "text": "This document will help prepare you to build the source code for illumos. It\nassumes some familiarity with development on Unix-like systems.   My First illumos Build  If you are just dipping your toes into illumos, you should consider reading Ryan Zezeski's post on his own first\nbuild !   You need an illumos-based operating system to build illumos. Cross-compilation\nis not supported.  If you don't have one installed, the quickest way to get started is to download\nand install either  OpenIndiana  or OmniOS  and install them in a VM or on metal.   All commands in this guide assume you run them as an unprivileged user.\nsudo will be prepended to commands which need additional privileges; on some\nsystems pfexec can be used instead, if your user has the correct RBAC profiles.\nThe generic commands below use a $USER variable to define the current\n(unprivileged) user account's name which will ultimately be used to compile the\nproject. If you are not using a stock shell or have manipulated the $USER\nvariable in your environment at a site, system, or user level, you are\nresponsible for diagnosing and addressing any consequences.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/#hardware-support", 
            "text": "You'll generally have good luck with common x86 components, but it's always a\ngood idea to refer to the  Hardware Combatibility\nList  or Joyent's  Manufactory\ndatabase .", 
            "title": "Hardware Support"
        }, 
        {
            "location": "/developers/#installing-required-packages", 
            "text": "You will need to install the basic development environment to build illumos.", 
            "title": "Installing required packages"
        }, 
        {
            "location": "/developers/#openindiana", 
            "text": "sudo pkg install build-essential", 
            "title": "OpenIndiana"
        }, 
        {
            "location": "/developers/#omnios", 
            "text": "sudo pkg install pkg:/developer/illumos-tools", 
            "title": "OmniOS"
        }, 
        {
            "location": "/developers/#compilers", 
            "text": "The source code was traditionally built using Sun's closed-source compiler\nsuite, which was named Sun Studio at the time of the illumos fork.  We now\nbuild illumos with GCC, but you will still need some tools from Sun Studio and\nthose are available as packages in the legacy OpenSolaris repository.", 
            "title": "Compilers"
        }, 
        {
            "location": "/developers/#gcc", 
            "text": "The primary version of GCC necessary for development and integration 4.4.4\n(4.4.4-il-4) should have been installed on your system when you installed the\nprerequisites above.   OpenIndiana Hipster 20161030  OpenIndiana Hipster 20161030 ships with gcc-4.4.4-il-3, so make sure to update that package to -il-4 before building.\nBuilding with 4.4.4-il-3 leads to build failures with warnings as below in the mail_msg and nightly.log: ../../i86pc/os/trap.c:2188: error: unknown conversion type character  -  in format [-Wformat]\n../../i86pc/os/trap.c:2188: error: too many arguments for format [-Wformat-extra-args]   Note that the compiler for building  illumos-gate  installs into /opt/gcc/4.4.4  on OpenIndiana, and  /opt/gcc-4.4.4  on OmniOS and is not\navailable in the default PATH for building application programs.  You can add (OI example)  PATH= /opt/gcc/4.4.4/bin:$PATH ; export PATH  to your\nprofile to reference this compiler, or install one of the other GCC builds,\ndestined as the current default compiler for application programs (versions\nranging from 3.4.3 to 4.6.x, see  pkg info -r '*gcc*'  for details du-jour).  Unfortunately, Sun Studio  lint  is currently required even for GCC-only builds.\nWe currently deliver Lint libraries built using the closed Sun Studio version\nof lint. OmniOS includes this in its  sunstudio12.1  package.  On OpenIndiana\nit's delivered as part of  developer/sunstudio12u1/cc , which you shouldn't\ninstall explicitly if you've already installed  build-essential .", 
            "title": "GCC"
        }, 
        {
            "location": "/developers/#sun-studio", 
            "text": "Building with Sun Studio is generally unsupported. If you have need of it,\nplease refer to  Building With Sun Studio .", 
            "title": "Sun Studio"
        }, 
        {
            "location": "/developers/#next-steps", 
            "text": "Once you've got the prerequisites installed, you're ready to start  building\nillumos .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/developers/build-illumos/", 
            "text": "Building illumos\n\n\nPreparing the source-code directory\n\n\nYou can use any location, but for the purposes of this guide, we will assume\nthat you have a directory \n/code\n owned by your user ID, which you are using to\nobtain source and build.\n\n\nFor a less naive example, see the \nBuild datasets\n page and\nsome more industrious details on \nManaging multiple\nworkspaces\n and \nWorking on several bugs\n at once.\n\n\nGetting the source\n\n\nYou may use the Git source code management system to retrieve the illumos\nsource code. Make sure you have about 6 gigabytes of free space for the source\nand binaries combined.\n\n\nThe repository is available from GitHub using the Git source code control\nsystem.\n\n\nThe Git repository URI is: \ngit://github.com/illumos/illumos-gate.git\n\n\nOr, if the Git protocol is firewalled at your site: \nhttps://github.com/illumos/illumos-gate.git\n\n\nThe illumos-gate source can then be cloned using:\n\n\ncd /code\ngit clone git://github.com/illumos/illumos-gate.git\n\n\n\n\nGetting closed binaries\n\n\nThere are still closed components in illumos that have not yet been replaced.\nYou must get the latest closed binaries from Sun/Oracle, since illumos\ncurrently needs those in order to build:\n\n\ncd /code/illumos-gate\nwget -c \\\n  https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\\n  https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2\ntar xjvpf on-closed-bins.i386.tar.bz2\ntar xjvpf on-closed-bins-nd.i386.tar.bz2\n\n\n\n\n\n\nOmniOS r151016 or later and OpenIndiana users have these tarballs installed in /opt/onbld/closed, and ON_CLOSED_BINS can be set to point to this directory directly.\n\n\n\n\n\n\nIf you had a crypto tarball from an earlier build, do not use it here, as it is no longer required to build illumos. You should remove it from your tree if already present.\n\n\n\n\nAccording to the gcc-4.4.4-il heads-up note, the kernel modules among the\nclosed binaries might need some fixup for proper compilation. According to\nseveral developers, however, they've never needed to do this in practice. Just\nin case you are trying to build some older branch of illumos which might\nrequire this modification and inexplicably breaks without it, the steps are\noutlined below in the troubleshooting section.\n\n\nPreparing the build environment\n\n\nGeneral build configuration\n\n\nThe build is configured using a shell script with environment variables, a template for this file is included:\n\n\ncp usr/src/tools/env/illumos.sh .\nvi illumos.sh       # or your favourite editor instead of @vi@\n\n\n\n\nThe settings we are going to focus on for now are the following:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNIGHTLY_OPTIONS\n\n\nYou may remove the \"l\" (lowercase L) option from the string, this will disable lint checking of the code to save some time during the build, but patches should be linted.\n\n\n\n\n\n\nCODEMGR_WS\n\n\nThis should be the root of the directory with the code. If you followed the previous example, it will be \n/code/illumos-gate\n.\n\n\n\n\n\n\nSTAFFER\n\n\nChange this to the name of the non-privileged user you use on the system\n\n\n\n\n\n\nVERSION\n\n\nSet this to illumos-gate or whatever version string you want for the build\n\n\n\n\n\n\n\n\n\n\nONNV_BUILDNUM\n specifies the build number which is used in packaging. If you intend to upgrade a system whose build number is greater than the one in illumos-gate (currently 148), such as OmniOS you need to specify this to allow upgrades until issue #1118 is addressed. Run:\n\npkg info osnet-incorporation | grep Branch:\n\n\nIf you see, for example, \"Branch: 0.151.1\", you must choose a number greater than the part after the leading \"0.\". For example, add\n\n\n\n\nexport ONNV_BUILDNUM=152\n\n\n\n\nto the \nillumos.sh\n script.\n\n\nOn OpenIndiana you'll likely see something like 'Branch: 2017.0.0.16790'. You\nhave to use PKGVERS_BRANCH to overwrite this value, you can't use ONNV_BUILDNUM\nfor this purpose. You should set PKGVERS_BRANCH in a form of YEAR.MAJOR.0.0 ,\nwhere YEAR is the current year and MAJOR is more that the one used by\nOpenIndiana. For example:  \n\n\nexport PKGVERS_BRANCH=2017.3.0.0\n\n\n\n\nBuilding with only GCC-4.4.4-il (i.e. without using Sun Studio at all)\n\n\n\n\nIf you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh:\n\n# The following are added to build without Sun Studio\nexport CW_NO_SHADOW=1\nexport ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\nexport __GNUC=\n\n#unset __SUNC\n\n\n\n\n\nThis should suffice for compilation of modern illumos-gate sources executed\non a modern distribution. Older branches (circa 2012) might need some more\nsetup which, along with explanation of the options, can be found below in the\ntroubleshooting section.\n\n\nWe understand that the required version of Sun Studio is no longer publicly\navailable and will accept contributions that were tested only with GCC.\n\n\nOmniOS Modifications\n\n\nOmniOS r151014 or later has sample build files in \n/opt/onbld/env/omnios-*\n for\nuse with illumos-gate or illumos-omnios.  If you roll your own env files, read\non.\n\n\nOmniOS requires that GCC-only be used.  OmniOS ALSO requires that a few other\nvariables are set:\n\n\nOmniOS mods\n\n\n# Help OmniOS find lint\nexport SPRO_ROOT=\n/opt\n\n\n# OmniOS places GCC 4.4.4 differently.\nexport GCC_ROOT=/opt/gcc-4.4.4/\n\n# These are required for building on OmniOS.\nexport PERL_VERSION=5.16.1\nexport PERL_PKGVERS=\nexport PERL_ARCH=i86pc-solaris-thread-multi-64int\n\n# Pre-r151022 (i.e. older) versions of OmniOS building -gate\n# need to set Python versions explicitly.\n# Utter \n/usr/bin/python --version\n to confirm.\nexport PYTHON_VERSION=\n2.6\n\nexport PYTHON_PKGVERS=\n-26\n\n\n# SET ONNV_BUILDNUM appropriately - to ONU r151014, set this to 151014.\nexport ONNV_BUILDNUM=151014\n\n\n\n\nYou must also make sure you disable IPP and SMB printing support on the default OmniOS installation by commenting out the following lines.\n\n\n# export ENABLE_IPP_PRINTING=\n# export ENABLE_SMB_PRINTING=\n\n\nIf you need to also compile IPP and SMB printing, you must provide the Apache, Apr/Apr-util for IPP or CUPS headers for SMB printing.\n\n\nOpenIndiana Modifications\n\n\nTo build illumos-gate on OpenIndiana , you'll have to customize illumos.sh in\nthe following way:\n\n\nOpenIndiana Hipster mods\n\n\n# Set version which is greater than current OpenIndiana Hipster build numbers, ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set:\nexport PKGVERS_BRANCH=2017.3.0.0\n\n# Set to current perl version\nexport PERL_VERSION=\n5.22\n\nexport PERL_PKGVERS=\n-522\n\n\n# If you are building on the latest OpenIndiana (2017-03-07 and later)\nexport BLD_JAVA_8=\n\n\n\n\nStarting the build\n\n\nYou are now ready to start the illumos build.\n\n\nSince this process may take up to several hours depending on your system\n(reference build times are in a chart below), it may be wise to start the build\njob in a VNC session, GNU Screen (screen), or tmux. The screen program can be\ninstalled with the \npkg:/terminal/screen\n package.\n\n\nRun the following command to start the full build:\n\n\ncd /code/illumos-gate\ncp usr/src/tools/scripts/nightly.sh .\nchmod +x nightly.sh\ntime ./nightly.sh illumos.sh\n\n\n\n\nNote that the command does not give any progress output. You can instead follow\nthe log file at \nlog/nightly.log\n, which is updated (slowly) during the build\nprocess. In another terminal, run:\n\n\ntail -f /code/illumos-gate/log/nightly.log\n\n\n\n\nTo only track the running build for warnings and errors you might instead run:\n\n\ntail -F /code/illumos-gate/log/nightly.log | gegrep -A5 -B5 \n(error|warning).*: \n\n\n\n\n\nAfter the build is complete, the nightly.log file and some other generated logs\nare moved into a uniquely named subdirectory \nlog/log.$TIMESTAMP/\n (i.e.\n\n/code/illumos-gate/log/log.2012-04-20.04\\:17/\n).\n\n\nA dry overview of the build progress (hopefully small \u2013 about 2KB in size \u2013\nwith no errors) is saved in \nlog/log.$TIMESTAMP/mail_msg\n file intended for\nmailing to the build administrator after the build completes (this automation\nis out of the scope of the nightly.sh script). If you do receive any errors in\nthe \nmail_msg\n report file, you can grep the error lines in the larger\n\nnightly.log\n file.\n\n\nPerforming an incremental build\n\n\nIf you've made changes after completing a nightly build, you can perform an incremental build without discarding the already built files.\n\n\ncd /code/illumos-gate\n./nightly.sh -i illumos.sh\n\n\n\n\nTo make this the default, edit \nillumos.sh\n and add the character \ni\n to \nNIGHTLY_OPTIONS\n.\n\n\n\n\nNote\n\n\nBefore submitting a patch, we request that you perform a full, non-incremental build including the lint stage.\n\n\n\n\nBuilding specific components\n\n\nHow To Build Components\n\n\nInstalling built software\n\n\nInstalling the nightly build on local machine with onu script\n\n\nThe build process will generate updated packages. Depending on the\nNIGHTLY_OPTIONS variable in illumos.sh script, the packages will be written\neither to $PWD/packages/i386/nightly (with debug, the typical default) or to\n$PWD/packages/i386/nightly-nd (without debug). Therefore there are two possible\ncommands to install the software you you just built. You need choose the proper\nonu command, typically the first one listed below.\n\n\nTypical install: you can install with onu for debug builds (the default, with\n'F' and 'D' characters in NIGHTLY_OPTIONS variable in illumos.sh):\n\n\n$ sudo ./usr/src/tools/scripts/onu \\\n    -t nightly-`date +%Y-%m-%d` -d $PWD/packages/i386/nightly\n\n\n\n\n\n\nNote\n\n\nFor OmniOS, it is critical that the ONNV_BUILDNUM in the nightly environment file be set to the OmniOS release you wish to ONU.  Otherwise, ONU will fail.\n\n\n\n\nThe non-typical installs are detailed in the following pages:\n\n\n\n\nAdvanced - non-debug install\n describes different onu options for the different set of built packages.\n\n\nRedistributing built packages\n and \nInstalling built illumos packages into BEs on a remote host and non-onu updates\n describe how to install illumos using the package depot server over the network, perhaps on a machine different from your build host. This recipe bypasses the onu script automation and manipulates your boot environments with beadm and pkg commands directly.\n\n\n\n\nPossible problems\n\n\nIn any case, if you have build errors or other \"inconsistencies\", it would be\nwise to revise the mail_msg logfile that can contain short error descriptions,\nand grep for those errors in the longer nightly.log file. If that doesn't help,\nyou should also recreate the build in a \"clean lab\" environment, which may be\nset up as a local zone according to the Building in zones instructions and rule\nout the local environment's influence (conflicting libraries and binaries,\nperhaps from your own earlier builds, come to mind first).\n\n\nLocalization bugs #167 and #168\n\n\nillumos has entirely different localization infrastructure from Solaris, so\nyour existing system locales will not work.\n\n\nThe English locales for illumos are in pkg:/locale/en (NOT\npkg:/system/locale/en), and if you wish to use them, you'll need to install\nthat package after you reboot. Likewise, other locales are in\npkg:/locale/\n where \n is a two letter ISO 639-1\ncode, except for zh_cn/zh_hk/zh_mo/zh_sg/zh_tw.\n\n\nIf your locale is not installed, it will cause problems with software which\nbehaves badly if setlocale() fails. This includes, at least, time-slider and\nsvcs(1M). The pkg(5) commands print a warning, but function normally.\n\n\nIf this is a problem, you can  \"export LANG=C LC_ALL=C\" as a workaround, and\nchange the LANG setting in/etc/default/init to 'C' (and reboot) to make the\nchange permanent.\n\n\nPackage repository (path /code/illumos-gate/packages/i386/nightly/repo.redist) is not created and onu script fails\n\n\nThis error has happened to me whenever I ran the default checkout and\nfull-build procedure outlined above (in VirtualBox VMs); I don't yet know why\n(possibly due to a wrong setup of my SunStudio compiler stack, as was later\ndiscovered).  However, rerunning with an incremental build has created the\npackage repository correctly (as well as full builds with proper SunStudio\nsetup):\n\n\n./nightly.sh -i illumos.sh\n\n\n\n\nEnsuring a build with only GCC-4.4.4-il for older branches of illumos\nCurrent illumos-gate (as of March 2014) should compile cleanly with GCC with the simplified instructions above. However, some earlier versions of the gate needed more configuration steps to compile properly, and the settings below shouldn't break anything for the newer source code as well (wink)\n\n\nIf you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh:\n\n\n# The following are added to build without Sun Studio\nexport CW_NO_SHADOW=1\nexport ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\n# The following select the proper version of GCC\n__GNUC=\n; __GNUC4=\n; export __GNUC __GNUC4\nGCC_ROOT=/opt/gcc/4.4.4; export GCC_ROOT\nCW_GCC_DIR=${GCC_ROOT}/bin; export CW_GCC_DIR\n\n\n\n\nExplanation of these settings:\n\n\nCW_NO_SHADOW - Set this to 1 to prevent the shadow compiler from running (for\ninstance, if you do not have Studio at all, in which case a regular build would\nfail due to \"cw: error: couldn't run /opt/SUNWspro/bin/cc (No such file or\ndirectory)\" and inability to run the shadow compilation and thus verify the\nfitness of code for both supported compilers).  ONLY_LINT_DEFS - This is needed\nso the lint is able to find the proper note.h include file.  If __GNUC is\ndefined, then a GCC would be the primary compiler. If __GNUC4 (or legacy\n__GNUC3) is defined, then the particular version of the compiler is used.\nRemember to unset __SUNC to properly use just one primary compiler (wink) and\nuse CW_NO_SHADOW=1 as described above to completely disable a secondary\n(shadow) compiler.  The last two lines make sure the patched version of\nGCC-4.4.4 is used (the default gcc version shipped with e.g. earlier\nOpenIndiana, gcc-3.4.3, is not suitable for building illumos), as described\nhere.\n\n\nIf you are trying to build with GCC 4.4.4 and your build fails because of some\ninvalid GCC warning options, try setting the variables GCC_ROOT and CW_GCC_DIR\nas shown above and described here.\n\n\n\n\nWhile recently rebuilding a historical 2012 version of illumos-gate with GCC-4.4.4-only setup per instructions above, I've still got Sun Studio errors in my mail_msg file like:\n\n\n\n\n cw: error: couldn\nt run /opt/SUNWspro/bin/CC (No such file or directory) \n\n cw: error: couldn\nt run /opt/SUNWspro/bin/cc (No such file or directory)\n\n\n\n\nor more frightening:\n\n\n ln: cannot access /code/illumos-gate/proto/root_i386/usr/lib/isaexec\n\n\n\n\nHowever, the files in proto/ and packages/ were created successfully. So... even error reports may need manual verification before panic and frantic fixes (wink)\n\n\nCommand failed for target `packages.i386/developer-dtrace.dep'\n\n\n4719 introduces a flag day for people who build illumos-gate. You will need a\nJava Developers Kit (JDK) 7 or later. OpenIndiana 151a9 does NOT have this by\ndefault.\n\n\nSymptoms: Users still on JDK6 will see build errors in the packaging portions\nlike such:\n\n\n==== package build errors (non-DEBUG) ====\n\ndmake: Warning: Command failed for target `packages.i386/developer-dtrace.dep\n\ndmake: Warning: Command failed for target `packages.i386/service-network-dns-mdns.dep\n\ndmake: Warning: Target `install\n not remade because of errors\nCause: These are due to javadoc changes between 6 and 7.  The dtrace and mdns packages generate javadoc, so their packaging manifests are updated to the 7 versions.\n\n\n\n\nCure: Builders must either set JAVA_ROOT to an installation location of JDK7,\nor must have /usr/java populated with JDK7 (or pointing to an installation\nlocation of JDK7). You can use whatever distribution of JDK7+ works for you\nbest (packages or tarballs, OpenJDK or Sun/Oracle JDK).\n\n\nIf you are on the latest OpenIndiana, you want to install runtime/java/openjdk8\nand developer/java/openjdk8 packages. Then in your env file, set:\n\n\nexport BLD_JAVA_8=", 
            "title": "Building illumos"
        }, 
        {
            "location": "/developers/build-illumos/#building-illumos", 
            "text": "", 
            "title": "Building illumos"
        }, 
        {
            "location": "/developers/build-illumos/#preparing-the-source-code-directory", 
            "text": "You can use any location, but for the purposes of this guide, we will assume\nthat you have a directory  /code  owned by your user ID, which you are using to\nobtain source and build.  For a less naive example, see the  Build datasets  page and\nsome more industrious details on  Managing multiple\nworkspaces  and  Working on several bugs  at once.", 
            "title": "Preparing the source-code directory"
        }, 
        {
            "location": "/developers/build-illumos/#getting-the-source", 
            "text": "You may use the Git source code management system to retrieve the illumos\nsource code. Make sure you have about 6 gigabytes of free space for the source\nand binaries combined.  The repository is available from GitHub using the Git source code control\nsystem.  The Git repository URI is:  git://github.com/illumos/illumos-gate.git  Or, if the Git protocol is firewalled at your site:  https://github.com/illumos/illumos-gate.git  The illumos-gate source can then be cloned using:  cd /code\ngit clone git://github.com/illumos/illumos-gate.git", 
            "title": "Getting the source"
        }, 
        {
            "location": "/developers/build-illumos/#getting-closed-binaries", 
            "text": "There are still closed components in illumos that have not yet been replaced.\nYou must get the latest closed binaries from Sun/Oracle, since illumos\ncurrently needs those in order to build:  cd /code/illumos-gate\nwget -c \\\n  https://download.joyent.com/pub/build/illumos/on-closed-bins.i386.tar.bz2 \\\n  https://download.joyent.com/pub/build/illumos/on-closed-bins-nd.i386.tar.bz2\ntar xjvpf on-closed-bins.i386.tar.bz2\ntar xjvpf on-closed-bins-nd.i386.tar.bz2   OmniOS r151016 or later and OpenIndiana users have these tarballs installed in /opt/onbld/closed, and ON_CLOSED_BINS can be set to point to this directory directly.    If you had a crypto tarball from an earlier build, do not use it here, as it is no longer required to build illumos. You should remove it from your tree if already present.   According to the gcc-4.4.4-il heads-up note, the kernel modules among the\nclosed binaries might need some fixup for proper compilation. According to\nseveral developers, however, they've never needed to do this in practice. Just\nin case you are trying to build some older branch of illumos which might\nrequire this modification and inexplicably breaks without it, the steps are\noutlined below in the troubleshooting section.", 
            "title": "Getting closed binaries"
        }, 
        {
            "location": "/developers/build-illumos/#preparing-the-build-environment", 
            "text": "", 
            "title": "Preparing the build environment"
        }, 
        {
            "location": "/developers/build-illumos/#general-build-configuration", 
            "text": "The build is configured using a shell script with environment variables, a template for this file is included:  cp usr/src/tools/env/illumos.sh .\nvi illumos.sh       # or your favourite editor instead of @vi@  The settings we are going to focus on for now are the following:           NIGHTLY_OPTIONS  You may remove the \"l\" (lowercase L) option from the string, this will disable lint checking of the code to save some time during the build, but patches should be linted.    CODEMGR_WS  This should be the root of the directory with the code. If you followed the previous example, it will be  /code/illumos-gate .    STAFFER  Change this to the name of the non-privileged user you use on the system    VERSION  Set this to illumos-gate or whatever version string you want for the build      ONNV_BUILDNUM  specifies the build number which is used in packaging. If you intend to upgrade a system whose build number is greater than the one in illumos-gate (currently 148), such as OmniOS you need to specify this to allow upgrades until issue #1118 is addressed. Run: pkg info osnet-incorporation | grep Branch: \nIf you see, for example, \"Branch: 0.151.1\", you must choose a number greater than the part after the leading \"0.\". For example, add   export ONNV_BUILDNUM=152  to the  illumos.sh  script.  On OpenIndiana you'll likely see something like 'Branch: 2017.0.0.16790'. You\nhave to use PKGVERS_BRANCH to overwrite this value, you can't use ONNV_BUILDNUM\nfor this purpose. You should set PKGVERS_BRANCH in a form of YEAR.MAJOR.0.0 ,\nwhere YEAR is the current year and MAJOR is more that the one used by\nOpenIndiana. For example:    export PKGVERS_BRANCH=2017.3.0.0", 
            "title": "General build configuration"
        }, 
        {
            "location": "/developers/build-illumos/#building-with-only-gcc-444-il-ie-without-using-sun-studio-at-all", 
            "text": "If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh: # The following are added to build without Sun Studio\nexport CW_NO_SHADOW=1\nexport ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\nexport __GNUC= \n#unset __SUNC   This should suffice for compilation of modern illumos-gate sources executed\non a modern distribution. Older branches (circa 2012) might need some more\nsetup which, along with explanation of the options, can be found below in the\ntroubleshooting section.  We understand that the required version of Sun Studio is no longer publicly\navailable and will accept contributions that were tested only with GCC.", 
            "title": "Building with only GCC-4.4.4-il (i.e. without using Sun Studio at all)"
        }, 
        {
            "location": "/developers/build-illumos/#omnios-modifications", 
            "text": "OmniOS r151014 or later has sample build files in  /opt/onbld/env/omnios-*  for\nuse with illumos-gate or illumos-omnios.  If you roll your own env files, read\non.  OmniOS requires that GCC-only be used.  OmniOS ALSO requires that a few other\nvariables are set:", 
            "title": "OmniOS Modifications"
        }, 
        {
            "location": "/developers/build-illumos/#omnios-mods", 
            "text": "# Help OmniOS find lint\nexport SPRO_ROOT= /opt \n\n# OmniOS places GCC 4.4.4 differently.\nexport GCC_ROOT=/opt/gcc-4.4.4/\n\n# These are required for building on OmniOS.\nexport PERL_VERSION=5.16.1\nexport PERL_PKGVERS=\nexport PERL_ARCH=i86pc-solaris-thread-multi-64int\n\n# Pre-r151022 (i.e. older) versions of OmniOS building -gate\n# need to set Python versions explicitly.\n# Utter  /usr/bin/python --version  to confirm.\nexport PYTHON_VERSION= 2.6 \nexport PYTHON_PKGVERS= -26 \n\n# SET ONNV_BUILDNUM appropriately - to ONU r151014, set this to 151014.\nexport ONNV_BUILDNUM=151014  You must also make sure you disable IPP and SMB printing support on the default OmniOS installation by commenting out the following lines.  # export ENABLE_IPP_PRINTING=\n# export ENABLE_SMB_PRINTING= \nIf you need to also compile IPP and SMB printing, you must provide the Apache, Apr/Apr-util for IPP or CUPS headers for SMB printing.", 
            "title": "OmniOS mods"
        }, 
        {
            "location": "/developers/build-illumos/#openindiana-modifications", 
            "text": "To build illumos-gate on OpenIndiana , you'll have to customize illumos.sh in\nthe following way:", 
            "title": "OpenIndiana Modifications"
        }, 
        {
            "location": "/developers/build-illumos/#openindiana-hipster-mods", 
            "text": "# Set version which is greater than current OpenIndiana Hipster build numbers, ONNV_BUILDNUM is ignored if PKGVERS_BRANCH is set:\nexport PKGVERS_BRANCH=2017.3.0.0\n\n# Set to current perl version\nexport PERL_VERSION= 5.22 \nexport PERL_PKGVERS= -522 \n\n# If you are building on the latest OpenIndiana (2017-03-07 and later)\nexport BLD_JAVA_8=", 
            "title": "OpenIndiana Hipster mods"
        }, 
        {
            "location": "/developers/build-illumos/#starting-the-build", 
            "text": "You are now ready to start the illumos build.  Since this process may take up to several hours depending on your system\n(reference build times are in a chart below), it may be wise to start the build\njob in a VNC session, GNU Screen (screen), or tmux. The screen program can be\ninstalled with the  pkg:/terminal/screen  package.  Run the following command to start the full build:  cd /code/illumos-gate\ncp usr/src/tools/scripts/nightly.sh .\nchmod +x nightly.sh\ntime ./nightly.sh illumos.sh  Note that the command does not give any progress output. You can instead follow\nthe log file at  log/nightly.log , which is updated (slowly) during the build\nprocess. In another terminal, run:  tail -f /code/illumos-gate/log/nightly.log  To only track the running build for warnings and errors you might instead run:  tail -F /code/illumos-gate/log/nightly.log | gegrep -A5 -B5  (error|warning).*:    After the build is complete, the nightly.log file and some other generated logs\nare moved into a uniquely named subdirectory  log/log.$TIMESTAMP/  (i.e. /code/illumos-gate/log/log.2012-04-20.04\\:17/ ).  A dry overview of the build progress (hopefully small \u2013 about 2KB in size \u2013\nwith no errors) is saved in  log/log.$TIMESTAMP/mail_msg  file intended for\nmailing to the build administrator after the build completes (this automation\nis out of the scope of the nightly.sh script). If you do receive any errors in\nthe  mail_msg  report file, you can grep the error lines in the larger nightly.log  file.", 
            "title": "Starting the build"
        }, 
        {
            "location": "/developers/build-illumos/#performing-an-incremental-build", 
            "text": "If you've made changes after completing a nightly build, you can perform an incremental build without discarding the already built files.  cd /code/illumos-gate\n./nightly.sh -i illumos.sh  To make this the default, edit  illumos.sh  and add the character  i  to  NIGHTLY_OPTIONS .   Note  Before submitting a patch, we request that you perform a full, non-incremental build including the lint stage.", 
            "title": "Performing an incremental build"
        }, 
        {
            "location": "/developers/build-illumos/#building-specific-components", 
            "text": "How To Build Components", 
            "title": "Building specific components"
        }, 
        {
            "location": "/developers/build-illumos/#installing-built-software", 
            "text": "", 
            "title": "Installing built software"
        }, 
        {
            "location": "/developers/build-illumos/#installing-the-nightly-build-on-local-machine-with-onu-script", 
            "text": "The build process will generate updated packages. Depending on the\nNIGHTLY_OPTIONS variable in illumos.sh script, the packages will be written\neither to $PWD/packages/i386/nightly (with debug, the typical default) or to\n$PWD/packages/i386/nightly-nd (without debug). Therefore there are two possible\ncommands to install the software you you just built. You need choose the proper\nonu command, typically the first one listed below.  Typical install: you can install with onu for debug builds (the default, with\n'F' and 'D' characters in NIGHTLY_OPTIONS variable in illumos.sh):  $ sudo ./usr/src/tools/scripts/onu \\\n    -t nightly-`date +%Y-%m-%d` -d $PWD/packages/i386/nightly   Note  For OmniOS, it is critical that the ONNV_BUILDNUM in the nightly environment file be set to the OmniOS release you wish to ONU.  Otherwise, ONU will fail.   The non-typical installs are detailed in the following pages:   Advanced - non-debug install  describes different onu options for the different set of built packages.  Redistributing built packages  and  Installing built illumos packages into BEs on a remote host and non-onu updates  describe how to install illumos using the package depot server over the network, perhaps on a machine different from your build host. This recipe bypasses the onu script automation and manipulates your boot environments with beadm and pkg commands directly.", 
            "title": "Installing the nightly build on local machine with onu script"
        }, 
        {
            "location": "/developers/build-illumos/#possible-problems", 
            "text": "In any case, if you have build errors or other \"inconsistencies\", it would be\nwise to revise the mail_msg logfile that can contain short error descriptions,\nand grep for those errors in the longer nightly.log file. If that doesn't help,\nyou should also recreate the build in a \"clean lab\" environment, which may be\nset up as a local zone according to the Building in zones instructions and rule\nout the local environment's influence (conflicting libraries and binaries,\nperhaps from your own earlier builds, come to mind first).", 
            "title": "Possible problems"
        }, 
        {
            "location": "/developers/build-illumos/#localization-bugs-167-and-168", 
            "text": "illumos has entirely different localization infrastructure from Solaris, so\nyour existing system locales will not work.  The English locales for illumos are in pkg:/locale/en (NOT\npkg:/system/locale/en), and if you wish to use them, you'll need to install\nthat package after you reboot. Likewise, other locales are in\npkg:/locale/  where   is a two letter ISO 639-1\ncode, except for zh_cn/zh_hk/zh_mo/zh_sg/zh_tw.  If your locale is not installed, it will cause problems with software which\nbehaves badly if setlocale() fails. This includes, at least, time-slider and\nsvcs(1M). The pkg(5) commands print a warning, but function normally.  If this is a problem, you can  \"export LANG=C LC_ALL=C\" as a workaround, and\nchange the LANG setting in/etc/default/init to 'C' (and reboot) to make the\nchange permanent.", 
            "title": "Localization bugs #167 and #168"
        }, 
        {
            "location": "/developers/build-illumos/#package-repository-path-codeillumos-gatepackagesi386nightlyreporedist-is-not-created-and-onu-script-fails", 
            "text": "This error has happened to me whenever I ran the default checkout and\nfull-build procedure outlined above (in VirtualBox VMs); I don't yet know why\n(possibly due to a wrong setup of my SunStudio compiler stack, as was later\ndiscovered).  However, rerunning with an incremental build has created the\npackage repository correctly (as well as full builds with proper SunStudio\nsetup):  ./nightly.sh -i illumos.sh  Ensuring a build with only GCC-4.4.4-il for older branches of illumos\nCurrent illumos-gate (as of March 2014) should compile cleanly with GCC with the simplified instructions above. However, some earlier versions of the gate needed more configuration steps to compile properly, and the settings below shouldn't break anything for the newer source code as well (wink)  If you are building with solely GCC 4.4.4 (i.e. you do NOT wish to use Sun Studio at all), you must append these lines to the end of illumos.sh:  # The following are added to build without Sun Studio\nexport CW_NO_SHADOW=1\nexport ONLY_LINT_DEFS=-I${SPRO_ROOT}/sunstudio12.1/prod/include/lint\n# The following select the proper version of GCC\n__GNUC= ; __GNUC4= ; export __GNUC __GNUC4\nGCC_ROOT=/opt/gcc/4.4.4; export GCC_ROOT\nCW_GCC_DIR=${GCC_ROOT}/bin; export CW_GCC_DIR  Explanation of these settings:  CW_NO_SHADOW - Set this to 1 to prevent the shadow compiler from running (for\ninstance, if you do not have Studio at all, in which case a regular build would\nfail due to \"cw: error: couldn't run /opt/SUNWspro/bin/cc (No such file or\ndirectory)\" and inability to run the shadow compilation and thus verify the\nfitness of code for both supported compilers).  ONLY_LINT_DEFS - This is needed\nso the lint is able to find the proper note.h include file.  If __GNUC is\ndefined, then a GCC would be the primary compiler. If __GNUC4 (or legacy\n__GNUC3) is defined, then the particular version of the compiler is used.\nRemember to unset __SUNC to properly use just one primary compiler (wink) and\nuse CW_NO_SHADOW=1 as described above to completely disable a secondary\n(shadow) compiler.  The last two lines make sure the patched version of\nGCC-4.4.4 is used (the default gcc version shipped with e.g. earlier\nOpenIndiana, gcc-3.4.3, is not suitable for building illumos), as described\nhere.  If you are trying to build with GCC 4.4.4 and your build fails because of some\ninvalid GCC warning options, try setting the variables GCC_ROOT and CW_GCC_DIR\nas shown above and described here.   While recently rebuilding a historical 2012 version of illumos-gate with GCC-4.4.4-only setup per instructions above, I've still got Sun Studio errors in my mail_msg file like:    cw: error: couldn t run /opt/SUNWspro/bin/CC (No such file or directory)   cw: error: couldn t run /opt/SUNWspro/bin/cc (No such file or directory)  or more frightening:   ln: cannot access /code/illumos-gate/proto/root_i386/usr/lib/isaexec  However, the files in proto/ and packages/ were created successfully. So... even error reports may need manual verification before panic and frantic fixes (wink)", 
            "title": "Package repository (path /code/illumos-gate/packages/i386/nightly/repo.redist) is not created and onu script fails"
        }, 
        {
            "location": "/developers/build-illumos/#command-failed-for-target-packagesi386developer-dtracedep", 
            "text": "4719 introduces a flag day for people who build illumos-gate. You will need a\nJava Developers Kit (JDK) 7 or later. OpenIndiana 151a9 does NOT have this by\ndefault.  Symptoms: Users still on JDK6 will see build errors in the packaging portions\nlike such:  ==== package build errors (non-DEBUG) ====\n\ndmake: Warning: Command failed for target `packages.i386/developer-dtrace.dep \ndmake: Warning: Command failed for target `packages.i386/service-network-dns-mdns.dep \ndmake: Warning: Target `install  not remade because of errors\nCause: These are due to javadoc changes between 6 and 7.  The dtrace and mdns packages generate javadoc, so their packaging manifests are updated to the 7 versions.  Cure: Builders must either set JAVA_ROOT to an installation location of JDK7,\nor must have /usr/java populated with JDK7 (or pointing to an installation\nlocation of JDK7). You can use whatever distribution of JDK7+ works for you\nbest (packages or tarballs, OpenJDK or Sun/Oracle JDK).  If you are on the latest OpenIndiana, you want to install runtime/java/openjdk8\nand developer/java/openjdk8 packages. Then in your env file, set:  export BLD_JAVA_8=", 
            "title": "Command failed for target `packages.i386/developer-dtrace.dep'"
        }, 
        {
            "location": "/developers/build-times/", 
            "text": "Build times\n\n\nAs a convenience, we will try to assemble some build times for various hardware\nconfigurations here, so you can get an idea in advance of how long it will\ntake:\n\n\n\n\n\n\n\n\nProcessor(s)\n\n\nNo. of cores\n\n\nMemory\n\n\nTime (HH:MM)\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\n2 x Xeon X5570 2.93GHz\n\n\n2 x 4\n\n\n36 GB\n\n\n00:19\n\n\nNIGHTLY_OPTIONS='-FnCDmprt'\n\n\n\n\n\n\n4 x Opteron 6172 2.1 GHz\n\n\n4 x 12\n\n\n128 GB\n\n\n00:21\n\n\nNIGHTLY_OPTIONS='-FnCDmprt'\n\n\n\n\n\n\nXeon E3-1270 3.4 GHz\n\n\n4\n\n\n16 GB\n\n\n00:23\n\n\nNIGHTLY_OPTIONS='-FnCDmprt'\n\n\n\n\n\n\nCore i7-3770 3.4GHz\n\n\n4\n\n\n8 GB\n\n\n00:28\n\n\nNIGHTLY_OPTIONS='-nCprt' (with SSD, the production build for Tribblix)\n\n\n\n\n\n\nXeon E3-1245V2 3.4 GHz\n\n\n4\n\n\n16 GB\n\n\n00:31\n\n\nNIGHTLY_OPTIONS='-FnCDmprt'\n\n\n\n\n\n\nCore i7-2600K 3.4 GHz\n\n\n4\n\n\n8 GB\n\n\n00:35\n\n\nNIGHTLY_OPTIONS='-nClmprt'\n\n\n\n\n\n\n2 x Xeon E5620 2.4 GHz\n\n\n2 x 4\n\n\n48 GB\n\n\n00:38\n\n\nNone\n\n\n\n\n\n\n1 x Xeon E5607 2.27GHz\n\n\n1 x 4\n\n\n12 GB\n\n\n00:46\n\n\nNIGHTLY_OPTIONS='-FnCDmprt'\n\n\n\n\n\n\nXeon E3-1245V2 3.4 GHz\n\n\n4\n\n\n16 GB\n\n\n00:47\n\n\nNIGHTLY_OPTIONS='-FnCDlmprt' (with lint)\n\n\n\n\n\n\n2 x Xeon E5540 2.53 GHz\n\n\n2 x 4\n\n\n24 GB\n\n\n00:50\n\n\nWith lint\n\n\n\n\n\n\n2 x Xeon E5506 2.13 GHz\n\n\n2 x 4\n\n\n24 GB\n\n\n00:50\n\n\nNo dmake check\n\n\n\n\n\n\n1 x Xeon X5650 2.67 GHz\n\n\n1 x 6\n\n\n12 GB\n\n\n00:51\n\n\nWith lint, default NIGHTLY_OPTIONS\n\n\n\n\n\n\n2 x Xeon E5506 2.13 GHz\n\n\n2 x 4\n\n\n24 GB\n\n\n01:03\n\n\nNone\n\n\n\n\n\n\nCore i7-960 3.2 GHz\n\n\n4\n\n\n9 GB\n\n\n01:03\n\n\nWith lint\n\n\n\n\n\n\n2 x Xeon E5506 2.13 GHz\n\n\n2 x 4\n\n\n16 GB\n\n\n01:06\n\n\nVMware Workstation guest\n\n\n\n\n\n\nCore i7-930 2.8 GHz\n\n\n4\n\n\n8 GB\n\n\n01:07\n\n\nVMware ESXi guest\n\n\n\n\n\n\nXeon  E5-2676 v3 2.4GHz\n\n\n2\n\n\n16 GB\n\n\n01:13\n\n\nNIGHTLY_OPTIONS='-nCprt' (Tribblix) on an AWS m4.xlarge EC2 instance\n\n\n\n\n\n\nCore 2 Quad Q6600 2.4 GHz\n\n\n4\n\n\n2 GB\n\n\n01:16\n\n\nNone\n\n\n\n\n\n\n2 x Xeon E5310 1.6 GHz\n\n\n2 x 4\n\n\n32 GB\n\n\n01:24\n\n\nNone\n\n\n\n\n\n\n1 x Athlon II X2 240 2.8 GHz\n\n\n2\n\n\n2 GB\n\n\n01:27\n\n\nNIGHTLY_OPTIONS='-FnCDmprt', on a low end SSD\n\n\n\n\n\n\nCore 2 Quad Q9300 2.5 GHz\n\n\n4\n\n\n7 GB\n\n\n01:32\n\n\nNone\n\n\n\n\n\n\n2 x Xeon E5420 @ 2.50GHz\n\n\n2 x 4\n\n\n4 GB\n\n\n01:33\n\n\nDefault NIGHTLY_OPTIONS; an incremental rebuild takes 13 min to walk all Makefiles\n\n\n\n\n\n\n2 x Opteron 2218HE 2.6 GHz\n\n\n2 x 2\n\n\n16 GB\n\n\n01:42\n\n\nNone\n\n\n\n\n\n\nCore i5-540M 2.53 GHz\n\n\n2\n\n\n4 GB\n\n\n01:54\n\n\nNone\n\n\n\n\n\n\n2 x UltraSPARC-T2+ 1165 MHz\n\n\n128 threads\n\n\n32 GB\n\n\n02:18\n\n\nNIGHTLY_OPTIONS='-nCprt' (the Tribblix SPARC build)\n\n\n\n\n\n\nCore i3-370M 2.40 GHz\n\n\n2\n\n\n2 GB\n\n\n02:30\n\n\nNone\n\n\n\n\n\n\nCore 2 Quad Q8200 2.33 GHz\n\n\n4\n\n\n5 GB\n\n\n02:30\n\n\nDefault NIGHTLY_OPTIONS.\n\n\n\n\n\n\nCore 2 Duo T8300 2.3 GHz (T61)\n\n\n2\n\n\n2 GB\n\n\n02:58\n\n\nVMware Workstation 2 CPUs\n\n\n\n\n\n\nCore 2 Duo E6750 2.66 GHz\n\n\n2\n\n\n8 GB\n\n\n02:59\n\n\nSun Ultra 24 (with lint)\n\n\n\n\n\n\nCore 2 Duo Celeron E3200 3.2 GHz\n\n\n2\n\n\n4 GB\n\n\n03:28\n\n\n2.4 GHz CPU over clocked to 3.2. Everything running on a low end SSD. With lint.\n\n\n\n\n\n\nCore 2 Duo T5600 1.8 GHz\n\n\n2\n\n\n3.3 GB\n\n\n04:26\n\n\nNone\n\n\n\n\n\n\nOpteron 146 2 GHz\n\n\n1\n\n\n4 GB\n\n\n07:28\n\n\nNone\n\n\n\n\n\n\n4 x Dual-Core Opteron 8218 2.6 GHz\n\n\n(8-vCPU VM)\n\n\n16 GB (2GB VM)\n\n\n35:47 + 9:05\n\n\nVirtualBox 3.0.12 VM, with 8 vCPUs and 2GB vRAM; local vHDD; with lint and default NIGHTLY_OPTIONS='-FnCDlmprt' NOTE: Package repo did not get built at all with the first nightly run, only with the second, incremental nightly run (another 9 hours)\n\n\n\n\n\n\n\n\nNotes\n\n\n\n\n\"Bare Metal\" just slightly faster than VMware guest. On the other hand, VirtualBox painfully slow.\n\n\nMore cores faster but not linear increase.\n\n\nSSD use seems to provide nice speedup.\n\n\nAs expected, lint checking results in longer build times.", 
            "title": "Build times"
        }, 
        {
            "location": "/developers/build-times/#build-times", 
            "text": "As a convenience, we will try to assemble some build times for various hardware\nconfigurations here, so you can get an idea in advance of how long it will\ntake:     Processor(s)  No. of cores  Memory  Time (HH:MM)  Notes      2 x Xeon X5570 2.93GHz  2 x 4  36 GB  00:19  NIGHTLY_OPTIONS='-FnCDmprt'    4 x Opteron 6172 2.1 GHz  4 x 12  128 GB  00:21  NIGHTLY_OPTIONS='-FnCDmprt'    Xeon E3-1270 3.4 GHz  4  16 GB  00:23  NIGHTLY_OPTIONS='-FnCDmprt'    Core i7-3770 3.4GHz  4  8 GB  00:28  NIGHTLY_OPTIONS='-nCprt' (with SSD, the production build for Tribblix)    Xeon E3-1245V2 3.4 GHz  4  16 GB  00:31  NIGHTLY_OPTIONS='-FnCDmprt'    Core i7-2600K 3.4 GHz  4  8 GB  00:35  NIGHTLY_OPTIONS='-nClmprt'    2 x Xeon E5620 2.4 GHz  2 x 4  48 GB  00:38  None    1 x Xeon E5607 2.27GHz  1 x 4  12 GB  00:46  NIGHTLY_OPTIONS='-FnCDmprt'    Xeon E3-1245V2 3.4 GHz  4  16 GB  00:47  NIGHTLY_OPTIONS='-FnCDlmprt' (with lint)    2 x Xeon E5540 2.53 GHz  2 x 4  24 GB  00:50  With lint    2 x Xeon E5506 2.13 GHz  2 x 4  24 GB  00:50  No dmake check    1 x Xeon X5650 2.67 GHz  1 x 6  12 GB  00:51  With lint, default NIGHTLY_OPTIONS    2 x Xeon E5506 2.13 GHz  2 x 4  24 GB  01:03  None    Core i7-960 3.2 GHz  4  9 GB  01:03  With lint    2 x Xeon E5506 2.13 GHz  2 x 4  16 GB  01:06  VMware Workstation guest    Core i7-930 2.8 GHz  4  8 GB  01:07  VMware ESXi guest    Xeon  E5-2676 v3 2.4GHz  2  16 GB  01:13  NIGHTLY_OPTIONS='-nCprt' (Tribblix) on an AWS m4.xlarge EC2 instance    Core 2 Quad Q6600 2.4 GHz  4  2 GB  01:16  None    2 x Xeon E5310 1.6 GHz  2 x 4  32 GB  01:24  None    1 x Athlon II X2 240 2.8 GHz  2  2 GB  01:27  NIGHTLY_OPTIONS='-FnCDmprt', on a low end SSD    Core 2 Quad Q9300 2.5 GHz  4  7 GB  01:32  None    2 x Xeon E5420 @ 2.50GHz  2 x 4  4 GB  01:33  Default NIGHTLY_OPTIONS; an incremental rebuild takes 13 min to walk all Makefiles    2 x Opteron 2218HE 2.6 GHz  2 x 2  16 GB  01:42  None    Core i5-540M 2.53 GHz  2  4 GB  01:54  None    2 x UltraSPARC-T2+ 1165 MHz  128 threads  32 GB  02:18  NIGHTLY_OPTIONS='-nCprt' (the Tribblix SPARC build)    Core i3-370M 2.40 GHz  2  2 GB  02:30  None    Core 2 Quad Q8200 2.33 GHz  4  5 GB  02:30  Default NIGHTLY_OPTIONS.    Core 2 Duo T8300 2.3 GHz (T61)  2  2 GB  02:58  VMware Workstation 2 CPUs    Core 2 Duo E6750 2.66 GHz  2  8 GB  02:59  Sun Ultra 24 (with lint)    Core 2 Duo Celeron E3200 3.2 GHz  2  4 GB  03:28  2.4 GHz CPU over clocked to 3.2. Everything running on a low end SSD. With lint.    Core 2 Duo T5600 1.8 GHz  2  3.3 GB  04:26  None    Opteron 146 2 GHz  1  4 GB  07:28  None    4 x Dual-Core Opteron 8218 2.6 GHz  (8-vCPU VM)  16 GB (2GB VM)  35:47 + 9:05  VirtualBox 3.0.12 VM, with 8 vCPUs and 2GB vRAM; local vHDD; with lint and default NIGHTLY_OPTIONS='-FnCDlmprt' NOTE: Package repo did not get built at all with the first nightly run, only with the second, incremental nightly run (another 9 hours)", 
            "title": "Build times"
        }, 
        {
            "location": "/developers/build-times/#notes", 
            "text": "\"Bare Metal\" just slightly faster than VMware guest. On the other hand, VirtualBox painfully slow.  More cores faster but not linear increase.  SSD use seems to provide nice speedup.  As expected, lint checking results in longer build times.", 
            "title": "Notes"
        }, 
        {
            "location": "/developers/build-components/", 
            "text": "Requires Review\n\n\nThis page references some old practices and needs to be reviewed.\n\n\n\n\nHow to build components\n\n\nWhen it's appropriate\n\n\nYou can build just a component when you don't need the entire consolidation,\nwhen you are building a self-contained utility, when you are getting started\nwith Illumos, or when you want to do a quick build.\n\n\nThis approach is only for independent programs like m4, date, cron, hostid,\nman... etc.\n\n\nThis example\n\n\nI'm building the m4 command from the ONNV consolidation on a system running oi_148.\n\n\nRequirements\n\n\nSetup of the compilation environment is detailed in \nHow To Build illumos\n.\n\n\nMercurial (hg)\n\n\nThis should be installed in /usr from the IPS package pkg:/developer/versioning/mercurial.\n\n\nThe compiler\n\n\nThe C compiler is the properly patched version of GCC 4.4.4\n\n\nBuild tools\n\n\nThese reside in /opt/onbld and are installed from the IPS package pkg:/developer/build/onbld.\n\n\nThe PATH\n\n\nMine is:\n\n\nPATH=/usr/local/bin:/usr/bin:/opt/SUNWspro/bin:/usr/ccs/bin:\\\n/opt/onbld/bin:/opt/onbld/bin/i386:/opt/sfw/bin:/usr/sfw/bin:\\\n/usr/dt/bin:/usr/openwin/bin:/usr/sbin\nexport PATH\n\n\n\n\nJust make sure all of the executables you need are available through the PATH.\n\n\nA symlink\n\n\nI needed this symlink for the PATH to work correctly:\n\n\n/opt/SUNWspro -\n /opt/sunstudio12.1\n\n\n\n\nPreparation\n\n\n\n\nSetup of the compilation environment, including preparation of the recommended directories in a ZFS layout, and checkout of the code, is detailed in How To Build illumos.\nThe steps below outline an alternative (and somewhat incompatible) approach to this procedure. Still, if you only intend to build small pieces of the project, especially if you only have an unprivileged user account on the build host, these instructions should suffice and may be less complicated to follow.\n\n\n\n\nSet up the location\n\n\n$ cd ~/Downloads\n$ mkdir code\n$ cd code\n\n\n\n\nObtain the source\n\n\n$ hg clone ssh://anonhg@hg.illumos.org/illumos-gate\n\n\n\n\nSet up the environment file\n\n\n$ cd illumos-gate\n$ cp -p usr/src/tools/env/illumos.sh .\n$ cp -p illumos.sh illumos.sh-orig\n$ vim illumos.sh\n...\n\n### Result of edition:\n$ diff illumos.sh-orig illumos.sh\n58c58\n\n export GATE=\ntestws\n\n---\n\n export GATE=\nillumos-gate\n\n61c61\n\n export CODEMGR_WS=\n$HOME/ws/$GATE\n\n---\n\n export CODEMGR_WS=\n$HOME/Downloads/code/$GATE\n\n196c196\n\n #export ONBLD_TOOLS=\n/opt/onbld\n\n---\n\n export ONBLD_TOOLS=\n/opt/onbld\n\n217a218,225\n\n \n\n # Lint locations\n\n i386_LINT=/opt/sunstudio12.1/bin/lint; export i386_LINT\n\n amd64_LINT=/opt/sunstudio12.1/bin/lint; export amd64_LINT\n\n sparc_LINT=/opt/sunstudio12.1/bin/lint; export sparc_LINT\n\n sparcv9_LINT=/opt/sunstudio12.1/bin/lint; export sparcv9_LINT\n\n \n\n ####\n\n\n\n\nAs you can see, I modified some lines in the file to suit my build system, and\nadded a few so that the lint command from Sun Studio 12u1 could be found.\n\n\nPreparing the workspace for component build\n\n\nA few tools have to be prepared before we can build a component. To build them,\nyou should run commands in a new shell which sets some environment variables:\n\n\nln -s usr/src/tools/scripts/bldenv.sh .\nksh93 bldenv.sh -d illumos.sh -c \ncd usr/src \n dmake setup\n\n\n\n\n\nProcedure\n\n\nLocation\n\n\nChange directory to where the m4 Makefile (the build target of our example) resides:\n\n\n$ cd ~/Downloads/code/illumos-gate/usr/src/cmd/sgs/m4\n\n\n\n\nBuild\n\n\nClean out the object files by 'make clean'. It only deletes object files, and\nnot the generated executables. But the executables will be regenerated once all\nthe object files are rebuilt (and become newer than the executable target).\n\n\n$ bldenv ~/Downloads/code/illumos-gate/illumos.sh \nmake clean\n\n\n\n\n\nDo a dry-run by 'make -n'\n\n\n$ bldenv ~/Downloads/code/illumos-gate/illumos.sh \nmake -n\n\n\n\n\n\nNow actually build m4 binary by 'make'\n\n\n$ bldenv ~/Downloads/code/illumos-gate/illumos.sh \nmake\n\n\n\n\n\nNote that the argument list must be quoted if it contains more than one word.\n\n\nCheck\n\n\nObject file and i386/m4 executable file got generated.\n\n\n$ find i386/\ni386/\ni386/Makefile\ni386/.make.state\ni386/m4objs\ni386/m4objs/m4ext.o\ni386/m4objs/m4y.o\ni386/m4objs/m4macs.o\ni386/m4objs/m4.o\ni386/m4.xpg4\ni386/m4objs.xpg4\ni386/m4objs.xpg4/m4y_xpg4.o\ni386/m4objs.xpg4/m4ext.o\ni386/m4objs.xpg4/m4.o\ni386/m4objs.xpg4/m4macs.o\ni386/m4\n$\n\n\n\n\nUse \"ldd\" and \"file\" commands to profile the built m4 binary.\n\n\n$ ldd i386/m4\n        libc.so.1 =\n     /lib/libc.so.1\n        libm.so.2 =\n     /lib/libm.so.2\n$ file i386/m4\ni386/m4:        ELF 32-bit LSB executable 80386 Version 1 [FPU],  \\\ndynamically linked, not stripped, \\\nno debugging information available\n$\nRun lint\n$ bldenv ~/Downloads/code/illumos-gate/illumos.sh \nmake lint\n\n\n\n\n\nAlternatives\n\n\nGarrett D\nAmore suggests:\ndoing \nmake setup\n in the top level, plus a \nmake install\n in the\ndirectory of interest, usually works if the utility is self contained.\n\n\n\n\nJens Elkner recommends:\nI made the src tree once nightly to \ninitilize\n required stuff. After\nthat I just source the script mentioned below when I start working,\nchange to the dir of interest and call \nmake ...\n. This usually works\neven if nightly doesn\nt run through completely ...\n\nhttp://iws.cs.uni-magdeburg.de/~elkner/osol/onbld.env2\n\nLocal copy backup in illumos Wiki: onbld.env2\n\n\n\n\nDan McDonald cites:\nhttp://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html\n\nI haven\nt looked very closely at the Illumos build instructions, but\nI\nm going to do some things now that will help kernel module writers\n(e.g. device drivers) get started without resorting to a full build\nright off the bat.\n\n\n\n\nSome component build examples.\n\n\nlibc build on oi_148 dual CPU with 2G RAM VMware session (also note this example uses the recommended build directory layout):\n\n\n$pwd\n/code/illumos-gate/usr/src/lib/libc\n\n$time bldenv /code/illumos-gate/illumos.sh \nmake\n\n\nsnip\n\nar: creating libc_pic.a\n/usr/ccs/bin/mcs -d -n .SUNW_ctf libc_pic.a \n /dev/null 2\n1\nar -ts libc_pic.a \n /dev/null\n/code/illumos-gate/usr/src/lib/libc/i386/etc\n\nreal    10m37.770s\nuser    7m58.969s\nsys     5m54.108s\n\n$", 
            "title": "Building Components"
        }, 
        {
            "location": "/developers/build-components/#how-to-build-components", 
            "text": "", 
            "title": "How to build components"
        }, 
        {
            "location": "/developers/build-components/#when-its-appropriate", 
            "text": "You can build just a component when you don't need the entire consolidation,\nwhen you are building a self-contained utility, when you are getting started\nwith Illumos, or when you want to do a quick build.  This approach is only for independent programs like m4, date, cron, hostid,\nman... etc.", 
            "title": "When it's appropriate"
        }, 
        {
            "location": "/developers/build-components/#this-example", 
            "text": "I'm building the m4 command from the ONNV consolidation on a system running oi_148.", 
            "title": "This example"
        }, 
        {
            "location": "/developers/build-components/#requirements", 
            "text": "Setup of the compilation environment is detailed in  How To Build illumos .", 
            "title": "Requirements"
        }, 
        {
            "location": "/developers/build-components/#mercurial-hg", 
            "text": "This should be installed in /usr from the IPS package pkg:/developer/versioning/mercurial.", 
            "title": "Mercurial (hg)"
        }, 
        {
            "location": "/developers/build-components/#the-compiler", 
            "text": "The C compiler is the properly patched version of GCC 4.4.4", 
            "title": "The compiler"
        }, 
        {
            "location": "/developers/build-components/#build-tools", 
            "text": "These reside in /opt/onbld and are installed from the IPS package pkg:/developer/build/onbld.", 
            "title": "Build tools"
        }, 
        {
            "location": "/developers/build-components/#the-path", 
            "text": "Mine is:  PATH=/usr/local/bin:/usr/bin:/opt/SUNWspro/bin:/usr/ccs/bin:\\\n/opt/onbld/bin:/opt/onbld/bin/i386:/opt/sfw/bin:/usr/sfw/bin:\\\n/usr/dt/bin:/usr/openwin/bin:/usr/sbin\nexport PATH  Just make sure all of the executables you need are available through the PATH.", 
            "title": "The PATH"
        }, 
        {
            "location": "/developers/build-components/#a-symlink", 
            "text": "I needed this symlink for the PATH to work correctly:  /opt/SUNWspro -  /opt/sunstudio12.1", 
            "title": "A symlink"
        }, 
        {
            "location": "/developers/build-components/#preparation", 
            "text": "Setup of the compilation environment, including preparation of the recommended directories in a ZFS layout, and checkout of the code, is detailed in How To Build illumos.\nThe steps below outline an alternative (and somewhat incompatible) approach to this procedure. Still, if you only intend to build small pieces of the project, especially if you only have an unprivileged user account on the build host, these instructions should suffice and may be less complicated to follow.", 
            "title": "Preparation"
        }, 
        {
            "location": "/developers/build-components/#set-up-the-location", 
            "text": "$ cd ~/Downloads\n$ mkdir code\n$ cd code", 
            "title": "Set up the location"
        }, 
        {
            "location": "/developers/build-components/#obtain-the-source", 
            "text": "$ hg clone ssh://anonhg@hg.illumos.org/illumos-gate", 
            "title": "Obtain the source"
        }, 
        {
            "location": "/developers/build-components/#set-up-the-environment-file", 
            "text": "$ cd illumos-gate\n$ cp -p usr/src/tools/env/illumos.sh .\n$ cp -p illumos.sh illumos.sh-orig\n$ vim illumos.sh\n...\n\n### Result of edition:\n$ diff illumos.sh-orig illumos.sh\n58c58  export GATE= testws \n---  export GATE= illumos-gate \n61c61  export CODEMGR_WS= $HOME/ws/$GATE \n---  export CODEMGR_WS= $HOME/Downloads/code/$GATE \n196c196  #export ONBLD_TOOLS= /opt/onbld \n---  export ONBLD_TOOLS= /opt/onbld \n217a218,225    # Lint locations  i386_LINT=/opt/sunstudio12.1/bin/lint; export i386_LINT  amd64_LINT=/opt/sunstudio12.1/bin/lint; export amd64_LINT  sparc_LINT=/opt/sunstudio12.1/bin/lint; export sparc_LINT  sparcv9_LINT=/opt/sunstudio12.1/bin/lint; export sparcv9_LINT    ####  As you can see, I modified some lines in the file to suit my build system, and\nadded a few so that the lint command from Sun Studio 12u1 could be found.", 
            "title": "Set up the environment file"
        }, 
        {
            "location": "/developers/build-components/#preparing-the-workspace-for-component-build", 
            "text": "A few tools have to be prepared before we can build a component. To build them,\nyou should run commands in a new shell which sets some environment variables:  ln -s usr/src/tools/scripts/bldenv.sh .\nksh93 bldenv.sh -d illumos.sh -c  cd usr/src   dmake setup", 
            "title": "Preparing the workspace for component build"
        }, 
        {
            "location": "/developers/build-components/#procedure", 
            "text": "", 
            "title": "Procedure"
        }, 
        {
            "location": "/developers/build-components/#location", 
            "text": "Change directory to where the m4 Makefile (the build target of our example) resides:  $ cd ~/Downloads/code/illumos-gate/usr/src/cmd/sgs/m4", 
            "title": "Location"
        }, 
        {
            "location": "/developers/build-components/#build", 
            "text": "Clean out the object files by 'make clean'. It only deletes object files, and\nnot the generated executables. But the executables will be regenerated once all\nthe object files are rebuilt (and become newer than the executable target).  $ bldenv ~/Downloads/code/illumos-gate/illumos.sh  make clean   Do a dry-run by 'make -n'  $ bldenv ~/Downloads/code/illumos-gate/illumos.sh  make -n   Now actually build m4 binary by 'make'  $ bldenv ~/Downloads/code/illumos-gate/illumos.sh  make   Note that the argument list must be quoted if it contains more than one word.", 
            "title": "Build"
        }, 
        {
            "location": "/developers/build-components/#check", 
            "text": "Object file and i386/m4 executable file got generated.  $ find i386/\ni386/\ni386/Makefile\ni386/.make.state\ni386/m4objs\ni386/m4objs/m4ext.o\ni386/m4objs/m4y.o\ni386/m4objs/m4macs.o\ni386/m4objs/m4.o\ni386/m4.xpg4\ni386/m4objs.xpg4\ni386/m4objs.xpg4/m4y_xpg4.o\ni386/m4objs.xpg4/m4ext.o\ni386/m4objs.xpg4/m4.o\ni386/m4objs.xpg4/m4macs.o\ni386/m4\n$  Use \"ldd\" and \"file\" commands to profile the built m4 binary.  $ ldd i386/m4\n        libc.so.1 =      /lib/libc.so.1\n        libm.so.2 =      /lib/libm.so.2\n$ file i386/m4\ni386/m4:        ELF 32-bit LSB executable 80386 Version 1 [FPU],  \\\ndynamically linked, not stripped, \\\nno debugging information available\n$\nRun lint\n$ bldenv ~/Downloads/code/illumos-gate/illumos.sh  make lint", 
            "title": "Check"
        }, 
        {
            "location": "/developers/build-components/#alternatives", 
            "text": "Garrett D Amore suggests:\ndoing  make setup  in the top level, plus a  make install  in the\ndirectory of interest, usually works if the utility is self contained.  Jens Elkner recommends:\nI made the src tree once nightly to  initilize  required stuff. After\nthat I just source the script mentioned below when I start working,\nchange to the dir of interest and call  make ... . This usually works\neven if nightly doesn t run through completely ...\n\nhttp://iws.cs.uni-magdeburg.de/~elkner/osol/onbld.env2\n\nLocal copy backup in illumos Wiki: onbld.env2  Dan McDonald cites:\nhttp://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html\n\nI haven t looked very closely at the Illumos build instructions, but\nI m going to do some things now that will help kernel module writers\n(e.g. device drivers) get started without resorting to a full build\nright off the bat.", 
            "title": "Alternatives"
        }, 
        {
            "location": "/developers/build-components/#some-component-build-examples", 
            "text": "libc build on oi_148 dual CPU with 2G RAM VMware session (also note this example uses the recommended build directory layout):  $pwd\n/code/illumos-gate/usr/src/lib/libc\n\n$time bldenv /code/illumos-gate/illumos.sh  make  snip \nar: creating libc_pic.a\n/usr/ccs/bin/mcs -d -n .SUNW_ctf libc_pic.a   /dev/null 2 1\nar -ts libc_pic.a   /dev/null\n/code/illumos-gate/usr/src/lib/libc/i386/etc\n\nreal    10m37.770s\nuser    7m58.969s\nsys     5m54.108s\n\n$", 
            "title": "Some component build examples."
        }, 
        {
            "location": "/developers/build-datasets/", 
            "text": "Creating Build Datasets\n\n\nBy \nBayard G. Bell\n\n\nIntroduction\n\n\nThe main guide assumes that your illumos-gate workspace resides in a directory\nnamed /code (likely located in your rpool) and owned by your build user.\n\n\nHowever, this is not very practical regarding further OS updates, compression,\nsnapshots and rollbacks and a myriad other features that a dedicated ZFS\ndataset might give you. So it is recommended to create one instead and also\nlink it as /code (at least for the consistency of this guide and some others\nthat link to it):\n\n\nsudo zfs create rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev\n\n\n\n\n\n\nThis example still uses the rpool ZFS pool, available by default on any current OpenSolaris system. If your system has other pools, perhaps larger and more performant, you might want to use them instead.\n\n\n\n\nAs an example of why you might want a separate ZFS dataset, consider checking\nout the source into a dataset and keeping it pristine, while you do your\nwildest experiments and compilation in its clone dataset. The snapshot and\nsubsequent clone require no space initially, and can be easily demolished when\nthe wild experiments lead into a dead-end, while you retain the checked-out\nsource code repository and don't have to download it again. Alternately, this\ncan be used to work on several bugs in parallel and keeping the diffs separated\nfor further webrev (see \nComparing arbitrary sources with\nwebrev(1)\n) and submission upstream (see \nHow To\nContribute\n).\n\n\nNow that you have a separate dataset, you can optimize it for space and/or\naccess speed by setting some ZFS attributes, for example:\n\n\nsudo zfs set compression=lzjb rpool/export/home/illumos-dev\nsudo zfs set atime=off rpool/export/home/illumos-dev\nsudo zfs set sync=disabled rpool/export/home/illumos-dev\n\n\n\n\ncompression decreases used disk space and may increase IO speed (by reducing\nmechanical IOPS) at cost of some CPU time (especially during writes) atime\ndisables directory entry updates when reading files; this decreases pool writes\nand increases available IOPS. If your build host is a VM backed by ZFS storage\nwith automatic snapshots, or if you use an iSCSI volume imported from a storage\nhost as your building zfs pool, this can also save lots of space on the backend\nstorage.  sync allows to bypass the ZIL for this dataset. It is believed to\nsomewhat increase write speeds at the cost of potential loss of consistency in\ncase of untimely reboots or kernel panics.\n\n\nSince this is a ZFS dataset, you can later zfs snapshot it (i.e. after\nsuccessful builds) to make a zfs clone and/or to zfs rollback to some\nknown-good state. In fact, you can (optionally) delegate the administrative\nrights for that to your build-user:\n\n\nsudo zfs allow -l -d -u $USER \\\n  create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive \\\n  rpool/export/home/illumos-dev\n\n\n\n\n\n\nThe \n-l -d\n options set this permission locally on the named dataset and on its descendants, including those created in the future.\n\n\n\n\nFinally, one of your large space consumers would be the package repository\ncontaining the built installable binaries. You can seperate that into a\nstandalone dataset for the same ZFS benefits of independent data lifecycle,\nreplication or storage optimization, for example:\n\n\nsudo zfs create -o atime=off -o compression=gzip-9 \\\n  rpool/export/home/illumos-dev/packages\nsudo chown -R $USER /export/home/illumos-dev\n\n\n\n\n\n\nMake the symlink AFTER checking out the source:\n\n\n\n\nsudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate\n\n\n\n\n\n\nThis last step (symlinking) should be done after getting the source (checkout requires an empty target).\n\n\n\n\nIt is arguable whether a separate dataset for packages is at all needed (and it\nis relatively small compared the the build workspace directory). Well, I for\none like putting stuff into different boxes.\n\n\nAdministrative rationales however include:\n\n\n\n\nWhen working on many bugs, people can have several \"code\" workspaces maintained as ZFS-clones of one golden code repo, as summarized in \nWorking on several bugs at once\n.\n\n\nHowever they can want to share the package repository between such projects, and maintain one package depot once configured.\n\n\nSnapshooting the package repo before and after a build to check for differences, or to do a zfs send to another machine.\n\n\nrsync may be better though (since the rebuild would likely wipe the repo and create it anew, even if made up of mostly the same contents \u2013 \nzfs diff\n would be huge, but rsync data diff would only include changes).\n\n\nNFS/CIFS-sharing of the package repo may be easier to set up if it is a separate dataset.\n\n\n\n\nIt can be located separately from workspace \u2013 another pool, different hardware (i.e. ramdisk/SSD for compile workspace, HDD for package repo).", 
            "title": "Build Datasets"
        }, 
        {
            "location": "/developers/build-datasets/#creating-build-datasets", 
            "text": "By  Bayard G. Bell", 
            "title": "Creating Build Datasets"
        }, 
        {
            "location": "/developers/build-datasets/#introduction", 
            "text": "The main guide assumes that your illumos-gate workspace resides in a directory\nnamed /code (likely located in your rpool) and owned by your build user.  However, this is not very practical regarding further OS updates, compression,\nsnapshots and rollbacks and a myriad other features that a dedicated ZFS\ndataset might give you. So it is recommended to create one instead and also\nlink it as /code (at least for the consistency of this guide and some others\nthat link to it):  sudo zfs create rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev   This example still uses the rpool ZFS pool, available by default on any current OpenSolaris system. If your system has other pools, perhaps larger and more performant, you might want to use them instead.   As an example of why you might want a separate ZFS dataset, consider checking\nout the source into a dataset and keeping it pristine, while you do your\nwildest experiments and compilation in its clone dataset. The snapshot and\nsubsequent clone require no space initially, and can be easily demolished when\nthe wild experiments lead into a dead-end, while you retain the checked-out\nsource code repository and don't have to download it again. Alternately, this\ncan be used to work on several bugs in parallel and keeping the diffs separated\nfor further webrev (see  Comparing arbitrary sources with\nwebrev(1) ) and submission upstream (see  How To\nContribute ).  Now that you have a separate dataset, you can optimize it for space and/or\naccess speed by setting some ZFS attributes, for example:  sudo zfs set compression=lzjb rpool/export/home/illumos-dev\nsudo zfs set atime=off rpool/export/home/illumos-dev\nsudo zfs set sync=disabled rpool/export/home/illumos-dev  compression decreases used disk space and may increase IO speed (by reducing\nmechanical IOPS) at cost of some CPU time (especially during writes) atime\ndisables directory entry updates when reading files; this decreases pool writes\nand increases available IOPS. If your build host is a VM backed by ZFS storage\nwith automatic snapshots, or if you use an iSCSI volume imported from a storage\nhost as your building zfs pool, this can also save lots of space on the backend\nstorage.  sync allows to bypass the ZIL for this dataset. It is believed to\nsomewhat increase write speeds at the cost of potential loss of consistency in\ncase of untimely reboots or kernel panics.  Since this is a ZFS dataset, you can later zfs snapshot it (i.e. after\nsuccessful builds) to make a zfs clone and/or to zfs rollback to some\nknown-good state. In fact, you can (optionally) delegate the administrative\nrights for that to your build-user:  sudo zfs allow -l -d -u $USER \\\n  create,destroy,snapshot,rollback,clone,promote,rename,mount,send,receive \\\n  rpool/export/home/illumos-dev   The  -l -d  options set this permission locally on the named dataset and on its descendants, including those created in the future.   Finally, one of your large space consumers would be the package repository\ncontaining the built installable binaries. You can seperate that into a\nstandalone dataset for the same ZFS benefits of independent data lifecycle,\nreplication or storage optimization, for example:  sudo zfs create -o atime=off -o compression=gzip-9 \\\n  rpool/export/home/illumos-dev/packages\nsudo chown -R $USER /export/home/illumos-dev   Make the symlink AFTER checking out the source:   sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate   This last step (symlinking) should be done after getting the source (checkout requires an empty target).   It is arguable whether a separate dataset for packages is at all needed (and it\nis relatively small compared the the build workspace directory). Well, I for\none like putting stuff into different boxes.  Administrative rationales however include:   When working on many bugs, people can have several \"code\" workspaces maintained as ZFS-clones of one golden code repo, as summarized in  Working on several bugs at once .  However they can want to share the package repository between such projects, and maintain one package depot once configured.  Snapshooting the package repo before and after a build to check for differences, or to do a zfs send to another machine.  rsync may be better though (since the rebuild would likely wipe the repo and create it anew, even if made up of mostly the same contents \u2013  zfs diff  would be huge, but rsync data diff would only include changes).  NFS/CIFS-sharing of the package repo may be easier to set up if it is a separate dataset.   It can be located separately from workspace \u2013 another pool, different hardware (i.e. ramdisk/SSD for compile workspace, HDD for package repo).", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/workspaces/", 
            "text": "Requires Review\n\n\nThis page references some old practices and needs to be reviewed.\n\n\n\n\n\n\nNote\n\n\nhttps://wiki.illumos.org/display/illumos/Managing+multiple+workspaces+for+illumos+with+Git\n\n\n\n\nManaging Multiple Workspaces\n\n\nBy \nBayard G. Bell\n\n\nMake a symlink to the dedicated package repository (Optional)\n\n\nIf you used a separate ZFS dataset for packages, as detailed in \nBuild\ndatasets\n and checked out the workspace with one of the\nmethods in How To Build illumos, now is the time to symlink to it. If you\ndon't, a directory named packages will be created under the workspace directory\nin due course during the build, within the build dataset; if that happens \u2013 you\nmay just move the files into the dedicated dataset after the successful build\nand make the symlink then:\n\n\nsudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate\n\n\n\n\nGolden repository \u2013 one of many\n\n\nIf you want to \nWork on several bugs at once\n, you may want\nto maintain a \"golden image\" of the source code repository in a dedicated\ndataset and zfs clone that for your actual works. In this case you'd run:\n\n\nsudo zfs create rpool/export/home/illumos-dev/code/illumos-clone\nsudo chown -R $USER /export/home/illumos-dev\n\ncd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate illumos-clone\n\n### This symlink is optional - if you store packages in a separate dataset\nsudo ln -s ../../packages /export/home/illumos-dev/code/illumos-clone\n\nTS=\n`/bin/date \n+%Y%m%d-%H%M%S\n`\n\nzfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@\n$TS\n\nzfs clone rpool/export/home/illumos-dev/code/illumos-clone@\n$TS\n \\\n          rpool/export/home/illumos-dev/code/illumos-gate\n\n\n\n\n\n\nIn the multiple-workspace pattern you'd likely name the clone according to the bugID you're working on in it, like \"illumos-bug1234\"\n\n\n\n\nNow you'll have to modify the clone's pointer to parent repository (so it's\nlocal, not Internet as was true for the golden image). Edit the clone's\n\n/code/illumos-gate/.hg/hgrc\n file and replace the default path with the local\npathname to the local master repository, like this:\n\n\n[paths]\ndefault = /code/illumos-clone\n\n\n\n\nDiagram\n\n\nFor those people who understand pictures better, here is an illustration of\nillumos-gate development with multiple repositories and hints to the\ncontribution process:", 
            "title": "Multiple Workspaces"
        }, 
        {
            "location": "/developers/workspaces/#managing-multiple-workspaces", 
            "text": "By  Bayard G. Bell", 
            "title": "Managing Multiple Workspaces"
        }, 
        {
            "location": "/developers/workspaces/#make-a-symlink-to-the-dedicated-package-repository-optional", 
            "text": "If you used a separate ZFS dataset for packages, as detailed in  Build\ndatasets  and checked out the workspace with one of the\nmethods in How To Build illumos, now is the time to symlink to it. If you\ndon't, a directory named packages will be created under the workspace directory\nin due course during the build, within the build dataset; if that happens \u2013 you\nmay just move the files into the dedicated dataset after the successful build\nand make the symlink then:  sudo ln -s ../../packages /export/home/illumos-dev/code/illumos-gate", 
            "title": "Make a symlink to the dedicated package repository (Optional)"
        }, 
        {
            "location": "/developers/workspaces/#golden-repository-one-of-many", 
            "text": "If you want to  Work on several bugs at once , you may want\nto maintain a \"golden image\" of the source code repository in a dedicated\ndataset and zfs clone that for your actual works. In this case you'd run:  sudo zfs create rpool/export/home/illumos-dev/code/illumos-clone\nsudo chown -R $USER /export/home/illumos-dev\n\ncd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate illumos-clone\n\n### This symlink is optional - if you store packages in a separate dataset\nsudo ln -s ../../packages /export/home/illumos-dev/code/illumos-clone\n\nTS= `/bin/date  +%Y%m%d-%H%M%S ` \nzfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@ $TS \nzfs clone rpool/export/home/illumos-dev/code/illumos-clone@ $TS  \\\n          rpool/export/home/illumos-dev/code/illumos-gate   In the multiple-workspace pattern you'd likely name the clone according to the bugID you're working on in it, like \"illumos-bug1234\"   Now you'll have to modify the clone's pointer to parent repository (so it's\nlocal, not Internet as was true for the golden image). Edit the clone's /code/illumos-gate/.hg/hgrc  file and replace the default path with the local\npathname to the local master repository, like this:  [paths]\ndefault = /code/illumos-clone", 
            "title": "Golden repository \u2013 one of many"
        }, 
        {
            "location": "/developers/workspaces/#diagram", 
            "text": "For those people who understand pictures better, here is an illustration of\nillumos-gate development with multiple repositories and hints to the\ncontribution process:", 
            "title": "Diagram"
        }, 
        {
            "location": "/developers/multibug/", 
            "text": "Requires Review\n\n\nThis page references some old practices and needs to be reviewed.\n\n\n\n\nWorking on multiple bugs at once\n\n\nBy \nJim Klimov\n\n\nIntroduction\n\n\nIt is not rare to have a contributor working on several disparate sub-projects\nwhich are of interest to him, such as fixing different bugs or updating\ndocumentation man-pages, in parallel. This means that the developer has been\nassigned several bug/RFE IDs in the common bugtracker and prepares changes in\nhis local development environment in order to propose a webrev for public\nreview and ultimately request-to-integrate his or her fixes. A \"newbie\"\ncontributor might take on a number of bite-sized quests that others postponed\nindefinitely, just to get the hang of the development environment.\n\n\nThe tricky part here is that a developer can be working on small bugs, and the\nlatency of review/RTI process would cause him to idle around between singular\nquests and lose interest, while he could go on a new task right after posting\none for review. However, working on several tasks in one workspace is also\npotentially problematic \u2013 the webrev would consolidate all changes (from works\non different bugs), while the central (official) repository policies highly\nprefer atomic updates \u2013 \"one changeset = one bug\", or close to that.\n\n\nSource-code management systems have a number of solutions to this problem.\nWhere other systems propose working in branches of code, which would ultimately\nbe merged, most if not all illumos developers (of those who responded to my\ncall for real-life info) prefer to clone complete Mercurial repositories (one\nper bug), spawn separate workspaces and develop there. The rest of this page\nshall discuss several practical approaches to this.\n\n\nThere is also some controversy about using Mercurial Queues to track small\nfixes:\n\n\n\n\nGordon: If you have a bunch of small fixes underway simultaneously, you might consider using \"hg mq\" (hg qpush, hg qpop, ...): \nhttp://mercurial.selenic.com/wiki/MqExtension\n\nDan: I find mq causes more problems than it solves but that's just me. \n\n\n\n\nThree-tiered approach\n\n\nIn this approach the developer maintains a \"clean\" replica of the official\nrepository (\"illumos-clone\" as a hg-clone of official illumos-gate in examples\nbelow), and his development workspaces (\"ws1 .. wsN\" in examples below) are\ninstantiated in clones of this replica. No actual development occurs in\nillumos-clone workspace.\n\n\nWhenever work on a new task starts, the developer updates his illumos-clone to\ncurrent source code, and creates a clone of it (several methods are available\nand discussed below) named like ws1 or illumos-bug1234.\n\n\nFor people who understand pictures better, here is an illustration of proposed\nrepository cloning and tiering architectures:\n\n\n\n\nAfter some development and testing, the developer has committed his changes to\nthe ws1 repository (with the comment like \"1234 Bug description one-liner\"). He\nshould then pull and update the illumos-clone repository from official sources\nand update the ws1 repository from illumos-clone, and merge any changes. This\nway the ws1 repository now contains his work as if it was done against the\ncurrent revision of the \"official\" public source codes. Then the developer\nprepares a webrev and provides it for public review.\n\n\n\n\nBob: While you were patiently waiting, other changes were put into upstream\n\n\n\n\n\nMercurial.  These changes have to be pulled and merged (to tip) before Mecurial\nwould allow you to push (assuming you were authorized).  If files you edited\nhave been updated over time, it would be polite to pull, merge with those\nchanges, re-test, and if they are significant to your work, re-request a\nreview.\n\n\nMercurial only allows you to push if there is just one head (tip). If\n\n\n\n\n\nchanges come in via a pull after you have done a commit, then there will be two\nheads, which need to be merged.  Use 'hg heads' to see the heads.\n\n\n\n\nFor repositories where the user has the push privileges (such as a forked\nrepository on the BitBucket), the developer can push his tested changes from\nws1 repository to illumos-clone repository and then to his own repository fork\non the public hosting service. This would allow other developers to look into\ncompleted code for review, or to pull his changes into their systems (such as\nwhen the integration into \"official\" repository occurs).\n\n\n\n\nBob: If you do \"hg paths\" in illumos-clone it will report that it points to the\nofficial master.  If you do the same in \"ws1\" it will report that it points to\nlocal \"illumos-clone\".\n\n\nIf your approved changeset is in \"ws1\" then you would first do \"hg push\" in\n\"ws1\",  then change to \"illumos-clone\" (which now contains the changeset) and\ndo \"hg push\" to push to the official master.  Of course merging is likely\nrequired before you can push.\n\n\nThe necessary pulls are inverse of the push \u2013 so if you want to get new\nupstream changesets into \"ws1\", you would first do an \"hg pull\" in\n\"illumos-clone\" and then in \"ws1\".\n\n\nChanges may be pushed to something other than the default upstream repository\nby specifying the respository URL when you do the push, or by editing .hg/hgrc\ninside the repository base directory and changing the \"default\" definition to\nthe new path.  This means that you could push directly from \"ws1\" to the\nofficial master provided that any pending upstream changesets have been merged\nas a merge changeset.\n\n\n\n\nThis pattern applies not only to illumos-gate, but also to other related\nillumos/OpenIndiana subprojects hosted in Mercurial repositories. Keeping a\ntier of the golden repository allows you to save some internet traffic (when\npropagating changesets from upstream to your numerous workspaces) and to\nquickly instantiate clones of the current public source code (again, saving on\ntraffic \u2013 actually, being independent of network connectivity).\n\n\n\n\nDan: I actually maintain a clone of illumos-gate locally (illumos-clone), and\nmy works in progress are children of illumos-clone. It does eat disk space, but\ncombined with sensible build practices (e.g. not doing full nightly builds\nuntil you're very close to integration) it's not all that bad.\n\n\nDon't forget about building modules when you only need modules, as I mention\nhere: \nhttp://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html\n\n\n\n\nSome developers use short-lived repos for one task, others instead prefer to\nspawn a few workspaces, and reuse them for new projects after the current one\nhas been committed upstream:\n\n\n\n\nSteve: after my changes are pushed, I can just sync it up with its parent and I\nam ready to work on another change-set in this repo (hg pull; hg update).  I do\nuse mv to rename repos, so that I have some visual reminder of what that repo\nis currently used for.\nDan: Once a child's diffs appear in illumos-gate, the child gets removed.\n\n\n\n\nGeneral setup\n\n\nGeneral build-system preparation is as outlined in How To Build illumos,\nhowever there is some difference in source-code repository organization and\nnaming. Like in that tutorial, the repositories are assumed to be hosted under\n/code directory. Depending on the adopted pattern, each repository can be an\nindividual ZFS dataset, or they can be sub-directories within one filesystem.\n\n\nElaborate on dataset setup, perhaps copy from main tutorial.\n\n\nThere are at least two variations, depending on the technology you choose to\nuse. You can clone repositories with tools built into the SCM, in our case \u2013 by\nusing the \"hg clone\" command. Alternately you can use ZFS clones and rewrite\nthe pointer to parent repository in the cloned child repo. Also the\nrepositories can be just copied as directories with files, but this is likely\nto be the most space-consuming option.\n\n\nzfs-cloning \u2013 Prepare dataset hierarchy\n\n\n\n\nNote\n\n\nThese examples put the repository into rpool. You're welcome to use another ZFS pool if available on your system.\n\n\n\n\nTo follow this route, each your repository must reside in its individual\ndedicated dataset which was created and prepared with commands like these (see\nHow To Build illumos for more details):\n\n\nsudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev\nsudo zfs create -o sync=disabled rpool/export/home/illumos-dev/code/illumos-clone\n\n\n\n\nhg-cloning or file-copying\n\n\nI was told that hg clone would try to use hardlinks to save space and time, so I guess keeping the masters and clones in one filesystem (accessible under /code below) is highly recommended.\n\n\n\n\nBob: Look in the hidden .hg directory for the actual repository. For local\nclones, Hg can use hard links to refer to the same repository files. The hard\nlink is broken if the file is to be updated.\nZFS's clone can do a bit better because Mercurial only appends to repository\nfiles so ZFS-cloned blocks will remain de-duplicated unless they are a short\ntail block which was updated.\n\n\n\n\nYou are still welcome to use a ZFS dataset dedicated to holding all the\nrepositories:\n\n\nsudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev\n\n\n\n\nInitialize the local master repository\n\n\nThe repository directory may exist, but must be empty if it does.\n\n\ncd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate ./illumos-clone\n\n\n\n\n\n\nNever touch illumos-clone except to pull changes from upstream\n\n\n\n\nMercurial allows to rename repositories as suits you today with filesystem\nutilities (this may be more useful on your child repositories though \u2013 i.e.\nrename them according to your bug-number-du-jour), so creation of your golden\nrepository could instead be done like this:\n\n\ncd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate\nmv illumos-gate illumos-clone\n\n\n\n\nUpdate the local master repository\n\n\ncd /code/illumos-clone\nhg pull -u\n\n\n\n\nSince there are no changes of your own in this repo, merging should be trivial and complete automatically.\n\n\nClone the local master into a child repository for work\n\n\nThere are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the default pointer to parent repository in the cloned child repo.\n\n\n\n\nBob: In addition to \"default\" there is \"default-push\" which specifies the\ndefault URL to push to. Besides the apparent \"exotic\" setup there is also the\nmundane approach (which I use) which pulls updates from the http:// appearance\nof a server and pushes to the ssh:// appearance of the same server. This\nresults in faster clones/updates while obtaining the secure SSH authentication\nwhen pushing.\n\n\n\n\nAlso the repositories can be just copied as directories with files, but this is\nlikely to be the most space-consuming option.\n\n\nExamples below use the bugID-based naming convention for child repositories and\ntheir workspaces. Some developers instead prefer to spawn a few\nstatically-named workspaces (\"ws1 .. wsN\"), and reuse them for new projects\nafter the current one has been committed upstream (so the repo with this\nauthor's changes is identical to upstream).\n\n\nzfs-cloning\n\n\nUpdate the local master repository (see above) and create a uniquely named ZFS\nsnapshot of its dataset, and then clone it, for example:\n\n\nzfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006\nzfs clone rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 rpool/export/home/illumos-dev/code/illumos-bug1234\n\n\n\n\nNow you'll have to modify the clone's pointer to parent repository (so it's\nlocal, not Internet as was for the golden image). Edit\n/code/illumos-bug1234/.hg/hgrc file which may look like this:\n\n\n[paths]\ndefault = ssh://anonhg@hg.illumos.org/illumos-gate\n\n\n\n\nYou should replace the default path with the local pathname to the local master repository, like this:\n\n\n[paths]\ndefault = /code/illumos-clone\nhg-cloning\n\n\n\n\nUpdate the local master repository (see above) and create a Mercurial clone:\n\n\ncd /code\nhg clone illumos-clone illumos-bug1234\n\n\n\n\nThis takes care of the child's parent relationships.\n\n\nfile copy cloning\n\n\nThis is the least recommended method. Still, you might have your reasons...\n\n\nUpdate the local master repository (see above) and copy the whole repo directory:\n\n\ncd /code\ncp -pr illumos-clone illumos-bug1234\n\n\n\n\nYou might alternatively use rsync, gtar, cpio and such.\n\n\nWork in the child copy\n\n\ncd /code/illumos-bug1234\n### edit files\n\nhg add \nnew files\n\nhg commit -m \n1234 Bug description one-liner\n\nwebrev...\n### (example webrev command-line from real-life is appreciated)\n### repeat if more work on this bug is needed\n\n\n\n\n\n\nDan: If you've just the one set of changes, \"webrev\" all by itself is sufficient. It'll create /code/illumos-bug1234/webrev/. You can then scp/mv/ln/etc. that webrev/ directory into an HTTP-reachable directory somewhere.\n\n\n\n\nAfter some work in the child workspace, you need to pull changes from upstream...\n\n\nIn particular, you must do this before completing your work to make the review or integration.\n\n\n### Update master repo\ncd /code/illumos-clone\nhg pull -u\n### Now illumos-clone is up to date.\n\n### For each child like \nillumos-bug1234\n:\ncd /code/illumos-bug1234\n### Make sure I\nve committed any outstanding diffs\nhg pull -u ; hg merge\n### Resolve conflicts if any\nhg commit -m blah\nhg recommit      ### \nedit push string to remove crap\n\n\n\n\n\nPublish your work\n\n\nDevelopers' habits and best-practices \"as-is\":\n\n\nSteve: I recommend to keep change sets  small.\nIdeally, one bug, or concise feature per change set.\nRules are made to be broken, but there are many advantages: easier to review, easier to back out, easier for someone to take or leave.\n\n\n I agree about this in terms of upstream repository, that an atomary\n\n change to close a bug is a good thing. However, does it mean that\n\n during local development I should not \nhg commit\n successful changes\n\n to my code before I go on (as I often do, leading to several commits\n\n per day)? Or are we talking about different things? =)\n\nYou could do that, but I find it is much simpler to stick to the \none repo, one changeset, one bug, one commit, one push\n rule.  \nUsually the checkin workflow for me goes like this:\n\nDone with coding and testing...\nUpdate repo with latest changes from parent, if any ( ie hg pull; hg update)\nMerge if necessary (relatively rare)\nhg commit\nhg push\nAt this point the repo is ready for some other work item.\n\n\nAnyway, publishing a webrev and reworking on comments, and making\n\nnew webrevs, would still likely produce several local commits.\n\n\nFrom what I gathered around the docs, it is possible to diff your\n\nrepo against the upstream one, and produce a single changeset\n\nwhich contains the final result of your work so far.\n\nChange sets are produced by \nhg commit\n. These can be pushed (easily) to an upstream repo, and they remain change sets there as well.\n\nYou can produce a text diff rendering of any change set, e.g.:\n\nhg diff -c xxxxx\n(xxxxx being the change set number).\nAlso, see \nhg export\n and \nhg import\n. \n\n\nAlso most docs value the \nlocal commit history\n (commit comments)\n\nas being potentially useful to the developer and to the general\n\ncommunity after the upstream merge. How do these comments get\n\npassed up and survive eventual destruction of the child repo\n\n(if they do)?\n\nYes, comments are important, they make it easier for someone to discern what\nthe change set is about.  Comments added with -m \n..comment...\n at commit time\n(or via a text editor, if you are so configured) are associated with the change\nset, and travel with the change set as it gets pushed, exported and imported.\n\nAgain, once you commit and push the change set upstream, the comment goes with\nit, so it does not matter if you subsequently destroy the repo where you did\nthe work.", 
            "title": "Working Multiple Bugs"
        }, 
        {
            "location": "/developers/multibug/#working-on-multiple-bugs-at-once", 
            "text": "By  Jim Klimov", 
            "title": "Working on multiple bugs at once"
        }, 
        {
            "location": "/developers/multibug/#introduction", 
            "text": "It is not rare to have a contributor working on several disparate sub-projects\nwhich are of interest to him, such as fixing different bugs or updating\ndocumentation man-pages, in parallel. This means that the developer has been\nassigned several bug/RFE IDs in the common bugtracker and prepares changes in\nhis local development environment in order to propose a webrev for public\nreview and ultimately request-to-integrate his or her fixes. A \"newbie\"\ncontributor might take on a number of bite-sized quests that others postponed\nindefinitely, just to get the hang of the development environment.  The tricky part here is that a developer can be working on small bugs, and the\nlatency of review/RTI process would cause him to idle around between singular\nquests and lose interest, while he could go on a new task right after posting\none for review. However, working on several tasks in one workspace is also\npotentially problematic \u2013 the webrev would consolidate all changes (from works\non different bugs), while the central (official) repository policies highly\nprefer atomic updates \u2013 \"one changeset = one bug\", or close to that.  Source-code management systems have a number of solutions to this problem.\nWhere other systems propose working in branches of code, which would ultimately\nbe merged, most if not all illumos developers (of those who responded to my\ncall for real-life info) prefer to clone complete Mercurial repositories (one\nper bug), spawn separate workspaces and develop there. The rest of this page\nshall discuss several practical approaches to this.  There is also some controversy about using Mercurial Queues to track small\nfixes:   Gordon: If you have a bunch of small fixes underway simultaneously, you might consider using \"hg mq\" (hg qpush, hg qpop, ...):  http://mercurial.selenic.com/wiki/MqExtension \nDan: I find mq causes more problems than it solves but that's just me.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/multibug/#three-tiered-approach", 
            "text": "In this approach the developer maintains a \"clean\" replica of the official\nrepository (\"illumos-clone\" as a hg-clone of official illumos-gate in examples\nbelow), and his development workspaces (\"ws1 .. wsN\" in examples below) are\ninstantiated in clones of this replica. No actual development occurs in\nillumos-clone workspace.  Whenever work on a new task starts, the developer updates his illumos-clone to\ncurrent source code, and creates a clone of it (several methods are available\nand discussed below) named like ws1 or illumos-bug1234.  For people who understand pictures better, here is an illustration of proposed\nrepository cloning and tiering architectures:   After some development and testing, the developer has committed his changes to\nthe ws1 repository (with the comment like \"1234 Bug description one-liner\"). He\nshould then pull and update the illumos-clone repository from official sources\nand update the ws1 repository from illumos-clone, and merge any changes. This\nway the ws1 repository now contains his work as if it was done against the\ncurrent revision of the \"official\" public source codes. Then the developer\nprepares a webrev and provides it for public review.   Bob: While you were patiently waiting, other changes were put into upstream  Mercurial.  These changes have to be pulled and merged (to tip) before Mecurial\nwould allow you to push (assuming you were authorized).  If files you edited\nhave been updated over time, it would be polite to pull, merge with those\nchanges, re-test, and if they are significant to your work, re-request a\nreview.  Mercurial only allows you to push if there is just one head (tip). If  changes come in via a pull after you have done a commit, then there will be two\nheads, which need to be merged.  Use 'hg heads' to see the heads.   For repositories where the user has the push privileges (such as a forked\nrepository on the BitBucket), the developer can push his tested changes from\nws1 repository to illumos-clone repository and then to his own repository fork\non the public hosting service. This would allow other developers to look into\ncompleted code for review, or to pull his changes into their systems (such as\nwhen the integration into \"official\" repository occurs).   Bob: If you do \"hg paths\" in illumos-clone it will report that it points to the\nofficial master.  If you do the same in \"ws1\" it will report that it points to\nlocal \"illumos-clone\".  If your approved changeset is in \"ws1\" then you would first do \"hg push\" in\n\"ws1\",  then change to \"illumos-clone\" (which now contains the changeset) and\ndo \"hg push\" to push to the official master.  Of course merging is likely\nrequired before you can push.  The necessary pulls are inverse of the push \u2013 so if you want to get new\nupstream changesets into \"ws1\", you would first do an \"hg pull\" in\n\"illumos-clone\" and then in \"ws1\".  Changes may be pushed to something other than the default upstream repository\nby specifying the respository URL when you do the push, or by editing .hg/hgrc\ninside the repository base directory and changing the \"default\" definition to\nthe new path.  This means that you could push directly from \"ws1\" to the\nofficial master provided that any pending upstream changesets have been merged\nas a merge changeset.   This pattern applies not only to illumos-gate, but also to other related\nillumos/OpenIndiana subprojects hosted in Mercurial repositories. Keeping a\ntier of the golden repository allows you to save some internet traffic (when\npropagating changesets from upstream to your numerous workspaces) and to\nquickly instantiate clones of the current public source code (again, saving on\ntraffic \u2013 actually, being independent of network connectivity).   Dan: I actually maintain a clone of illumos-gate locally (illumos-clone), and\nmy works in progress are children of illumos-clone. It does eat disk space, but\ncombined with sensible build practices (e.g. not doing full nightly builds\nuntil you're very close to integration) it's not all that bad.  Don't forget about building modules when you only need modules, as I mention\nhere:  http://kebesays.blogspot.com/2011/03/for-illumos-newbies-on-developing-small.html   Some developers use short-lived repos for one task, others instead prefer to\nspawn a few workspaces, and reuse them for new projects after the current one\nhas been committed upstream:   Steve: after my changes are pushed, I can just sync it up with its parent and I\nam ready to work on another change-set in this repo (hg pull; hg update).  I do\nuse mv to rename repos, so that I have some visual reminder of what that repo\nis currently used for.\nDan: Once a child's diffs appear in illumos-gate, the child gets removed.", 
            "title": "Three-tiered approach"
        }, 
        {
            "location": "/developers/multibug/#general-setup", 
            "text": "General build-system preparation is as outlined in How To Build illumos,\nhowever there is some difference in source-code repository organization and\nnaming. Like in that tutorial, the repositories are assumed to be hosted under\n/code directory. Depending on the adopted pattern, each repository can be an\nindividual ZFS dataset, or they can be sub-directories within one filesystem.  Elaborate on dataset setup, perhaps copy from main tutorial.  There are at least two variations, depending on the technology you choose to\nuse. You can clone repositories with tools built into the SCM, in our case \u2013 by\nusing the \"hg clone\" command. Alternately you can use ZFS clones and rewrite\nthe pointer to parent repository in the cloned child repo. Also the\nrepositories can be just copied as directories with files, but this is likely\nto be the most space-consuming option.", 
            "title": "General setup"
        }, 
        {
            "location": "/developers/multibug/#zfs-cloning-prepare-dataset-hierarchy", 
            "text": "Note  These examples put the repository into rpool. You're welcome to use another ZFS pool if available on your system.   To follow this route, each your repository must reside in its individual\ndedicated dataset which was created and prepared with commands like these (see\nHow To Build illumos for more details):  sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev\nsudo zfs create -o sync=disabled rpool/export/home/illumos-dev/code/illumos-clone", 
            "title": "zfs-cloning \u2013 Prepare dataset hierarchy"
        }, 
        {
            "location": "/developers/multibug/#hg-cloning-or-file-copying", 
            "text": "I was told that hg clone would try to use hardlinks to save space and time, so I guess keeping the masters and clones in one filesystem (accessible under /code below) is highly recommended.   Bob: Look in the hidden .hg directory for the actual repository. For local\nclones, Hg can use hard links to refer to the same repository files. The hard\nlink is broken if the file is to be updated.\nZFS's clone can do a bit better because Mercurial only appends to repository\nfiles so ZFS-cloned blocks will remain de-duplicated unless they are a short\ntail block which was updated.   You are still welcome to use a ZFS dataset dedicated to holding all the\nrepositories:  sudo zfs create -o compression=lzjb -o atime=off rpool/export/home/illumos-dev\nsudo zfs create rpool/export/home/illumos-dev/code\nsudo ln -s ./export/home/illumos-dev/code /\nsudo chown -R $USER /export/home/illumos-dev", 
            "title": "hg-cloning or file-copying"
        }, 
        {
            "location": "/developers/multibug/#initialize-the-local-master-repository", 
            "text": "The repository directory may exist, but must be empty if it does.  cd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate ./illumos-clone   Never touch illumos-clone except to pull changes from upstream   Mercurial allows to rename repositories as suits you today with filesystem\nutilities (this may be more useful on your child repositories though \u2013 i.e.\nrename them according to your bug-number-du-jour), so creation of your golden\nrepository could instead be done like this:  cd /code\nhg clone ssh://anonhg@hg.illumos.org/illumos-gate\nmv illumos-gate illumos-clone", 
            "title": "Initialize the local master repository"
        }, 
        {
            "location": "/developers/multibug/#update-the-local-master-repository", 
            "text": "cd /code/illumos-clone\nhg pull -u  Since there are no changes of your own in this repo, merging should be trivial and complete automatically.", 
            "title": "Update the local master repository"
        }, 
        {
            "location": "/developers/multibug/#clone-the-local-master-into-a-child-repository-for-work", 
            "text": "There are at least two variations, depending on the technology you choose to use. You can clone repositories with tools built into the SCM, in our case \u2013 by using the \"hg clone\" command. Alternately you can use ZFS clones and rewrite the default pointer to parent repository in the cloned child repo.   Bob: In addition to \"default\" there is \"default-push\" which specifies the\ndefault URL to push to. Besides the apparent \"exotic\" setup there is also the\nmundane approach (which I use) which pulls updates from the http:// appearance\nof a server and pushes to the ssh:// appearance of the same server. This\nresults in faster clones/updates while obtaining the secure SSH authentication\nwhen pushing.   Also the repositories can be just copied as directories with files, but this is\nlikely to be the most space-consuming option.  Examples below use the bugID-based naming convention for child repositories and\ntheir workspaces. Some developers instead prefer to spawn a few\nstatically-named workspaces (\"ws1 .. wsN\"), and reuse them for new projects\nafter the current one has been committed upstream (so the repo with this\nauthor's changes is identical to upstream).", 
            "title": "Clone the local master into a child repository for work"
        }, 
        {
            "location": "/developers/multibug/#zfs-cloning", 
            "text": "Update the local master repository (see above) and create a uniquely named ZFS\nsnapshot of its dataset, and then clone it, for example:  zfs snapshot rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006\nzfs clone rpool/export/home/illumos-dev/code/illumos-clone@20120503-2006 rpool/export/home/illumos-dev/code/illumos-bug1234  Now you'll have to modify the clone's pointer to parent repository (so it's\nlocal, not Internet as was for the golden image). Edit\n/code/illumos-bug1234/.hg/hgrc file which may look like this:  [paths]\ndefault = ssh://anonhg@hg.illumos.org/illumos-gate  You should replace the default path with the local pathname to the local master repository, like this:  [paths]\ndefault = /code/illumos-clone\nhg-cloning  Update the local master repository (see above) and create a Mercurial clone:  cd /code\nhg clone illumos-clone illumos-bug1234  This takes care of the child's parent relationships.", 
            "title": "zfs-cloning"
        }, 
        {
            "location": "/developers/multibug/#file-copy-cloning", 
            "text": "This is the least recommended method. Still, you might have your reasons...  Update the local master repository (see above) and copy the whole repo directory:  cd /code\ncp -pr illumos-clone illumos-bug1234  You might alternatively use rsync, gtar, cpio and such.", 
            "title": "file copy cloning"
        }, 
        {
            "location": "/developers/multibug/#work-in-the-child-copy", 
            "text": "cd /code/illumos-bug1234\n### edit files\n\nhg add  new files \nhg commit -m  1234 Bug description one-liner \nwebrev...\n### (example webrev command-line from real-life is appreciated)\n### repeat if more work on this bug is needed   Dan: If you've just the one set of changes, \"webrev\" all by itself is sufficient. It'll create /code/illumos-bug1234/webrev/. You can then scp/mv/ln/etc. that webrev/ directory into an HTTP-reachable directory somewhere.", 
            "title": "Work in the child copy"
        }, 
        {
            "location": "/developers/multibug/#after-some-work-in-the-child-workspace-you-need-to-pull-changes-from-upstream", 
            "text": "In particular, you must do this before completing your work to make the review or integration.  ### Update master repo\ncd /code/illumos-clone\nhg pull -u\n### Now illumos-clone is up to date.\n\n### For each child like  illumos-bug1234 :\ncd /code/illumos-bug1234\n### Make sure I ve committed any outstanding diffs\nhg pull -u ; hg merge\n### Resolve conflicts if any\nhg commit -m blah\nhg recommit      ###  edit push string to remove crap", 
            "title": "After some work in the child workspace, you need to pull changes from upstream..."
        }, 
        {
            "location": "/developers/multibug/#publish-your-work", 
            "text": "Developers' habits and best-practices \"as-is\":  Steve: I recommend to keep change sets  small.\nIdeally, one bug, or concise feature per change set.\nRules are made to be broken, but there are many advantages: easier to review, easier to back out, easier for someone to take or leave.  I agree about this in terms of upstream repository, that an atomary  change to close a bug is a good thing. However, does it mean that  during local development I should not  hg commit  successful changes  to my code before I go on (as I often do, leading to several commits  per day)? Or are we talking about different things? =)\n\nYou could do that, but I find it is much simpler to stick to the  one repo, one changeset, one bug, one commit, one push  rule.  \nUsually the checkin workflow for me goes like this:\n\nDone with coding and testing...\nUpdate repo with latest changes from parent, if any ( ie hg pull; hg update)\nMerge if necessary (relatively rare)\nhg commit\nhg push\nAt this point the repo is ready for some other work item. Anyway, publishing a webrev and reworking on comments, and making new webrevs, would still likely produce several local commits. From what I gathered around the docs, it is possible to diff your repo against the upstream one, and produce a single changeset which contains the final result of your work so far.\n\nChange sets are produced by  hg commit . These can be pushed (easily) to an upstream repo, and they remain change sets there as well.\n\nYou can produce a text diff rendering of any change set, e.g.:\n\nhg diff -c xxxxx\n(xxxxx being the change set number).\nAlso, see  hg export  and  hg import .  Also most docs value the  local commit history  (commit comments) as being potentially useful to the developer and to the general community after the upstream merge. How do these comments get passed up and survive eventual destruction of the child repo (if they do)?\n\nYes, comments are important, they make it easier for someone to discern what\nthe change set is about.  Comments added with -m  ..comment...  at commit time\n(or via a text editor, if you are so configured) are associated with the change\nset, and travel with the change set as it gets pushed, exported and imported.\n\nAgain, once you commit and push the change set upstream, the comment goes with\nit, so it does not matter if you subsequently destroy the repo where you did\nthe work.", 
            "title": "Publish your work"
        }, 
        {
            "location": "/developers/studio/", 
            "text": "Building illumos with Sun Studio\n\n\n\n\nHere Be Dragons\n\n\nBuilding illumos with Sun Studio is not recommended.\n\n\nIf you \ndo\n wish to build with Sun Studio, you need specifically patched\nversions of both Studio 12 (used to compile) and 12.1 (used for lint) to get\nconsistent results. These are no longer distributed by Oracle and can not be\nlegally found in the open Internet. If you do not have access to these\nversions, skip this section and use GCC.\n\n\n\n\nIntroduction\n\n\nillumos-gate does not build correctly with Sun Studio versions released after\n12.0. Reportedly using a newer version of the compiler will produce a system\ncontaining grave, data-corrupting bugs.  Patched compilers were previously\navailable from Sun Microsystems, however not licensed for redistribution. After\na recent Oracle site reorganization, the necessary compilers are no longer\navailable.\n\n\nRequirements\n\n\nIf you have the patched versions of both Sun Studio 12 and 12.1, they should be\ninstalled in \n/opt/SUNWspro\n (Studio 12), and \n/opt/SUNWspro/sunstudio12.1\n\n(Studio 12.1), respectively. Pay attention, the Studio 12.1 location is\ndifferent from how it was in OpenSolaris, i.e. it's not \n/opt/sunstudio12.1\n.\n\n\nThe meta-procedure for cleaning up optionally prepackaged Sun Studio\ninstallations and installing the ones you require for building illumos\n(assuming your stashed Sun Studio 12 distribution archives are now pre-copied\nto /tmp) is as follows:\n\n\nsudo pkg uninstall \\\n    pkg:/developer/sunstudio12u1* \\\n    pkg:/metapackages/build-essential\n\nsudo mkdir -p /opt/SUNWspro\ncd /opt/SUNWspro\nsudo tar xjf /tmp/sunstudio12-patched-ii-2009Sep-sol-x86.tar.bz2\nsudo tar xzf /tmp/sunstudio12u1-patched-ii-2010Feb-sol-x86.tar.gz\n\n\n\n\nThe first archive contains the product component sub-directories directly at\nthe top-level, and the second has similar sub-directories under the top-level\nsunstudio12.1 as its children. Thus you receive the structure outlined above.\n\n\nYou can check if you have the correct versions installed as follows. All of the\nfollowing tests must succeed and return these specific product/patch versions:\n\n\n$ /opt/SUNWspro/bin/cc -V\ncc: Sun C 5.9 SunOS_i386 Patch 124868-10 2009/04/30\nusage: cc ...\n\n$ /opt/SUNWspro/sunstudio12.1/bin/cc -V\ncc: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03\nusage: cc ...\n\n$ /opt/SUNWspro/sunstudio12.1/bin/lint -V\nlint: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03\nusage: lint ...\n\n\n\n\nYou must then adjust your \nnightly(1)\n environment file (i.e. by adding a line in \nillumos.sh\n) to specify that Studio should be used as the default compiler, by adding:\n\n\nexport __SUNC=\n;", 
            "title": "Building with Sun Studio"
        }, 
        {
            "location": "/developers/studio/#building-illumos-with-sun-studio", 
            "text": "Here Be Dragons  Building illumos with Sun Studio is not recommended.  If you  do  wish to build with Sun Studio, you need specifically patched\nversions of both Studio 12 (used to compile) and 12.1 (used for lint) to get\nconsistent results. These are no longer distributed by Oracle and can not be\nlegally found in the open Internet. If you do not have access to these\nversions, skip this section and use GCC.", 
            "title": "Building illumos with Sun Studio"
        }, 
        {
            "location": "/developers/studio/#introduction", 
            "text": "illumos-gate does not build correctly with Sun Studio versions released after\n12.0. Reportedly using a newer version of the compiler will produce a system\ncontaining grave, data-corrupting bugs.  Patched compilers were previously\navailable from Sun Microsystems, however not licensed for redistribution. After\na recent Oracle site reorganization, the necessary compilers are no longer\navailable.", 
            "title": "Introduction"
        }, 
        {
            "location": "/developers/studio/#requirements", 
            "text": "If you have the patched versions of both Sun Studio 12 and 12.1, they should be\ninstalled in  /opt/SUNWspro  (Studio 12), and  /opt/SUNWspro/sunstudio12.1 \n(Studio 12.1), respectively. Pay attention, the Studio 12.1 location is\ndifferent from how it was in OpenSolaris, i.e. it's not  /opt/sunstudio12.1 .  The meta-procedure for cleaning up optionally prepackaged Sun Studio\ninstallations and installing the ones you require for building illumos\n(assuming your stashed Sun Studio 12 distribution archives are now pre-copied\nto /tmp) is as follows:  sudo pkg uninstall \\\n    pkg:/developer/sunstudio12u1* \\\n    pkg:/metapackages/build-essential\n\nsudo mkdir -p /opt/SUNWspro\ncd /opt/SUNWspro\nsudo tar xjf /tmp/sunstudio12-patched-ii-2009Sep-sol-x86.tar.bz2\nsudo tar xzf /tmp/sunstudio12u1-patched-ii-2010Feb-sol-x86.tar.gz  The first archive contains the product component sub-directories directly at\nthe top-level, and the second has similar sub-directories under the top-level\nsunstudio12.1 as its children. Thus you receive the structure outlined above.  You can check if you have the correct versions installed as follows. All of the\nfollowing tests must succeed and return these specific product/patch versions:  $ /opt/SUNWspro/bin/cc -V\ncc: Sun C 5.9 SunOS_i386 Patch 124868-10 2009/04/30\nusage: cc ...\n\n$ /opt/SUNWspro/sunstudio12.1/bin/cc -V\ncc: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03\nusage: cc ...\n\n$ /opt/SUNWspro/sunstudio12.1/bin/lint -V\nlint: Sun C 5.10 SunOS_i386 Patch 142363-03 2009/12/03\nusage: lint ...  You must then adjust your  nightly(1)  environment file (i.e. by adding a line in  illumos.sh ) to specify that Studio should be used as the default compiler, by adding:  export __SUNC= ;", 
            "title": "Requirements"
        }, 
        {
            "location": "/developers/comp-webrev/", 
            "text": "webrev(1)\n lets you create a comparison of files changed by development. Its\noutput can contain the same changeset in .patch, .ps, .pdf format along with\nindex.html file and other acompanying resources.\n\n\nThe tools lives in \n/opt/onbld/bin\n directory. Be sure to install packages from\nHow To Build illumos page. Also, be sure to have \n/opt/onbld/bin\n in your\n\nPATH\n.  You can check it by running:\n\n\necho $PATH\n\n\n\n\nYou should see something along the lines of:\n\n\necho $PATH \n/opt/gcc/4.4.4/bin/:/usr/gnu/bin:/usr/bin:/usr/sbin:/sbin:/opt/onbld/bin\n\n\n\n\nYour output may vary, the important part is \n/opt/onbld/bin\n\n\nIn the directory containing your build of illumos create a file listing your\nchanged files. For \nissue 6168: strlcpy() does not return s1\n, two files were\nedited:\n\n\nusr/src/man/man9f/string.9f\nusr/src/man/man3c/string.3c\n\n\n\n\nThe file list (called by me file.list) consists of:\n\n\nCODEMGR_WS=/code/illumos-gates-6168 \nCODEMGR_PARENT=/code/illumos-gates \n\nusr/src/man/man9f/string.9f \nusr/src/man/man3c/string.3c\n\n\n\n\nFirst two lines define top level paths to directory containing modified source\nand top level directory containing original source.\n\n\nLatter two are files, relative to the top-level directories defined above,\nchanged during development. In this case those are only two manpages, in case\nof larger development it may be tens of files.\n\n\nFrom within \nCODEMGR_WS\n call \nwebrev(1)\n:\n\n\ncd /code/illumos-gate-6168/\n./webrev -o webrev6168 file.list\n\n\n\n\nThis should produce directory \nwebrev-6168\n within your current working\ndirectory.\n\n\nYou can then upload this directory to your chosen website and send link to\nillumos developers for analysis.\n\n\nThe example tree of a generated webrev:\n\n\nwebrev-6168$ tree \n. \n\u251c\u2500\u2500 ancnav.html \n\u251c\u2500\u2500 ancnav.js \n\u251c\u2500\u2500 file.list \n\u251c\u2500\u2500 index.html \n\u251c\u2500\u2500 raw_files \n\u2502   \u251c\u2500\u2500 new \n\u2502   \u2502   \u2514\u2500\u2500 usr \n\u2502   \u2502       \u2514\u2500\u2500 src \n\u2502   \u2502           \u2514\u2500\u2500 man \n\u2502   \u2502               \u251c\u2500\u2500 man3c \n\u2502   \u2502               \u2502   \u251c\u2500\u2500 man.css \n\u2502   \u2502               \u2502   \u251c\u2500\u2500 string.3c \n\u2502   \u2502               \u2502   \u251c\u2500\u2500 string.3c.man.html \n\u2502   \u2502               \u2502   \u251c\u2500\u2500 string.3c.man.raw \n\u2502   \u2502               \u2502   \u2514\u2500\u2500 string.3c.man.txt.html \n\u2502   \u2502               \u2514\u2500\u2500 man9f \n\u2502   \u2502                   \u251c\u2500\u2500 man.css \n\u2502   \u2502                   \u251c\u2500\u2500 string.9f \n\u2502   \u2502                   \u251c\u2500\u2500 string.9f.man.html \n\u2502   \u2502                   \u251c\u2500\u2500 string.9f.man.raw \n\u2502   \u2502                   \u2514\u2500\u2500 string.9f.man.txt.html \n\u2502   \u2514\u2500\u2500 old \n\u2502       \u2514\u2500\u2500 usr \n\u2502           \u2514\u2500\u2500 src \n\u2502               \u2514\u2500\u2500 man \n\u2502                   \u251c\u2500\u2500 man3c \n\u2502                   \u2502   \u2514\u2500\u2500 string.3c \n\u2502                   \u2514\u2500\u2500 man9f \n\u2502                       \u2514\u2500\u2500 string.9f \n\u251c\u2500\u2500 TotalChangedLines \n\u251c\u2500\u2500 usr \n\u2502   \u2514\u2500\u2500 src \n\u2502       \u2514\u2500\u2500 man \n\u2502           \u251c\u2500\u2500 man3c \n\u2502           \u2502   \u251c\u2500\u2500 string.3c-.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.cdiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.frames.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.lhs.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.cdiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.frames.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.lhs.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.rhs.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.sdiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.udiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.man.wdiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.patch \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.rhs.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.sdiff.html \n\u2502           \u2502   \u251c\u2500\u2500 string.3c.udiff.html \n\u2502           \u2502   \u2514\u2500\u2500 string.3c.wdiff.html \n\u2502           \u2514\u2500\u2500 man9f \n\u2502               \u251c\u2500\u2500 string.9f-.html \n\u2502               \u251c\u2500\u2500 string.9f.cdiff.html \n\u2502               \u251c\u2500\u2500 string.9f.frames.html \n\u2502               \u251c\u2500\u2500 string.9f.html \n\u2502               \u251c\u2500\u2500 string.9f.lhs.html \n\u2502               \u251c\u2500\u2500 string.9f.man.cdiff.html \n\u2502               \u251c\u2500\u2500 string.9f.man.frames.html \n\u2502               \u251c\u2500\u2500 string.9f.man.lhs.html \n\u2502               \u251c\u2500\u2500 string.9f.man.rhs.html \n\u2502               \u251c\u2500\u2500 string.9f.man.sdiff.html \n\u2502               \u251c\u2500\u2500 string.9f.man.udiff.html \n\u2502               \u251c\u2500\u2500 string.9f.man.wdiff.html \n\u2502               \u251c\u2500\u2500 string.9f.patch \n\u2502               \u251c\u2500\u2500 string.9f.rhs.html \n\u2502               \u251c\u2500\u2500 string.9f.sdiff.html \n\u2502               \u251c\u2500\u2500 string.9f.udiff.html \n\u2502               \u2514\u2500\u2500 string.9f.wdiff.html \n\u251c\u2500\u2500 webrev-6168.patch \n\u251c\u2500\u2500 webrev-6168.pdf \n\u2514\u2500\u2500 webrev-6168.ps", 
            "title": "Comparing with webrev"
        }, 
        {
            "location": "/contributing/", 
            "text": "Requires Review\n\n\nThis page contains incomplete content and needs to be reviewed.\n\n\n\n\nContributing to illumos\n\n\n\n\nRTI Process\n\n\nThe Request To Integrate process is also documented in the \nillumos\nDeveloper's Guide\n.\n\n\n\n\nFinding An Area To Contribute To\n\n\nIf you're not sure what you want to work on, you can start by looking at our\n\nlist of bite-site bugs\n which\nshould be easy for newcomers to pick up. You can also look at the entire list\nof issues and see if any with status \"New\" fit your skill set.\n\n\nIf you're looking for a longer-term project, we have a \nlist of ideas for new\nprojects\n for different\nlevels skill and expertise. Alternatively you may look through the \nmailing\nlists\n for suggestions for improvements.\n\n\nIf you are adding a new feature or addressing a problem not currently on our\n\nlist of issues\n, please\n\ncreate a new issue\n\ndescribing it. You need to be signed in to use the issue tracker.\n\n\nBefore you start working on the code, it is advisable to first ask on either\nthe \ndeveloper mailing list\n or the \nIRC\nchannel\n for advice on the particular area you're\ninterested in.\n\n\nWriting The Code\n\n\nOur guide to building illumos covers setting up a build environment and getting\nthe source. You should try a build once or twice to get accustomed to the build\nsystem and source tree layout.\n\n\nAn unparalleled resource for understanding the operating system is the the\nbook, \nSolaris Internals: Solaris 10 and OpenSolaris Kernel\nArchitecture\n\nand its companion wiki,\n\nsolarisinternals.com\n.\n\n\nWe have an \nOpenGrok source browser and search engine\n\nwhich is very useful for development.\n\n\nFeel free to ask the \ndeveloper mailing list\n or the \nIRC\nchannel\n for help.\n\n\nWe encourage you to \"commit early, commit often\" as you work, using your\npersonal clone of illumos-gate.\n\n\nTesting\n\n\nThe illumos gate is a core technology leveraged by several commercial vendors\nthat rely on it to be a stable, well-tested platform. As such, integration into\nthe core illumos-gate requires both code review by relevant parties and\nreasonable testing to ensure that the changes are stable enough for others to\nrely upon.\n\n\nYour \nRTI advocate\n is the ultimate arbiter of\nwhether your testing is sufficient.\n\n\nThe scope of required testing depends on the nature of the change and a\ndiscussion with your advocate, but in general advocates adopt a \"shrink to fit\"\nmentality. Here are some examples of reasonable testing based on the collective\nexperience of the current RTI advocates. Your advocate may always ask for more\ntesting depending on the nature of the change.\n\n\nAll changes\n\n\nMake sure you test the results of the illumos-gate build with only your\nchangesets applied. To do this, you will need to \nbuild the illumos\ncode\n. It is generally insufficient to test the build\nresults of a downstream fork that contains other non-trivial changes as there\nmay be implicit dependencies that break other consumers of the core illumos\ngate.\n\n\nIf your code has been running in production in another distro or has gone\nthrough other testing downstream, please include that information, though by\nitself may be insufficient to constitute sufficient testing.\n\n\nChanging a single program\n\n\nIf your change affects only a single binary, it is likely sufficient to copy\nthis binary to a downstream distro of reasonable similarity and running your\ntests there. These tests should cover enough functionality to demonstrate the\ncorrectness of your changes, and could involve stress tests in addition to\nfunctional tests depending on the nature of the change. This assumes that the\nbinary has a trivial set of library dependencies that are reasonably standard\nacross distros.\n\n\nChanging the implementation of a library\n\n\nIf your change affects the implementation of a library without changing\nexternal interfaces, you should run tests against a reasonable subset of\nprograms that exercise the code in question. As with a single binary, it is\nlikely sufficient to copy this library to a distro which has identical\ninterfaces, though for some core libraries (most notably libc), you will\nprobably need to bootstrap a complete distro given the challenges with swapping\nsuch libraries on a running system, though this depends on the distro in\nquestion.\n\n\nChanging the implementation of a driver or adding a new driver\n\n\nIf your change affects a single driver, you may or may not be able to get away\nwith copying over that driver to an alternate distro. On one hand, the kernel\ninterfaces are likely identical, but if the core implementation of that distro\nhas diverged significantly from illumos-gate, you may be asked to bootstrap a\ncomplete environment from your illumos build. Driver tests should demonstrate a\nreasonable amount of functional and stress testing on appropriate hardware.\n\n\nChanging the core kernel or multiple interconnected binaries\n\n\nIf you are making a change to the core kernel, or have a series of changes\nacross a number of libraries, commands, or kernel components that need to be\ntested as a cohesive whole, you should bootstrap a usable environment from your\nillumos-gate build that is sufficient to demonstrate the correctness of your\nchanges. Exactly what \"bootstrapping\" means is dependent on the distro, but the\ngoal is to run the entirety of the your illumos-gate build (not a combination\nof downstream and upstream illumos-gate bits) in a testable environment. Not\nall distros are capable of bootstrapping a bare illumos-gate build - check the\n\ndistribution list\n and ask on the \ndeveloper\nlist\n if you are unsure how to do this. Running \nonu\n on\nOpenIndiana or building an illumos-live distribution are two such ways to\ndemonstrate this testing that have been used in the past, but they are not the\nonly ones.\n\n\nThe scope of testing here will likely be more substantial, and should focus on\nstability of the system as well as the functionality of the changed\ncomponent(s).\n\n\nAs always, contact your advocate (or the advocates list if you don't yet have\nsomeone in mind) if you have more questions about what constitutes sufficient\ntesting for a particular change.\n\n\nCode Review\n\n\nAt least one person (other than you, of course) should review your changes.\nThese reviewers should have demonstrated expertise in the area in question or\nare trusted as knowledgeable by the illumos community at large. If you work for\na commercial entity, it is best to include reviewers from outside your company,\nbut this is not required.\n\n\nYour \nRTI advocate\n is the ultimate arbiter of\nwhether your review is sufficient.\n\n\nIf you don't know how to find adequate review, you may post the changes to the\ndeveloper mailing list to ask for feedback, or ask the RTI advocates if there\nis anyone in particular they'd like to see review the code.\n\n\nFor larger changes, please link to a resource on the web, instead of attaching\na patch file. You may use a webrev (see below), a private hgweb or gitweb or\nonline services like Bitbucket, Github, or Gitorious to share your changes.\nRemember to mention the issue ID in the email - if one does not yet exist,\nplease create one!\n\n\nGenerate a key pair\n\n\nIf you don't already have an SSH public key in your account in the \nbug\ntracker\n, generate a key pair like this on your\nmachine (usually as the building/development user account):\n\n\n$ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/USER/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/USER/.ssh/id_rsa.\nYour public key has been saved in /home/USER/.ssh/id_rsa.pub.\n$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3...\n\n\n\n\nThen paste your public key into the box on your account settings page and save\nthe changes.  Wait for a while for the change to propagate to the webrev\nserver.  \n\n\nNote if you leave your passphrase blank you will be able to both publish and\ndelete your webrev's as per the latest instructions on the main page at\n\nhttp://cr.illumos.org/\n (this both creates and uploads your webrev - see\n\"Creating and Uploaded in one step\" ) however if you use a passphrase you will\nnot be able to delete your webrev's as only publish will ask you for your\npassphrase.\n\n\nCreating a webrev\n\n\nThe \nwebrev(1)\n tool is an easy way to show\nother people changes you have made.  It presents changes (including commit\nmessages) in multiple formats viewable from a web browser. If you have\ninstalled an illumos build, you can run webrev like this:\n\n\n/opt/onbld/bin/webrev -O -o illumos-123-webrev\n\n\n\n\nElse, from your workspace if you have built the tools:\n\n\nksh93 bldenv.sh illumos.sh -c \nwebrev -O -o illumos-123-webrev\n\n\n\n\n\nOr to use webrev provided by installed ON build tools on a non-illumos system:\n\n\n/opt/onbld/bin/webrev -I usr/src/tools/scripts/its.reg -O -o illumos-123-webrev\n\n\n\n\n\nNote: The reason for the \n-I\n option is to provide links to our issue tracker. If you see\n\n\n*** failed to import extension hgext.cdm from .../usr/src/tools/proto/root_i386-nd/opt/onbld/lib/python2.6/onbld/hgext/cdm.py: cannot import name WorkList, \n\n\n\n\ntry running \nwebrev\n from the workspace instead.\n\n\nUpload the directory somewhere people can access it from the web, such as a\npersonal web site.  You may also use the free webrev hosting provided by the\nillumos project as described in the next section.\n\n\nCreating and uploading a webrev in one step\n\n\nTo publish a webrev, you'll first need to make sure your SSH key is up-to-date\nin the illumos \nbug tracker\n.  Refer to Generate a\nkey pair above for more information. Please note that it takes a couple of\nminutes for your added (or updated) key to get copied to the webrev server.\n\n\nOnce you have a key uploaded, you can use \nwebrev(1)\n to generate and upload\nyour webrev, all at once, thus:\n\n\nwebrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -U\n\n\n\n\nYou can delete a previously uploaded webrev thus:\n\n\nwebrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -D\n\n\n\n\nNote that \n$SOME_NAME\n (in the examples above) is an arbitrary string that will\nform part of the URL to your webrev. This is not your user name but rather a\ndescriptive name of the issue and/or fix. Note, also, that you should always\nuse \nwebrev@\n in the rsync URL, not your bug tracker username.\n\n\nOnce uploaded, your webrev will be in your directory here:\n\nhttp://cr.illumos.org/~webrev\n for example assuming your login name is \njondoe\n\nand your \n$SOME_NAME\n is 1023 the final webrev will be located as \n$SOME_NAME\n\ne.g. \n1023\n under your directory \nhttp://cr.illumos.org/~webrev/jondoe/\n or with a\ncomplete path of \nhttp://cr.illumos.org/~webrev/jondoe/1023\n.\n\n\nReview Board\n\n\nFor reviews you could also use the illumos' Review Board instance at\n\nhttp://illumos.org/rb\n. You should be able to log in with your existing illumos\nbug tracker username and password.\n\n\nEnsuring adequate review\n\n\nIt is up to you as a contributor to gather reasonable review to satisfy your\nRTI advocate that the code is correct and of high quality. Exactly what this\nmeans will vary based on the nature and scope of the change, but here are some\nguidelines that will give the advocates confidence in your changes. As always,\ntrust your avocate and apply \"shrink to fit\".\n\n\n\n\nThere should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions).\n\n\nFor non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community.\n\n\nChanges with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented.\n\n\nWhen there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed.\n\n\n\n\nWhen in doubt, more review is generally better, and you can always ask the advocates for guidance.\n\n\nSubmitting A Patch\n\n\nWhen you have adequate code review and test results for your proposed change,\nyou prepare a \"request to integrate\" (RTI).  Your RTI should include:\n\n\n\n\nThe link to the illumos issue you're fixing, i.e. \nhttps://illumos.org/issues/1\n\n\nThe issue synopsis (see the sample change description below)\n\n\nA link to the changes that were reviewed (preferably a webrev, code review page, or web repository view).\n\n\nThe full \"change set description\", (i.e. \"hg outgoing\" or \"git whatchanged -v origin/master..\") including:\n\n\nissue number(s) and description(s)\n\n\nReviewed by: XXX lines\n\n\nlist of files affected\n\n\nHere is an example change description:\n\n\n\n\n123 Description of the issue in our tracker\nReviewed by: Jack \njack@eng.sun.com\n\nReviewed by: Ohana Matsumae \nohana@kissui.ishikawa.jp\n\n\n\n\n\n!!! note Amending descriptions\n    You can use \ngit commit --amend\n to fix the change description.\n\n\n\n\nOutput of \ngit pbchk\n (you'll need the \"cadmium\" extension for git)\n\n\nAttach the \nmail_msg\n file from a full nightly build (including \nlint\n), which should be free of warnings.\n\n\nSupply information about how the changes were tested.\n\n\nAttach the actual changes, either from \ngit format-patch\n. (the webrev is not sufficient. Attach an actual patch)\n\n\n\n\nAn \nAdvocate\n will need to judge whether your\ncode review and testing are adequate for the scope of changes you propose.\nNote that the advocate's job is not necessarily to review your code, only to\njudge whether review and testing was adequate.\n\n\nWhen you are ready, send an email to the \nillumos\nAdvocates\n.\n\n\nYou don't need to subscribe to this list, just send an email to\n\n. If you're interested in what past RTIs looked\nlike, you can \nbrowse past\nmessages\n.\n\n\nYour email needs to be less than 2MB in size.  If your change is large,\ncompress the patch or make it available over HTTP.  If your \nmail_msg\n is\nlarge, something is wrong.\n\n\nYou should soon get a reply with additional feedback if needed, or a \"thank\nyou\" for being part of the illumos developer community!\n\n\nCredits", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#contributing-to-illumos", 
            "text": "RTI Process  The Request To Integrate process is also documented in the  illumos\nDeveloper's Guide .", 
            "title": "Contributing to illumos"
        }, 
        {
            "location": "/contributing/#finding-an-area-to-contribute-to", 
            "text": "If you're not sure what you want to work on, you can start by looking at our list of bite-site bugs  which\nshould be easy for newcomers to pick up. You can also look at the entire list\nof issues and see if any with status \"New\" fit your skill set.  If you're looking for a longer-term project, we have a  list of ideas for new\nprojects  for different\nlevels skill and expertise. Alternatively you may look through the  mailing\nlists  for suggestions for improvements.  If you are adding a new feature or addressing a problem not currently on our list of issues , please create a new issue \ndescribing it. You need to be signed in to use the issue tracker.  Before you start working on the code, it is advisable to first ask on either\nthe  developer mailing list  or the  IRC\nchannel  for advice on the particular area you're\ninterested in.", 
            "title": "Finding An Area To Contribute To"
        }, 
        {
            "location": "/contributing/#writing-the-code", 
            "text": "Our guide to building illumos covers setting up a build environment and getting\nthe source. You should try a build once or twice to get accustomed to the build\nsystem and source tree layout.  An unparalleled resource for understanding the operating system is the the\nbook,  Solaris Internals: Solaris 10 and OpenSolaris Kernel\nArchitecture \nand its companion wiki, solarisinternals.com .  We have an  OpenGrok source browser and search engine \nwhich is very useful for development.  Feel free to ask the  developer mailing list  or the  IRC\nchannel  for help.  We encourage you to \"commit early, commit often\" as you work, using your\npersonal clone of illumos-gate.", 
            "title": "Writing The Code"
        }, 
        {
            "location": "/contributing/#testing", 
            "text": "The illumos gate is a core technology leveraged by several commercial vendors\nthat rely on it to be a stable, well-tested platform. As such, integration into\nthe core illumos-gate requires both code review by relevant parties and\nreasonable testing to ensure that the changes are stable enough for others to\nrely upon.  Your  RTI advocate  is the ultimate arbiter of\nwhether your testing is sufficient.  The scope of required testing depends on the nature of the change and a\ndiscussion with your advocate, but in general advocates adopt a \"shrink to fit\"\nmentality. Here are some examples of reasonable testing based on the collective\nexperience of the current RTI advocates. Your advocate may always ask for more\ntesting depending on the nature of the change.", 
            "title": "Testing"
        }, 
        {
            "location": "/contributing/#all-changes", 
            "text": "Make sure you test the results of the illumos-gate build with only your\nchangesets applied. To do this, you will need to  build the illumos\ncode . It is generally insufficient to test the build\nresults of a downstream fork that contains other non-trivial changes as there\nmay be implicit dependencies that break other consumers of the core illumos\ngate.  If your code has been running in production in another distro or has gone\nthrough other testing downstream, please include that information, though by\nitself may be insufficient to constitute sufficient testing.", 
            "title": "All changes"
        }, 
        {
            "location": "/contributing/#changing-a-single-program", 
            "text": "If your change affects only a single binary, it is likely sufficient to copy\nthis binary to a downstream distro of reasonable similarity and running your\ntests there. These tests should cover enough functionality to demonstrate the\ncorrectness of your changes, and could involve stress tests in addition to\nfunctional tests depending on the nature of the change. This assumes that the\nbinary has a trivial set of library dependencies that are reasonably standard\nacross distros.", 
            "title": "Changing a single program"
        }, 
        {
            "location": "/contributing/#changing-the-implementation-of-a-library", 
            "text": "If your change affects the implementation of a library without changing\nexternal interfaces, you should run tests against a reasonable subset of\nprograms that exercise the code in question. As with a single binary, it is\nlikely sufficient to copy this library to a distro which has identical\ninterfaces, though for some core libraries (most notably libc), you will\nprobably need to bootstrap a complete distro given the challenges with swapping\nsuch libraries on a running system, though this depends on the distro in\nquestion.", 
            "title": "Changing the implementation of a library"
        }, 
        {
            "location": "/contributing/#changing-the-implementation-of-a-driver-or-adding-a-new-driver", 
            "text": "If your change affects a single driver, you may or may not be able to get away\nwith copying over that driver to an alternate distro. On one hand, the kernel\ninterfaces are likely identical, but if the core implementation of that distro\nhas diverged significantly from illumos-gate, you may be asked to bootstrap a\ncomplete environment from your illumos build. Driver tests should demonstrate a\nreasonable amount of functional and stress testing on appropriate hardware.", 
            "title": "Changing the implementation of a driver or adding a new driver"
        }, 
        {
            "location": "/contributing/#changing-the-core-kernel-or-multiple-interconnected-binaries", 
            "text": "If you are making a change to the core kernel, or have a series of changes\nacross a number of libraries, commands, or kernel components that need to be\ntested as a cohesive whole, you should bootstrap a usable environment from your\nillumos-gate build that is sufficient to demonstrate the correctness of your\nchanges. Exactly what \"bootstrapping\" means is dependent on the distro, but the\ngoal is to run the entirety of the your illumos-gate build (not a combination\nof downstream and upstream illumos-gate bits) in a testable environment. Not\nall distros are capable of bootstrapping a bare illumos-gate build - check the distribution list  and ask on the  developer\nlist  if you are unsure how to do this. Running  onu  on\nOpenIndiana or building an illumos-live distribution are two such ways to\ndemonstrate this testing that have been used in the past, but they are not the\nonly ones.  The scope of testing here will likely be more substantial, and should focus on\nstability of the system as well as the functionality of the changed\ncomponent(s).  As always, contact your advocate (or the advocates list if you don't yet have\nsomeone in mind) if you have more questions about what constitutes sufficient\ntesting for a particular change.", 
            "title": "Changing the core kernel or multiple interconnected binaries"
        }, 
        {
            "location": "/contributing/#code-review", 
            "text": "At least one person (other than you, of course) should review your changes.\nThese reviewers should have demonstrated expertise in the area in question or\nare trusted as knowledgeable by the illumos community at large. If you work for\na commercial entity, it is best to include reviewers from outside your company,\nbut this is not required.  Your  RTI advocate  is the ultimate arbiter of\nwhether your review is sufficient.  If you don't know how to find adequate review, you may post the changes to the\ndeveloper mailing list to ask for feedback, or ask the RTI advocates if there\nis anyone in particular they'd like to see review the code.  For larger changes, please link to a resource on the web, instead of attaching\na patch file. You may use a webrev (see below), a private hgweb or gitweb or\nonline services like Bitbucket, Github, or Gitorious to share your changes.\nRemember to mention the issue ID in the email - if one does not yet exist,\nplease create one!", 
            "title": "Code Review"
        }, 
        {
            "location": "/contributing/#generate-a-key-pair", 
            "text": "If you don't already have an SSH public key in your account in the  bug\ntracker , generate a key pair like this on your\nmachine (usually as the building/development user account):  $ ssh-keygen -t rsa\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/USER/.ssh/id_rsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/USER/.ssh/id_rsa.\nYour public key has been saved in /home/USER/.ssh/id_rsa.pub.\n$ cat ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3...  Then paste your public key into the box on your account settings page and save\nthe changes.  Wait for a while for the change to propagate to the webrev\nserver.    Note if you leave your passphrase blank you will be able to both publish and\ndelete your webrev's as per the latest instructions on the main page at http://cr.illumos.org/  (this both creates and uploads your webrev - see\n\"Creating and Uploaded in one step\" ) however if you use a passphrase you will\nnot be able to delete your webrev's as only publish will ask you for your\npassphrase.", 
            "title": "Generate a key pair"
        }, 
        {
            "location": "/contributing/#creating-a-webrev", 
            "text": "The  webrev(1)  tool is an easy way to show\nother people changes you have made.  It presents changes (including commit\nmessages) in multiple formats viewable from a web browser. If you have\ninstalled an illumos build, you can run webrev like this:  /opt/onbld/bin/webrev -O -o illumos-123-webrev  Else, from your workspace if you have built the tools:  ksh93 bldenv.sh illumos.sh -c  webrev -O -o illumos-123-webrev   Or to use webrev provided by installed ON build tools on a non-illumos system:  /opt/onbld/bin/webrev -I usr/src/tools/scripts/its.reg -O -o illumos-123-webrev   Note: The reason for the  -I  option is to provide links to our issue tracker. If you see  *** failed to import extension hgext.cdm from .../usr/src/tools/proto/root_i386-nd/opt/onbld/lib/python2.6/onbld/hgext/cdm.py: cannot import name WorkList,   try running  webrev  from the workspace instead.  Upload the directory somewhere people can access it from the web, such as a\npersonal web site.  You may also use the free webrev hosting provided by the\nillumos project as described in the next section.", 
            "title": "Creating a webrev"
        }, 
        {
            "location": "/contributing/#creating-and-uploading-a-webrev-in-one-step", 
            "text": "To publish a webrev, you'll first need to make sure your SSH key is up-to-date\nin the illumos  bug tracker .  Refer to Generate a\nkey pair above for more information. Please note that it takes a couple of\nminutes for your added (or updated) key to get copied to the webrev server.  Once you have a key uploaded, you can use  webrev(1)  to generate and upload\nyour webrev, all at once, thus:  webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -U  You can delete a previously uploaded webrev thus:  webrev -t rsync://webrev@cr.illumos.org:$SOME_NAME -D  Note that  $SOME_NAME  (in the examples above) is an arbitrary string that will\nform part of the URL to your webrev. This is not your user name but rather a\ndescriptive name of the issue and/or fix. Note, also, that you should always\nuse  webrev@  in the rsync URL, not your bug tracker username.  Once uploaded, your webrev will be in your directory here: http://cr.illumos.org/~webrev  for example assuming your login name is  jondoe \nand your  $SOME_NAME  is 1023 the final webrev will be located as  $SOME_NAME \ne.g.  1023  under your directory  http://cr.illumos.org/~webrev/jondoe/  or with a\ncomplete path of  http://cr.illumos.org/~webrev/jondoe/1023 .", 
            "title": "Creating and uploading a webrev in one step"
        }, 
        {
            "location": "/contributing/#review-board", 
            "text": "For reviews you could also use the illumos' Review Board instance at http://illumos.org/rb . You should be able to log in with your existing illumos\nbug tracker username and password.", 
            "title": "Review Board"
        }, 
        {
            "location": "/contributing/#ensuring-adequate-review", 
            "text": "It is up to you as a contributor to gather reasonable review to satisfy your\nRTI advocate that the code is correct and of high quality. Exactly what this\nmeans will vary based on the nature and scope of the change, but here are some\nguidelines that will give the advocates confidence in your changes. As always,\ntrust your avocate and apply \"shrink to fit\".   There should be at least one code reviewer (focused on the implementation details) that is different from the advocate (focused on ensuring overall quality of contributions).  For non-trivial changes to major technology areas (ZFS, DTrace, etc), at least one of the reviewers should be regarded as a subject matter expert by the community.  Changes with significant impact should participate in a public review when appropriate, or otherwise ensure that alternate opinions are represented.  When there are disagreements, every attempt should be made to adequately address reviewer's comments. In the event they cannot, it is acceptable to submit an RTI with known dissent. Such disagreements must be noted in the RTI submission with an explanation as to why the review comments were not addressed.   When in doubt, more review is generally better, and you can always ask the advocates for guidance.", 
            "title": "Ensuring adequate review"
        }, 
        {
            "location": "/contributing/#submitting-a-patch", 
            "text": "When you have adequate code review and test results for your proposed change,\nyou prepare a \"request to integrate\" (RTI).  Your RTI should include:   The link to the illumos issue you're fixing, i.e.  https://illumos.org/issues/1  The issue synopsis (see the sample change description below)  A link to the changes that were reviewed (preferably a webrev, code review page, or web repository view).  The full \"change set description\", (i.e. \"hg outgoing\" or \"git whatchanged -v origin/master..\") including:  issue number(s) and description(s)  Reviewed by: XXX lines  list of files affected  Here is an example change description:   123 Description of the issue in our tracker\nReviewed by: Jack  jack@eng.sun.com \nReviewed by: Ohana Matsumae  ohana@kissui.ishikawa.jp   !!! note Amending descriptions\n    You can use  git commit --amend  to fix the change description.   Output of  git pbchk  (you'll need the \"cadmium\" extension for git)  Attach the  mail_msg  file from a full nightly build (including  lint ), which should be free of warnings.  Supply information about how the changes were tested.  Attach the actual changes, either from  git format-patch . (the webrev is not sufficient. Attach an actual patch)   An  Advocate  will need to judge whether your\ncode review and testing are adequate for the scope of changes you propose.\nNote that the advocate's job is not necessarily to review your code, only to\njudge whether review and testing was adequate.  When you are ready, send an email to the  illumos\nAdvocates .  You don't need to subscribe to this list, just send an email to . If you're interested in what past RTIs looked\nlike, you can  browse past\nmessages .  Your email needs to be less than 2MB in size.  If your change is large,\ncompress the patch or make it available over HTTP.  If your  mail_msg  is\nlarge, something is wrong.  You should soon get a reply with additional feedback if needed, or a \"thank\nyou\" for being part of the illumos developer community!", 
            "title": "Submitting A Patch"
        }, 
        {
            "location": "/contributing/#credits", 
            "text": "", 
            "title": "Credits"
        }, 
        {
            "location": "/contributing/quality/", 
            "text": "So You Want to Develop on illumos\n\n\nWritten by \nBryan Cantrill\n\n\nIntroduction\n\n\nSo you're new to open source, and/or you're new to illumos. Maybe you have lots\nof experience developing mission-critical software, maybe you have none. But if\nyou haven't already figured it out, we take quality very seriously around here.\nDeveloping illumos is very hard, and it's very important. This is good news,\nnot bad news -- solving easy problems is boring and solving irrelevant problems\nis, well, irrelevant. But you should be prepared for the fact that you will\nneed to push yourself to deliver the highest quality software.\n\n\nIf you haven't already discovered it, illumos -- like any large software\nsystem -- has a complete range of software quality within its many subsystems.\n\n\nImmaculate\n\n\nSome illumos subsystems are beautiful works of engineering -- they are squeaky\nclean, well-designed and well-crafted. These subsystems are a joy to work in\nbut (and here's the catch) by virtue of being well-designed and\nwell-implemented, they generally don't need a whole lot of work. So you'll get\nto use them, appreciate them, and be inspired by them -- but you probably won't\nspend much time modifying them. (And because many of these subsystems have been\nimplemented by engineers who are now part of the active illumos community, many\nof the changes will be done by the original implementor(s) anyway.)\n\n\nFetid\n\n\nOther illumos subsystems are cobbled-together piles of junk -- reeking garbage\nbarges that have been around longer than anyone remembers, floating from one\nrelease to the next. These subsystems have few-to-no comments (or what comments\nthey have are clearly wrong), are poorly designed, needlessly complex, badly\nimplemented and virtually undebuggable. There are often parts that work by\naccident, and unused or little-used parts that simply never worked at all. They\nmanage to survive for one or more of the following reasons:\n\n\n\n\nThey work just well enough to not justify the cost of rewriting them\n\n\nThe problem they solve isn't important enough to justify the cost of rewriting them\n\n\nThe problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance\n\n\n\n\nIf you find yourself having to do work in one of these subsystems, you must\nexercise extreme caution: you will need to write as many test cases as you can\nthink of to beat the snot out of your modification, and you will need to\nperform extensive self-review. You can try asking for assistance, but you may\nquickly discover that no one is available who understands that particular\nsubsystem. Your code reviewers may not  be able to help much either -- maybe\nyou'll find one or two people who have had the same misfortune that you find\nyourself experiencing, but it's more likely that you will have to explain most\naspects of the subsystem to your reviewers. You may discover as you work in the\nsubsystem that maintaining it is simply untenable -- it may be time to consider\nrewriting the subsystem from scratch. (After all, most of the subsystems that\nare in the first category replaced subsystems that were in the second.) One\nshould not come to this decision too quickly: rewriting a subsystem from\nscratch is enormously difficult and time-consuming. Still, don't rule it out a\npriori.\n\n\nEven if you decide not to rewrite such a subsystem, you should improve it while\nyou're there in ways that don't introduce excessive risk. For example, if\nsomething took you a while to figure out, don't hesitate to add a block comment\nto explain your discoveries. And if it was a pain in the ass to debug, you\nshould add the debugging support that you found lacking. This will make it\nslightly easier on the next engineer -- and it will make it easier on you when\nyou need to debug your own modifications.\n\n\nGrimy\n\n\nMost illumos subsystems, however, don't actually fall neatly into either of\nthese categories -- they are somewhere in the middle. That is, they have parts\nthat are well thought out, or design elements that are sound, but they are also\nlittered with implicit intradependencies within the subsystem or implicit\ninterdependencies with other subsystems. They may have debugging support, but\nperhaps it is incomplete or out of date. Perhaps the subsystem effectively met\nits original design goals, but it has been extended to solve a new problem in a\nway that has left it brittle or overly complex. Many of these subsystems have\nbeen fixed to the point that they work reliably -- but they are delicate and\nthey must be modified with care.\n\n\nDue Diligence\n\n\nThe majority of work that you will do on existing code will be to subsystems in\nthis last category. You must be very cautious when making changes to these\nsubsystems. Sometimes these subsystems have local experts, but many changes\nwill go beyond their expertise. (After all, part of the problem with these\nsubsystems is that they often weren't designed to accommodate the kind of\nchange you might want to make.) You must extensively test your change to the\nsubsystem. Run your change on your desktop, your laptop, your home machine and\nevery kind of machine you can grab a tip line to. But you can't just be content\nwith booting a machine with your change -- you must beat the hell out of it.\nSometimes there is a stress test available that you may run, but this \nis not a\nsubstitute for writing your own tests\n. You should find any standards tests that\nmight apply to the subsystem and run them. (If you don't know which standards\ntests might apply to your change, consult the gatekeepers or the C-team.) You\nshould review your own changes extensively. Are you obeying all of the locking\nrules? What are the locking rules, anyway? Are you building new dependencies\ninto the subsystem? (This can only be answered with extensive, laborious\ncscope'ing -- you cannot rely on code reviewers to pick up subtle new\ndependencies.) Review your changes again. Then, print your changes out, take\nthem to a place where you can concentrate, and review them yet again. And when\nyou review your own code, review it not as someone who believes that the code\nis right, but as someone who is certain that the code is wrong. As you perform\nyour self-review, look for novel angles from which to test your code. Then test\nand test and test.\n\n\nIt can all be summed up by asking yourself one question: have you reviewed and\ntested your change every way that you know how? \nYou should not even \ncontemplate\n\na putback until your answer to this is an unequivocal YES\n.. Remember: you are\nalways empowered as an engineer to take more time to test your work. You can --\nalways take time to do the Right Thing. This is important to avoid the \nQuality\nDeath Spiral\n. You must do your part by delivering \nFCS quality all the\ntime\n.\n\n\nDoes this mean that you should contemplate ritual suicide if you introduce a\nserious bug? Of course not -- everyone who has made enough modifications to\ndelicate, critical subsystems has introduced a change that has induced\nexpensive downtime somewhere. We know that this will be so because writing\nsystem software is just so damned tricky and hard. Indeed, it is because of\nthis truism that you \nmust demand of yourself\n that you not integrate a change\nuntil you are out of ideas of how to test it. Because you will one day\nintroduce a bug of such subtlety that it will seem that no one could have\ncaught it.\n\n\nAnd what do you do when that awful, black day arrives? Here's a quick coping\nmanual from those of us who have been there:\n\n\n\n\nDon't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) [obscure historical Sun reference, never mind ;-) - Ed.]\n\n\nDon't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously\n\n\nIf someone spent time debugging your bug, thank them\n\n\nIf someone was inconvenienced by your bug, apologize to them\n\n\nTake responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc.\n\n\n\n\nBut most importantly, you must ask yourself: \nwhat could I have done\ndifferently\n? If you honestly don't know, ask a community member to help you.\nWe've all been there, and we want to make sure that you are able to learn from\nit. Once you have an answer, take solace in it; no matter how bad you feel for\nhaving introduced a problem, you can know that the experience has improved you\nas an engineer -- and that's the most anyone can ask for.", 
            "title": "System state"
        }, 
        {
            "location": "/contributing/quality/#so-you-want-to-develop-on-illumos", 
            "text": "Written by  Bryan Cantrill", 
            "title": "So You Want to Develop on illumos"
        }, 
        {
            "location": "/contributing/quality/#introduction", 
            "text": "So you're new to open source, and/or you're new to illumos. Maybe you have lots\nof experience developing mission-critical software, maybe you have none. But if\nyou haven't already figured it out, we take quality very seriously around here.\nDeveloping illumos is very hard, and it's very important. This is good news,\nnot bad news -- solving easy problems is boring and solving irrelevant problems\nis, well, irrelevant. But you should be prepared for the fact that you will\nneed to push yourself to deliver the highest quality software.  If you haven't already discovered it, illumos -- like any large software\nsystem -- has a complete range of software quality within its many subsystems.", 
            "title": "Introduction"
        }, 
        {
            "location": "/contributing/quality/#immaculate", 
            "text": "Some illumos subsystems are beautiful works of engineering -- they are squeaky\nclean, well-designed and well-crafted. These subsystems are a joy to work in\nbut (and here's the catch) by virtue of being well-designed and\nwell-implemented, they generally don't need a whole lot of work. So you'll get\nto use them, appreciate them, and be inspired by them -- but you probably won't\nspend much time modifying them. (And because many of these subsystems have been\nimplemented by engineers who are now part of the active illumos community, many\nof the changes will be done by the original implementor(s) anyway.)", 
            "title": "Immaculate"
        }, 
        {
            "location": "/contributing/quality/#fetid", 
            "text": "Other illumos subsystems are cobbled-together piles of junk -- reeking garbage\nbarges that have been around longer than anyone remembers, floating from one\nrelease to the next. These subsystems have few-to-no comments (or what comments\nthey have are clearly wrong), are poorly designed, needlessly complex, badly\nimplemented and virtually undebuggable. There are often parts that work by\naccident, and unused or little-used parts that simply never worked at all. They\nmanage to survive for one or more of the following reasons:   They work just well enough to not justify the cost of rewriting them  The problem they solve isn't important enough to justify the cost of rewriting them  The problem they solve is so nasty that the cost of a rewrite is enormous -- or at least it dwarfs the cost of ongoing maintenance   If you find yourself having to do work in one of these subsystems, you must\nexercise extreme caution: you will need to write as many test cases as you can\nthink of to beat the snot out of your modification, and you will need to\nperform extensive self-review. You can try asking for assistance, but you may\nquickly discover that no one is available who understands that particular\nsubsystem. Your code reviewers may not  be able to help much either -- maybe\nyou'll find one or two people who have had the same misfortune that you find\nyourself experiencing, but it's more likely that you will have to explain most\naspects of the subsystem to your reviewers. You may discover as you work in the\nsubsystem that maintaining it is simply untenable -- it may be time to consider\nrewriting the subsystem from scratch. (After all, most of the subsystems that\nare in the first category replaced subsystems that were in the second.) One\nshould not come to this decision too quickly: rewriting a subsystem from\nscratch is enormously difficult and time-consuming. Still, don't rule it out a\npriori.  Even if you decide not to rewrite such a subsystem, you should improve it while\nyou're there in ways that don't introduce excessive risk. For example, if\nsomething took you a while to figure out, don't hesitate to add a block comment\nto explain your discoveries. And if it was a pain in the ass to debug, you\nshould add the debugging support that you found lacking. This will make it\nslightly easier on the next engineer -- and it will make it easier on you when\nyou need to debug your own modifications.", 
            "title": "Fetid"
        }, 
        {
            "location": "/contributing/quality/#grimy", 
            "text": "Most illumos subsystems, however, don't actually fall neatly into either of\nthese categories -- they are somewhere in the middle. That is, they have parts\nthat are well thought out, or design elements that are sound, but they are also\nlittered with implicit intradependencies within the subsystem or implicit\ninterdependencies with other subsystems. They may have debugging support, but\nperhaps it is incomplete or out of date. Perhaps the subsystem effectively met\nits original design goals, but it has been extended to solve a new problem in a\nway that has left it brittle or overly complex. Many of these subsystems have\nbeen fixed to the point that they work reliably -- but they are delicate and\nthey must be modified with care.", 
            "title": "Grimy"
        }, 
        {
            "location": "/contributing/quality/#due-diligence", 
            "text": "The majority of work that you will do on existing code will be to subsystems in\nthis last category. You must be very cautious when making changes to these\nsubsystems. Sometimes these subsystems have local experts, but many changes\nwill go beyond their expertise. (After all, part of the problem with these\nsubsystems is that they often weren't designed to accommodate the kind of\nchange you might want to make.) You must extensively test your change to the\nsubsystem. Run your change on your desktop, your laptop, your home machine and\nevery kind of machine you can grab a tip line to. But you can't just be content\nwith booting a machine with your change -- you must beat the hell out of it.\nSometimes there is a stress test available that you may run, but this  is not a\nsubstitute for writing your own tests . You should find any standards tests that\nmight apply to the subsystem and run them. (If you don't know which standards\ntests might apply to your change, consult the gatekeepers or the C-team.) You\nshould review your own changes extensively. Are you obeying all of the locking\nrules? What are the locking rules, anyway? Are you building new dependencies\ninto the subsystem? (This can only be answered with extensive, laborious\ncscope'ing -- you cannot rely on code reviewers to pick up subtle new\ndependencies.) Review your changes again. Then, print your changes out, take\nthem to a place where you can concentrate, and review them yet again. And when\nyou review your own code, review it not as someone who believes that the code\nis right, but as someone who is certain that the code is wrong. As you perform\nyour self-review, look for novel angles from which to test your code. Then test\nand test and test.  It can all be summed up by asking yourself one question: have you reviewed and\ntested your change every way that you know how?  You should not even  contemplate \na putback until your answer to this is an unequivocal YES .. Remember: you are\nalways empowered as an engineer to take more time to test your work. You can --\nalways take time to do the Right Thing. This is important to avoid the  Quality\nDeath Spiral . You must do your part by delivering  FCS quality all the\ntime .  Does this mean that you should contemplate ritual suicide if you introduce a\nserious bug? Of course not -- everyone who has made enough modifications to\ndelicate, critical subsystems has introduced a change that has induced\nexpensive downtime somewhere. We know that this will be so because writing\nsystem software is just so damned tricky and hard. Indeed, it is because of\nthis truism that you  must demand of yourself  that you not integrate a change\nuntil you are out of ideas of how to test it. Because you will one day\nintroduce a bug of such subtlety that it will seem that no one could have\ncaught it.  And what do you do when that awful, black day arrives? Here's a quick coping\nmanual from those of us who have been there:   Don't pretend it didn't happen -- you screwed up, but your mother still loves you (unless, of course, her home directory is on jurassic) [obscure historical Sun reference, never mind ;-) - Ed.]  Don't minimize the problem, shrug it off or otherwise make light of it -- this is serious business, and we take it seriously  If someone spent time debugging your bug, thank them  If someone was inconvenienced by your bug, apologize to them  Take responsibility for your bug -- don't bother to blame other subsystems, the inherent complexity of illumos, your code reviewers, etc.   But most importantly, you must ask yourself:  what could I have done\ndifferently ? If you honestly don't know, ask a community member to help you.\nWe've all been there, and we want to make sure that you are able to learn from\nit. Once you have an answer, take solace in it; no matter how bad you feel for\nhaving introduced a problem, you can know that the experience has improved you\nas an engineer -- and that's the most anyone can ask for.", 
            "title": "Due Diligence"
        }, 
        {
            "location": "/contributing/qds/", 
            "text": "The Quality Death Spiral\n\n\nJeff Bonwick\n was the gatekeeper\nfor Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in\nSeptember, 1994. It included a section on the Quality Death Spiral -- a\ntimeless phenomenon that remains our omnipresent fear:\n\n\nif it\ns broken, rip it out\n\n    - FCS* quality all the time\n    - put it back today, 20 of your (current) friends\n        will be running it tomorrow\n    - gate breakage grinds other development to a halt\n    - the product, not any one project, is what matters\n    - mistakes will happen; negligence cannot\n\nFCS* quality all the time -- why is this so important?\n\n    - only way to avoid the quality death spiral:\n\n        - people hear the gate is broken\n        - decide not to risk a bringover\n        - fewer people run the latest stuff\n        - less real-life testing\n        - new bugs not found\n        - quality drops further\n\n    - morale tracks quality\n\n    - downward spiral hard to break\n\n    - recovery time can be very long\n\n\n\n\n\n\nFCS == First Customer Ship\n\n\n\n\n(Orignally sourced from \nhttp://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral\n)", 
            "title": "Quality Death Spiral"
        }, 
        {
            "location": "/contributing/qds/#the-quality-death-spiral", 
            "text": "Jeff Bonwick  was the gatekeeper\nfor Solaris 2.5. He gave a talk on Solaris to the Sun Systems Group in\nSeptember, 1994. It included a section on the Quality Death Spiral -- a\ntimeless phenomenon that remains our omnipresent fear:  if it s broken, rip it out\n\n    - FCS* quality all the time\n    - put it back today, 20 of your (current) friends\n        will be running it tomorrow\n    - gate breakage grinds other development to a halt\n    - the product, not any one project, is what matters\n    - mistakes will happen; negligence cannot\n\nFCS* quality all the time -- why is this so important?\n\n    - only way to avoid the quality death spiral:\n\n        - people hear the gate is broken\n        - decide not to risk a bringover\n        - fewer people run the latest stuff\n        - less real-life testing\n        - new bugs not found\n        - quality drops further\n\n    - morale tracks quality\n\n    - downward spiral hard to break\n\n    - recovery time can be very long   FCS == First Customer Ship   (Orignally sourced from  http://hub.opensolaris.org/bin/view/Community+Group+on/qual_death_spiral )", 
            "title": "The Quality Death Spiral"
        }, 
        {
            "location": "/community/", 
            "text": "Community\n\n\nIntroduction\n\n\nThe illumos community is small but active. From hobbyists to businesses pushing\nmassive cloud deployments, we welcome all comers.\n\n\nWe try to be very helpful and inclusive! It's not uncommon to see folks\nanswering questions ranging from newbie to helping debug complicated\ndeep-kernel black magic.\n\n\n\n\nThe Golden Rule\n\n\nPlease be respectful and civil in your communications. Harassment and\nother poor behaviour will not be tolerated, and preventative action will be\ntaken by moderators.\n\n\n\n\nMailing Lists\n\n\nPlease refer to \nthis page\n for both illumos project and related\ncommunity mailing list information.\n\n\nIRC Channels\n\n\n\n\n\n\n\n\nProject\n\n\nNetwork\n\n\nChannel\n\n\n\n\n\n\n\n\n\n\nillumos\n\n\nfreenode\n\n\n#illumos\n\n\n\n\n\n\nSmartOS\n\n\nfreenode\n\n\n#smartos\n\n\n\n\n\n\nOmniOS\n\n\nfreenode\n\n\n#omnios\n\n\n\n\n\n\nOpenIndiana\n\n\nfreenode\n\n\n#openindiana\n\n\n\n\n\n\nOpenZFS\n\n\nfreenode\n\n\n#openzfs", 
            "title": "Overview"
        }, 
        {
            "location": "/community/#community", 
            "text": "", 
            "title": "Community"
        }, 
        {
            "location": "/community/#introduction", 
            "text": "The illumos community is small but active. From hobbyists to businesses pushing\nmassive cloud deployments, we welcome all comers.  We try to be very helpful and inclusive! It's not uncommon to see folks\nanswering questions ranging from newbie to helping debug complicated\ndeep-kernel black magic.   The Golden Rule  Please be respectful and civil in your communications. Harassment and\nother poor behaviour will not be tolerated, and preventative action will be\ntaken by moderators.", 
            "title": "Introduction"
        }, 
        {
            "location": "/community/#mailing-lists", 
            "text": "Please refer to  this page  for both illumos project and related\ncommunity mailing list information.", 
            "title": "Mailing Lists"
        }, 
        {
            "location": "/community/#irc-channels", 
            "text": "Project  Network  Channel      illumos  freenode  #illumos    SmartOS  freenode  #smartos    OmniOS  freenode  #omnios    OpenIndiana  freenode  #openindiana    OpenZFS  freenode  #openzfs", 
            "title": "IRC Channels"
        }, 
        {
            "location": "/community/lists/", 
            "text": "Mailing Lists\n\n\n\n\nThe Golden Rule\n\n\nPlease be respectful and civil in your communications. Harassment and\nother poor behaviour will not be tolerated, and preventative action will be\ntaken by moderators.\n\n\n\n\nGeneral Lists\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nannounce\n\n\nAnnouncements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. (\nOld archives\n)\n\n\n\n\n\n\ndeveloper\n\n\nDevelopers working on illumos code and those looking to become actively involved. (\nOld archives\n)\n\n\n\n\n\n\ndiscuss\n\n\nGeneral discussion (\nOld archives\n\n\n\n\n\n\n\n\nCode Commits, Integration, Bug Tracking\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadvocates\n\n\nModerated list for illumos Advocates and submitting RTIs only. (\nOld archives\n)\n\n\n\n\n\n\ncommits\n\n\nNotifications about each commit made to the illumos source code repository. (\nOld archives\n)\n\n\n\n\n\n\n\n\nRelated Communites\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndtrace-discuss\n\n\nAll things DTrace\n\n\n\n\n\n\nopenzfs-developer\n\n\nPlatform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms.\n\n\n\n\n\n\noi-dev\n\n\nOpenIndiana distro developer list\n\n\n\n\n\n\nopenindiana-discuss\n\n\nOpenIndiana distro users list\n\n\n\n\n\n\nomnios-discuss\n\n\nOmniOS distro users list\n\n\n\n\n\n\nsmartos-discuss\n\n\nSmartOS distro", 
            "title": "Mailing Lists"
        }, 
        {
            "location": "/community/lists/#mailing-lists", 
            "text": "The Golden Rule  Please be respectful and civil in your communications. Harassment and\nother poor behaviour will not be tolerated, and preventative action will be\ntaken by moderators.", 
            "title": "Mailing Lists"
        }, 
        {
            "location": "/community/lists/#general-lists", 
            "text": "Name  Description      announce  Announcements including new releases, significant milestones, administrative and policy decisions and other news-worthy items. ( Old archives )    developer  Developers working on illumos code and those looking to become actively involved. ( Old archives )    discuss  General discussion ( Old archives", 
            "title": "General Lists"
        }, 
        {
            "location": "/community/lists/#code-commits-integration-bug-tracking", 
            "text": "Name  Description      advocates  Moderated list for illumos Advocates and submitting RTIs only. ( Old archives )    commits  Notifications about each commit made to the illumos source code repository. ( Old archives )", 
            "title": "Code Commits, Integration, Bug Tracking"
        }, 
        {
            "location": "/community/lists/#related-communites", 
            "text": "Name  Description      dtrace-discuss  All things DTrace    openzfs-developer  Platform-independent mailing list for ZFS developers to review ZFS code and architecture changes from all platforms.    oi-dev  OpenIndiana distro developer list    openindiana-discuss  OpenIndiana distro users list    omnios-discuss  OmniOS distro users list    smartos-discuss  SmartOS distro", 
            "title": "Related Communites"
        }, 
        {
            "location": "/community/events/", 
            "text": "Events\n\n\nUpcoming\n\n\nPast", 
            "title": "Events"
        }, 
        {
            "location": "/community/events/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/community/events/#upcoming", 
            "text": "", 
            "title": "Upcoming"
        }, 
        {
            "location": "/community/events/#past", 
            "text": "", 
            "title": "Past"
        }, 
        {
            "location": "/community/videos/", 
            "text": "Year\n\n\nPresenter\n\n\nVenue\n\n\nLink\n\n\n\n\n\n\n\n\n\n\n2018\n\n\nStephen's Machine Room\n\n\n\n\nThoughts on illumos distributions\n\n\n\n\n\n\n2017\n\n\nPeter Tribble\n\n\nflossUK\n\n\nillumos at 6\n\n\n\n\n\n\n2017\n\n\nVarious\n\n\n\n\nOpenZFS Dev Summit\n\n\n\n\n\n\n2016\n\n\nBryan Cantrill\n\n\nPapersWeLove\n\n\nJails and Solaris Zones\n\n\n\n\n\n\n2016\n\n\nVarious\n\n\n\n\nOpenZFS Dev Summit\n\n\n\n\n\n\n2015\n\n\nVarious\n\n\nSurge\n\n\nillumos Day\n\n\n\n\n\n\n2015\n\n\nVarious\n\n\n\n\nOpenZFS Dev Summit\n\n\n\n\n\n\n2014\n\n\nMatt Ahrens\n\n\nAsiaBSDCon\n\n\nOpenZFS\n\n\n\n\n\n\n2014\n\n\nVarious\n\n\n\n\nOpenZFS Dev Summit\n\n\n\n\n\n\n2014\n\n\nVarious\n\n\nSurge\n\n\nillumos Day\n\n\n\n\n\n\n2014\n\n\nPeter Tribble\n\n\n\n\nTribblix: adventures with illumos\n\n\n\n\n\n\n2013\n\n\nVarious\n\n\n\n\nOpenZFS Developer Summit\n\n\n\n\n\n\n2012\n\n\nGarrett D'Amore\n\n\nSCALE 10x\n\n\nDeveloping for illumos\n\n\n\n\n\n\n2012\n\n\nRobert Mustacchi\n\n\nSCALE 10x\n\n\nUsing SmartOS as a Hypervisor\n\n\n\n\n\n\n2012\n\n\nVarious\n\n\n\n\ndtrace.conf\n\n\n\n\n\n\n2012\n\n\nBrendan Gregg\n\n\n\n\nDTracing the cloud\n\n\n\n\n\n\n2011\n\n\nBryan Cantrill\n\n\nLISA 25\n\n\nFork Yeah! The Rise and Development of illumos\n\n\n\n\n\n\n2011\n\n\nVarious\n\n\n\n\nillumos meetup\n\n\n\n\n\n\n2011\n\n\nBryan Cantrill\n\n\nKVM Forum\n\n\nPorting KVM to illumos\n\n\n\n\n\n\n2009\n\n\nBrendan Gregg\n\n\nKCA\n\n\nDTrace Crash Course\n\n\n\n\n\n\n2008\n\n\nVarious\n\n\n\n\ndtrace.conf\n\n\n\n\n\n\n2008\n\n\nJeff Bonwick, Bill Moore\n\n\nSNIA\n\n\nZFS: The Last Word in Filesystems\n\n\n\n\n\n\n\n\nMany thanks to \nDeirdr\u00e9 Straughan\n for\nrecording many of the early OpenSolaris and illumos videos!", 
            "title": "Videos"
        }, 
        {
            "location": "/community/gsoc/", 
            "text": "Google Summer of Code\n\n\nWe\u2019re happy to announce that the illumos project has been accepted as a\nmentoring organization for the \n2017 Google Summer of\nCode\n (this marks our third year of\nparticipation in GSoC).\n\n\nThe illumos project is a community-driven open source operating system\ndevelopment project derived from the former OpenSolaris project.\n\n\nGoogle's Summer of Code program promotes student involvement in open source\ncommunities by sponsoring summer internships for students to work on projects\nlike illumos.  Members of the illumos community (including Joyent, Nexenta,\nOmniTI and others) support this program by offering experienced staff members\nwilling to mentor student projects.   If you might like to apply for one of\nthese internships, or just want to learn more about our involvement in this\nprogram, please see the illumos GSoC page. OpenIndiana is also participating,\nunder the illumos umbrella.\n\n\nFor Students\n\n\n\n\nNew to illumos?\n\n\nStart with \nHow To Build illumos\n and\n\nHow To Contribute\n.\n\n\n\n\nIf you're interested in helping illumos or OpenIndiana in this year's Summer of\nCode, we require you to sign up on our \ndeveloper list\n.\n\n\nStudents are expected to interact as normal contributors through existing\ncommunity channels, including \nmail and IRC\n, so dive on\nin!\n\n\nWe encourage you to drop by #illumos on freenode to ask questions or get to\nknow us.\n\n\nStudents can officially begin discussing project ideas with us at any time, and\nsubmit applications between Mar 20 and Apr. 3 (see other important dates in the\n\nfull timeline for GSoC\n2017\n).\n\n\nNothing prohibits motivated students from spending time before the application\nperiod getting to know the community and the code, installing a distribution,\nbuilding from source, and fixing some \nbite-sized\nbugs\n.\n\n\nStarting from March 20, you can apply at \nillumos Google Summer of Code\npage\n.\n\n\nIf you're not sure what your proposal should include we will be happy to help\nif you ask the mailing list or IRC for feedback.\n\n\nThink Long-Term\n\n\nillumos is an open-source, community-based project, but it also has commercial\nsupporters who employ contributors to our project. If operating systems\ndevelopment is really what interests you, consider this a first step toward a\npossible career with us.\n\n\nOur development community includes people who came to work at the commercial\norganization that supported our predecessor project as summer interns. They\nwere excited enough by what they saw that they started work right out of\ncollege and followed us into our current incarnation. For a (colorful) history\nof the project from one of those interns, visit \nBryan Cantrill's LISA\npresentation\n.\n\n\nProject ideas\n\n\nOur \nProject Ideas\n are a launch pad for student proposals, not a fixed menu\nof options. Put time in with the community, learn how what we're doing fits\nyour interests and skills and write a proposal that reflects that. We welcome\noriginal project proposals, particularly those that demonstration familiarity\nwith the project and alignment with career interests, previous course of study,\nand practical experience. When writing your proposal, make use of our\nsuggestions for \nhow to write an excellent GSoC\nproposal\n.\n\n\nApplication template\n\n\nPlease use our \nGSoC Application Template\n in preparing\nyour application.\n\n\nMentoring resources\n\n\nIf you need help finding or contacting a possible mentor, please contact the\norg admins:\n\n\n\n\nGordon Ross \n \n\n\nHans Rosenfeld", 
            "title": "Overview"
        }, 
        {
            "location": "/community/gsoc/#google-summer-of-code", 
            "text": "We\u2019re happy to announce that the illumos project has been accepted as a\nmentoring organization for the  2017 Google Summer of\nCode  (this marks our third year of\nparticipation in GSoC).  The illumos project is a community-driven open source operating system\ndevelopment project derived from the former OpenSolaris project.  Google's Summer of Code program promotes student involvement in open source\ncommunities by sponsoring summer internships for students to work on projects\nlike illumos.  Members of the illumos community (including Joyent, Nexenta,\nOmniTI and others) support this program by offering experienced staff members\nwilling to mentor student projects.   If you might like to apply for one of\nthese internships, or just want to learn more about our involvement in this\nprogram, please see the illumos GSoC page. OpenIndiana is also participating,\nunder the illumos umbrella.", 
            "title": "Google Summer of Code"
        }, 
        {
            "location": "/community/gsoc/#for-students", 
            "text": "New to illumos?  Start with  How To Build illumos  and How To Contribute .   If you're interested in helping illumos or OpenIndiana in this year's Summer of\nCode, we require you to sign up on our  developer list .  Students are expected to interact as normal contributors through existing\ncommunity channels, including  mail and IRC , so dive on\nin!  We encourage you to drop by #illumos on freenode to ask questions or get to\nknow us.  Students can officially begin discussing project ideas with us at any time, and\nsubmit applications between Mar 20 and Apr. 3 (see other important dates in the full timeline for GSoC\n2017 ).  Nothing prohibits motivated students from spending time before the application\nperiod getting to know the community and the code, installing a distribution,\nbuilding from source, and fixing some  bite-sized\nbugs .  Starting from March 20, you can apply at  illumos Google Summer of Code\npage .  If you're not sure what your proposal should include we will be happy to help\nif you ask the mailing list or IRC for feedback.", 
            "title": "For Students"
        }, 
        {
            "location": "/community/gsoc/#think-long-term", 
            "text": "illumos is an open-source, community-based project, but it also has commercial\nsupporters who employ contributors to our project. If operating systems\ndevelopment is really what interests you, consider this a first step toward a\npossible career with us.  Our development community includes people who came to work at the commercial\norganization that supported our predecessor project as summer interns. They\nwere excited enough by what they saw that they started work right out of\ncollege and followed us into our current incarnation. For a (colorful) history\nof the project from one of those interns, visit  Bryan Cantrill's LISA\npresentation .", 
            "title": "Think Long-Term"
        }, 
        {
            "location": "/community/gsoc/#project-ideas", 
            "text": "Our  Project Ideas  are a launch pad for student proposals, not a fixed menu\nof options. Put time in with the community, learn how what we're doing fits\nyour interests and skills and write a proposal that reflects that. We welcome\noriginal project proposals, particularly those that demonstration familiarity\nwith the project and alignment with career interests, previous course of study,\nand practical experience. When writing your proposal, make use of our\nsuggestions for  how to write an excellent GSoC\nproposal .", 
            "title": "Project ideas"
        }, 
        {
            "location": "/community/gsoc/#application-template", 
            "text": "Please use our  GSoC Application Template  in preparing\nyour application.", 
            "title": "Application template"
        }, 
        {
            "location": "/community/gsoc/#mentoring-resources", 
            "text": "If you need help finding or contacting a possible mentor, please contact the\norg admins:   Gordon Ross     Hans Rosenfeld", 
            "title": "Mentoring resources"
        }, 
        {
            "location": "/community/gsoc-application/", 
            "text": "Welcome to the Google Summer of Code!\n\n\nLet's start with some background about you.\n\n\n\n\nName:\n\n\nEmail address:\n\n\nIRC nickname on freenode:\n\n\n\n\nField of study (and concentration, if any):\n\n\n\n\n\n\nHave you participated in an open source project before? If you have, which aspects did you enjoy most (or least)? If you have contributed code, can you describe the tools and languages you used, and link to commits?\n\n\n\n\nHave you been involved with illumos or a related community project (OpenIndiana, OmniOS, SmartOS, etc.)?\n\n\nHave you fixed any bite-sized bugs or contributed code to illumos? If so, please provide the issue IDs or the e-mail address used in the commit.\n\n\nDo you have an illumos distribution (OpenIndiana, OmniOS, SmartOS) currently running on your system? If so, describe your setup. Have you built illumos-gate from source and successfully upgraded your system to those bits?\n\n\nWhat piece of source code have you read and found most interesting? Why?\n\n\nWhat makes illumos interesting to you? Do you plan to stay involved after GSoC, and if so, in which areas?\n\n\nIs there anything else you'd like us to know about you? Will you have other obligations or time constraints during the GSoC period?\n\n\n\n\nNext, please describe your project.\n\n\n\n\nThe goals you wish to achieve, in a nutshell:\n\n\nQuantifiable deliverables in terms of software, tests, and/or documentation:\n\n\nYour plan for implementing the features, and testing them:\n\n\nRough outline of your development schedule, including milestones:\n\n\nWhat prior experience (coursework, internship, work experience) or expertise do you have relevant to your project?\n\n\nHow does your proposal align with your goals after completing your current degree?\n\n\nWill you need us to provide access to hardware, specifications, or other resources?\n\n\nDo you have a particular person in mind as a mentor? With whom have you discussed your project previously on a public e-mail list or IRC channel?", 
            "title": "Student Application"
        }, 
        {
            "location": "/community/gsoc-application/#welcome-to-the-google-summer-of-code", 
            "text": "", 
            "title": "Welcome to the Google Summer of Code!"
        }, 
        {
            "location": "/community/gsoc-application/#lets-start-with-some-background-about-you", 
            "text": "Name:  Email address:  IRC nickname on freenode:   Field of study (and concentration, if any):    Have you participated in an open source project before? If you have, which aspects did you enjoy most (or least)? If you have contributed code, can you describe the tools and languages you used, and link to commits?   Have you been involved with illumos or a related community project (OpenIndiana, OmniOS, SmartOS, etc.)?  Have you fixed any bite-sized bugs or contributed code to illumos? If so, please provide the issue IDs or the e-mail address used in the commit.  Do you have an illumos distribution (OpenIndiana, OmniOS, SmartOS) currently running on your system? If so, describe your setup. Have you built illumos-gate from source and successfully upgraded your system to those bits?  What piece of source code have you read and found most interesting? Why?  What makes illumos interesting to you? Do you plan to stay involved after GSoC, and if so, in which areas?  Is there anything else you'd like us to know about you? Will you have other obligations or time constraints during the GSoC period?", 
            "title": "Let's start with some background about you."
        }, 
        {
            "location": "/community/gsoc-application/#next-please-describe-your-project", 
            "text": "The goals you wish to achieve, in a nutshell:  Quantifiable deliverables in terms of software, tests, and/or documentation:  Your plan for implementing the features, and testing them:  Rough outline of your development schedule, including milestones:  What prior experience (coursework, internship, work experience) or expertise do you have relevant to your project?  How does your proposal align with your goals after completing your current degree?  Will you need us to provide access to hardware, specifications, or other resources?  Do you have a particular person in mind as a mentor? With whom have you discussed your project previously on a public e-mail list or IRC channel?", 
            "title": "Next, please describe your project."
        }, 
        {
            "location": "/community/gsoc-expectations/", 
            "text": "GSoC Student Expectations\n\n\n\n\nYour proposal is your contract\n\n\nDon't get lost\n\n\nBlog weekly to report progress\n\n\nPush on a regular schedule every few days\n\n\nWrite design notes for review\n\n\nGet weekly review on code and design\n\n\nIdentify blockers immediately\n\n\nBond\n\n\nGet your contribution through to RTI\n\n\nKeep working on bite-sized bugs\n\n\nWith feedback from your mentor, identify background reading assignments for the bonding period\n\n\nSpend time on #illumos\n\n\n\n\nWe don't want students to disappear and end up at risk of failure. We're\ntherefore setting up a number of protocols to help us keep track of progress on\na day-to-day basis without too much overhead. There are a number of further\nthings you can do to help yourself out. Get on the #illumos IRC channel and get\nto know the developers who are active there. Our developer community is an\nessential part of the larger mentor community supporting your project, so\nplease consider the mailing list and IRC first-instance resource for general\nrequests.\n\n\nProposals should be considered a contract: they can be renegotiated, but you\ncan't fail to deliver. If you need to make changes, indicate that promptly and\nmake sure that the changes have been notified to and approved by your primary\nmentor and the org admins (Bayard and Albert).\n\n\nAn illumos-gsoc organization has been created on GitHub, and WIP repos are\nbeing created for each project. Updates to the WIP are your basic keepalive:\nyou should be pushing every day or two whenever you are coding. If you are\ngoing to miss a push or have one, please send notification to your primary\nmentor and the org admins, preferably in advance, explaining the circumstances.\n\n\nThe repos should also include documentation for your project, such as design\nnotes. Because they are WIPs, the repos are private. Reviews should be done\nusing webrevs. You will be given accounts on dev1.illumos.org to allow you to\npublish code for review using webrevs. \n\n\nEvery week you should provide a blog post describing progress and a webrev of\nany code done that week, sending URLs to developer@. The first post, which\nshould be made during the bonding period, should be the project schedule and\ndeliverables so that the developer community is aware of what you will be\ndoing.\n\n\nYou cannot miss these weekly progress reports except by prior arrangement or in\ncase of legitimate emergency.\n\n\nIf there are any slips against the project schedule, you should identify them\nin these posts the week they happen.\n\n\nIf you encounter blockers, mail the developer list and ask on #illumos to\nrequest assistance ASAP. First-instance support for blockers should be from the\ndeveloper community and not tied to any individual unless there is a clear\nreason for this and preferably prior agreement.\n\n\nIf you haven't already, create accounts for yourself on github and the illumos\n\nbug tracker\n.", 
            "title": "Student Expectations"
        }, 
        {
            "location": "/community/gsoc-expectations/#gsoc-student-expectations", 
            "text": "Your proposal is your contract  Don't get lost  Blog weekly to report progress  Push on a regular schedule every few days  Write design notes for review  Get weekly review on code and design  Identify blockers immediately  Bond  Get your contribution through to RTI  Keep working on bite-sized bugs  With feedback from your mentor, identify background reading assignments for the bonding period  Spend time on #illumos   We don't want students to disappear and end up at risk of failure. We're\ntherefore setting up a number of protocols to help us keep track of progress on\na day-to-day basis without too much overhead. There are a number of further\nthings you can do to help yourself out. Get on the #illumos IRC channel and get\nto know the developers who are active there. Our developer community is an\nessential part of the larger mentor community supporting your project, so\nplease consider the mailing list and IRC first-instance resource for general\nrequests.  Proposals should be considered a contract: they can be renegotiated, but you\ncan't fail to deliver. If you need to make changes, indicate that promptly and\nmake sure that the changes have been notified to and approved by your primary\nmentor and the org admins (Bayard and Albert).  An illumos-gsoc organization has been created on GitHub, and WIP repos are\nbeing created for each project. Updates to the WIP are your basic keepalive:\nyou should be pushing every day or two whenever you are coding. If you are\ngoing to miss a push or have one, please send notification to your primary\nmentor and the org admins, preferably in advance, explaining the circumstances.  The repos should also include documentation for your project, such as design\nnotes. Because they are WIPs, the repos are private. Reviews should be done\nusing webrevs. You will be given accounts on dev1.illumos.org to allow you to\npublish code for review using webrevs.   Every week you should provide a blog post describing progress and a webrev of\nany code done that week, sending URLs to developer@. The first post, which\nshould be made during the bonding period, should be the project schedule and\ndeliverables so that the developer community is aware of what you will be\ndoing.  You cannot miss these weekly progress reports except by prior arrangement or in\ncase of legitimate emergency.  If there are any slips against the project schedule, you should identify them\nin these posts the week they happen.  If you encounter blockers, mail the developer list and ask on #illumos to\nrequest assistance ASAP. First-instance support for blockers should be from the\ndeveloper community and not tied to any individual unless there is a clear\nreason for this and preferably prior agreement.  If you haven't already, create accounts for yourself on github and the illumos bug tracker .", 
            "title": "GSoC Student Expectations"
        }, 
        {
            "location": "/community/gsoc-proposal/", 
            "text": "How to write an excellent GSoC proposal\n\n\nWe assume you've already found our Project Ideas, GSoC Application Template, and Google Summer of Code pages.\n\n\nDesign 1\nst\n, Code 2\nnd\n\n\nAs part of your application, you should prepare a detailed design document\ncovering what you propose to do.  Be as detailed as you can about any\ninterfaces that will change as part of your work, i.e. reference any existing\ninterface document(s) in your design, and provide a new version (or diffs\nagainst the existing document) to show how those interfaces will change.\nReference any standards or specifications that affect the design.  Consider\nincluding in your proposal one or more test programs to exercise any affected\ninterfaces.\n\n\nWe care about well-designed interfaces, that allow changing implementations\nwith minimal or no impact consumers of an interface.\n\n\nRealistic Project Plan\n\n\nWith your reasonably complete design document in hand, break down the work in\nto a list of modestly sized tasks.  Estimate the time required for each task.\nIf any are estimated to take more than a week, it's likely that you should\nfurther divide those into smaller tasks.\n\n\nWrite a tentative schedule laying out all your tasks.  That schedule will (of course) change as you work on your tasks.\n\n\nResearch first, ask questions later\n\n\nIf you don't understand what the project really is, particularly if there's\nlinked code or explicit references that you don't understand, you need to show\nthat you've tried to work this out for yourself rather than asking right off.\nYou are joining our community for mentorship, but our objective is to develop\nyour over the course of the summer into someone who can participate over the\nlong term as a peer. Nothing threatens that premise like asking a question that\na Google search could answer for you, particularly if it's how you introduce\nyourself or if you do so persistently. Be especially sure to sure to search our\nmail and IRC archives to see if we've had previous discussions about the idea\nthat interests you.\n\n\nSurvey the project\n\n\nAssumptions are the hardest thing to refactor\n\n\nA good time to ask questions is when you start getting clear ideas about how to\nstructure the project. Baking in mistaken assumptions can kill code, but\nassumptions can also cause lost time well before that or show your project to\nbe untutored if they contradict a mentor's understanding. If you reckon you've\ngot a basic conceptual grasp of the project (you've followed explicit\nreferences from the ideas page, you've checked how issues were framed if the\nproject was previously discussed on the developer mailing list), asking\nquestions is a good way to confirm and clarify that before you start building a\nproposal around it.\n\n\nDon't be surprised if there is disagreement on fundamentals\n\n\nThe further you go in forming assumptions, the more important it is to expose\nthose assumptions to feedback from potential mentors. We encourage you to do\nthis via the developer mailing list and IRC channel. Assumptions may not be\nagreed within the community, even between leading contributors to a particular\narea. One of the most important skills to develop in an open-source project is\nthe ability to summarize and evaluate competing perspectives.\n\n\nLook at the whole on your first pass\n\n\nIf a project mentions a list of items, diving into the first item may not be\nthe best approach. Make a general survey to understand how the pieces do or do\nnot relate so that you understand what leverage resolving one item gets you for\nothers and what dependencies might exist between items.\n\n\nSpend time with existing code\n\n\nLook for existing code that bears some relation to the project. For example: if\nyou're looking at a project to implement instrumentation tools with DTrace,\nanalyse different pieces to get a broader perspective: get a conceptual grasp\nof what the tools you mean to reimplement do, see what's already in the DTrace\ntoolkit that instruments the same subsystems, and see what's implemented in\nillumos-gate using kstats and C that overlaps so that you can get a grasp of\nhow DTrace differs in approach from traditional Unix instrumentation.\n\n\nLook for references\n\n\nA number of people involved in our project write technical blogs, and there are\nblogs dedicated to major subsystems, as well as related work in the continuing\ncommercial fork. The Solaris Internals book document a good deal of our\npredecessor project. One book and one series by W. Richard Stevens, Advanced\nProgramming in the Unix Environment and TCP/IP Illustrated are considered\ncanonical texts on systems and fundamental networking programming. Tannenbaum's\nModern Operating Systems offers a comparative approach. Online docs for our\npredecessor projects can be found here:\nhttp://www.filibeto.org/~aduritz/\n. An\nonline source for OS development can be found here:\nhttp://www.osdever.net/\n.\n\n\nAssertions are only for debugging\n\n\nDemonstration is best\n\n\nThis is a practical project. A lot of references to your academic record will\nbe hard for us to verify, thus making it hard to evaluate parts of your\napplication. Contributing fixes to bite-sized bugs, working through demo code\nfor a first step on your project (preferably allowing time for feedback after\nsharing it with the community), and referencing contributions to other open\nsource projects all go a long way to demonstrating that you can do the work.\n\n\nAnalysis is good, too\n\n\nCode's always best, but showing that you can find and grok relevant code and\nput it into a clear conceptual context is still better than resorting to\nrhetoric.\n\n\nShow a long-term perspective\n\n\nFocus your enthusiasm\n\n\nillumos and GSoC both want to support students with a long-term commitment to\nopen-source development. If you have no prior experience with open source\ndevelopment, you're at something of a disadvantage. Do not try to overcome this\nwith non-specific expressions of enthusiasm.\n\n\nThe race you're running has already begun\n\n\nYou are offering to make a serious commitment of time and energy to our\nproject, and completing a project successfully, meaning that we are able to\ncommit it before the summer is over, is a serious challenge. Particularly if\nyou don't have a record of open-source contribution generally and to our\nproject in particular, you should expect to put in much of your free time\nbetween reading this and the deadline researching and preparing your\napplication and supporting materials (bite-sized contributions, demo code\ndirectly relevant to the project).\n\n\nWe're long-term people looking for long-term people\n\n\nMany of the people working on this project have made career decisions to stick\nwith it and have been doing this for quite a long time, many for a living. We\ncome from a wide variety of backgrounds. We've had a lot of experience in the\nworkplace, as well as in the open-source world. We have a decent eye for\nmeasuring capability, interest, and fortitude. Focus on the work as concretely\nas possibly, and you are most like to exhibit those things. Let them speak for\nthemselves and leave other things out or in the background.", 
            "title": "Writing a Proposal"
        }, 
        {
            "location": "/community/gsoc-proposal/#how-to-write-an-excellent-gsoc-proposal", 
            "text": "We assume you've already found our Project Ideas, GSoC Application Template, and Google Summer of Code pages.", 
            "title": "How to write an excellent GSoC proposal"
        }, 
        {
            "location": "/community/gsoc-proposal/#design-1st-code-2nd", 
            "text": "As part of your application, you should prepare a detailed design document\ncovering what you propose to do.  Be as detailed as you can about any\ninterfaces that will change as part of your work, i.e. reference any existing\ninterface document(s) in your design, and provide a new version (or diffs\nagainst the existing document) to show how those interfaces will change.\nReference any standards or specifications that affect the design.  Consider\nincluding in your proposal one or more test programs to exercise any affected\ninterfaces.  We care about well-designed interfaces, that allow changing implementations\nwith minimal or no impact consumers of an interface.", 
            "title": "Design 1st, Code 2nd"
        }, 
        {
            "location": "/community/gsoc-proposal/#realistic-project-plan", 
            "text": "With your reasonably complete design document in hand, break down the work in\nto a list of modestly sized tasks.  Estimate the time required for each task.\nIf any are estimated to take more than a week, it's likely that you should\nfurther divide those into smaller tasks.  Write a tentative schedule laying out all your tasks.  That schedule will (of course) change as you work on your tasks.", 
            "title": "Realistic Project Plan"
        }, 
        {
            "location": "/community/gsoc-proposal/#research-first-ask-questions-later", 
            "text": "If you don't understand what the project really is, particularly if there's\nlinked code or explicit references that you don't understand, you need to show\nthat you've tried to work this out for yourself rather than asking right off.\nYou are joining our community for mentorship, but our objective is to develop\nyour over the course of the summer into someone who can participate over the\nlong term as a peer. Nothing threatens that premise like asking a question that\na Google search could answer for you, particularly if it's how you introduce\nyourself or if you do so persistently. Be especially sure to sure to search our\nmail and IRC archives to see if we've had previous discussions about the idea\nthat interests you.", 
            "title": "Research first, ask questions later"
        }, 
        {
            "location": "/community/gsoc-proposal/#survey-the-project", 
            "text": "", 
            "title": "Survey the project"
        }, 
        {
            "location": "/community/gsoc-proposal/#assumptions-are-the-hardest-thing-to-refactor", 
            "text": "A good time to ask questions is when you start getting clear ideas about how to\nstructure the project. Baking in mistaken assumptions can kill code, but\nassumptions can also cause lost time well before that or show your project to\nbe untutored if they contradict a mentor's understanding. If you reckon you've\ngot a basic conceptual grasp of the project (you've followed explicit\nreferences from the ideas page, you've checked how issues were framed if the\nproject was previously discussed on the developer mailing list), asking\nquestions is a good way to confirm and clarify that before you start building a\nproposal around it.", 
            "title": "Assumptions are the hardest thing to refactor"
        }, 
        {
            "location": "/community/gsoc-proposal/#dont-be-surprised-if-there-is-disagreement-on-fundamentals", 
            "text": "The further you go in forming assumptions, the more important it is to expose\nthose assumptions to feedback from potential mentors. We encourage you to do\nthis via the developer mailing list and IRC channel. Assumptions may not be\nagreed within the community, even between leading contributors to a particular\narea. One of the most important skills to develop in an open-source project is\nthe ability to summarize and evaluate competing perspectives.", 
            "title": "Don't be surprised if there is disagreement on fundamentals"
        }, 
        {
            "location": "/community/gsoc-proposal/#look-at-the-whole-on-your-first-pass", 
            "text": "If a project mentions a list of items, diving into the first item may not be\nthe best approach. Make a general survey to understand how the pieces do or do\nnot relate so that you understand what leverage resolving one item gets you for\nothers and what dependencies might exist between items.", 
            "title": "Look at the whole on your first pass"
        }, 
        {
            "location": "/community/gsoc-proposal/#spend-time-with-existing-code", 
            "text": "Look for existing code that bears some relation to the project. For example: if\nyou're looking at a project to implement instrumentation tools with DTrace,\nanalyse different pieces to get a broader perspective: get a conceptual grasp\nof what the tools you mean to reimplement do, see what's already in the DTrace\ntoolkit that instruments the same subsystems, and see what's implemented in\nillumos-gate using kstats and C that overlaps so that you can get a grasp of\nhow DTrace differs in approach from traditional Unix instrumentation.", 
            "title": "Spend time with existing code"
        }, 
        {
            "location": "/community/gsoc-proposal/#look-for-references", 
            "text": "A number of people involved in our project write technical blogs, and there are\nblogs dedicated to major subsystems, as well as related work in the continuing\ncommercial fork. The Solaris Internals book document a good deal of our\npredecessor project. One book and one series by W. Richard Stevens, Advanced\nProgramming in the Unix Environment and TCP/IP Illustrated are considered\ncanonical texts on systems and fundamental networking programming. Tannenbaum's\nModern Operating Systems offers a comparative approach. Online docs for our\npredecessor projects can be found here: http://www.filibeto.org/~aduritz/ . An\nonline source for OS development can be found here: http://www.osdever.net/ .", 
            "title": "Look for references"
        }, 
        {
            "location": "/community/gsoc-proposal/#assertions-are-only-for-debugging", 
            "text": "", 
            "title": "Assertions are only for debugging"
        }, 
        {
            "location": "/community/gsoc-proposal/#demonstration-is-best", 
            "text": "This is a practical project. A lot of references to your academic record will\nbe hard for us to verify, thus making it hard to evaluate parts of your\napplication. Contributing fixes to bite-sized bugs, working through demo code\nfor a first step on your project (preferably allowing time for feedback after\nsharing it with the community), and referencing contributions to other open\nsource projects all go a long way to demonstrating that you can do the work.", 
            "title": "Demonstration is best"
        }, 
        {
            "location": "/community/gsoc-proposal/#analysis-is-good-too", 
            "text": "Code's always best, but showing that you can find and grok relevant code and\nput it into a clear conceptual context is still better than resorting to\nrhetoric.", 
            "title": "Analysis is good, too"
        }, 
        {
            "location": "/community/gsoc-proposal/#show-a-long-term-perspective", 
            "text": "", 
            "title": "Show a long-term perspective"
        }, 
        {
            "location": "/community/gsoc-proposal/#focus-your-enthusiasm", 
            "text": "illumos and GSoC both want to support students with a long-term commitment to\nopen-source development. If you have no prior experience with open source\ndevelopment, you're at something of a disadvantage. Do not try to overcome this\nwith non-specific expressions of enthusiasm.", 
            "title": "Focus your enthusiasm"
        }, 
        {
            "location": "/community/gsoc-proposal/#the-race-youre-running-has-already-begun", 
            "text": "You are offering to make a serious commitment of time and energy to our\nproject, and completing a project successfully, meaning that we are able to\ncommit it before the summer is over, is a serious challenge. Particularly if\nyou don't have a record of open-source contribution generally and to our\nproject in particular, you should expect to put in much of your free time\nbetween reading this and the deadline researching and preparing your\napplication and supporting materials (bite-sized contributions, demo code\ndirectly relevant to the project).", 
            "title": "The race you're running has already begun"
        }, 
        {
            "location": "/community/gsoc-proposal/#were-long-term-people-looking-for-long-term-people", 
            "text": "Many of the people working on this project have made career decisions to stick\nwith it and have been doing this for quite a long time, many for a living. We\ncome from a wide variety of backgrounds. We've had a lot of experience in the\nworkplace, as well as in the open-source world. We have a decent eye for\nmeasuring capability, interest, and fortitude. Focus on the work as concretely\nas possibly, and you are most like to exhibit those things. Let them speak for\nthemselves and leave other things out or in the background.", 
            "title": "We're long-term people looking for long-term people"
        }, 
        {
            "location": "/community/gsoc-mentor/", 
            "text": "Why Be a Google Summer of Code Mentor?\n\n\nBy \nBayard G. Bell\n\n\nI\u2019ve had some questions about what\u2019s involved, so let me provide some\nfeedback on issues. I\u2019ve already hit this in terms of the long-term,\nbut let me try to provide a bottom line for this summer:\n\n\n1) Mentors can go to the GSoC mentor summit in the fall at Google HQ.\nGoogle provides a reasonable amount of reimbursement for travel (it\nwas $2500 per attendee last year) plus two nights in a hotel ad\ntransportation to Mountain View. The mentor summit is a weekend-long\nunconference that lets mentors talk about whatever interests them:\nrecruiting contributors, minority open-source operating systems (we\u2019re\ntrying to make that more of a track this year than a single session,\nas we turned out to have a lot to talk about), contribution process,\ntesting, toolchain refreshes, or why the music industry\u2019s business\nmodel needs to be rebooted. Maybe I\u2019ve been underconferenced lately,\nbut a conference consisting almost exclusively of dedicated\ncontributors is better than most.\n\n\n2) Google pays a pro forma stipend (I believe it\u2019s still $500 per\nmentor) that will be donated as seed money to the foundation (many\norganizations do this, in part to avoid all the tax paperwork to\nreceive compensation).\n\n\n3) To put it very simply: GSoC is our system of reproduction. (I\u2019d\ncite the lyrics to \u201cThe Greatest Love of All\u201d ironically if the timing\nweren\u2019t a bit off.) We\u2019ve done a great job of putting together a\ncommunity of mature contributors. We need to make a concerted and\nsustained effort at recruiting and shaping a next generation. Much\nlike parenting, this requires a basic 2:1 ratio of mentors to\nstudents. More solid mentors means more students with a solid\nexperience who are thus more likely to stick with us.\n\n\n4) Even if you\u2019re not an expert in the subject matter for any\nparticular idea from the list, students need generalist support.\nStudents show WIPs to mentors weekly, but they need small touches\nthroughout the week. Backup mentors means they have committed support\nfrom the community rather than an individual, who usually has to mind\na day job. Back-up mentors help us prevent under-mentoring, which\nalmost invariably results in students not passing and thus not\ncommitting because they didn\u2019t have assistance when they needed it or\nwent over the side without being noticed and pulled back in the boat.\nHaving backup mentors is crucial to giving students a positive\nexperience.\n\n\n5) For similar reasons, the size of our mentor bench is a factor in\ndeciding how many student slots we are allocated. Mentoring is\ncoverage-intensive. We don\u2019t want more slots than we have qualified\nstudents, but with all of our commercial supporters digging in, we may\nhave a lot of primary mentor capacity that needs rounding out from\nbackups. If you work for one of our commercial supporters, your boss\nand/or community manager is probably already telling to sign up. If\nyou\u2019re from elsewhere in the community, we need you, too. We are\nrecruiting and shaping potential long-term contributors, and those\npeople should be exposed to both professional and volunteer supporters\nto demonstrate that both paths are open and viable.\n\n\n6) If not enough people sign up, there will be more mails like this\nover the next two weeks.", 
            "title": "Becoming a Mentor"
        }, 
        {
            "location": "/community/gsoc-mentor/#why-be-a-google-summer-of-code-mentor", 
            "text": "By  Bayard G. Bell  I\u2019ve had some questions about what\u2019s involved, so let me provide some\nfeedback on issues. I\u2019ve already hit this in terms of the long-term,\nbut let me try to provide a bottom line for this summer:  1) Mentors can go to the GSoC mentor summit in the fall at Google HQ.\nGoogle provides a reasonable amount of reimbursement for travel (it\nwas $2500 per attendee last year) plus two nights in a hotel ad\ntransportation to Mountain View. The mentor summit is a weekend-long\nunconference that lets mentors talk about whatever interests them:\nrecruiting contributors, minority open-source operating systems (we\u2019re\ntrying to make that more of a track this year than a single session,\nas we turned out to have a lot to talk about), contribution process,\ntesting, toolchain refreshes, or why the music industry\u2019s business\nmodel needs to be rebooted. Maybe I\u2019ve been underconferenced lately,\nbut a conference consisting almost exclusively of dedicated\ncontributors is better than most.  2) Google pays a pro forma stipend (I believe it\u2019s still $500 per\nmentor) that will be donated as seed money to the foundation (many\norganizations do this, in part to avoid all the tax paperwork to\nreceive compensation).  3) To put it very simply: GSoC is our system of reproduction. (I\u2019d\ncite the lyrics to \u201cThe Greatest Love of All\u201d ironically if the timing\nweren\u2019t a bit off.) We\u2019ve done a great job of putting together a\ncommunity of mature contributors. We need to make a concerted and\nsustained effort at recruiting and shaping a next generation. Much\nlike parenting, this requires a basic 2:1 ratio of mentors to\nstudents. More solid mentors means more students with a solid\nexperience who are thus more likely to stick with us.  4) Even if you\u2019re not an expert in the subject matter for any\nparticular idea from the list, students need generalist support.\nStudents show WIPs to mentors weekly, but they need small touches\nthroughout the week. Backup mentors means they have committed support\nfrom the community rather than an individual, who usually has to mind\na day job. Back-up mentors help us prevent under-mentoring, which\nalmost invariably results in students not passing and thus not\ncommitting because they didn\u2019t have assistance when they needed it or\nwent over the side without being noticed and pulled back in the boat.\nHaving backup mentors is crucial to giving students a positive\nexperience.  5) For similar reasons, the size of our mentor bench is a factor in\ndeciding how many student slots we are allocated. Mentoring is\ncoverage-intensive. We don\u2019t want more slots than we have qualified\nstudents, but with all of our commercial supporters digging in, we may\nhave a lot of primary mentor capacity that needs rounding out from\nbackups. If you work for one of our commercial supporters, your boss\nand/or community manager is probably already telling to sign up. If\nyou\u2019re from elsewhere in the community, we need you, too. We are\nrecruiting and shaping potential long-term contributors, and those\npeople should be exposed to both professional and volunteer supporters\nto demonstrate that both paths are open and viable.  6) If not enough people sign up, there will be more mails like this\nover the next two weeks.", 
            "title": "Why Be a Google Summer of Code Mentor?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/", 
            "text": "GSoC Mentoring Organization Application\n\n\nProfile\n\n\nOrganization name\n\n\nillumos\n\n\nDescription\n\n\nillumos is a fully open-source effort to produce a reliable, performant, and\nscalable operating system with leading-edge technologies and tools. We bring\ntogether a passionate community of developers and a growing base of commercial\nparticipants (Delphix, Joyent, Nexenta, OmniTI, Pluribus, and more).\n\n\nillumos is the successor to Sun Microsystems' OpenSolaris project. Our culture\ndraws heavily on the qualities that distinguished Sun engineering culture:\nsystems engineering (component, interaction, and interface design with a strong\ncommitment to minimalism), architectural coherence (design cooperation across\nsubsystems), measurement-driven development (strong visibility tools, mature\nmethodologies for their use, embedding both thoroughly in the development\nprocess). We have adapted it to work beyond the framework of a single corporate\nentity via federated efforts of individuals and companies with distinct\ninterests in the technology (cloud infrastructure, storage systems, application\nservers, and others), sharing an interest in commodity hardware and\nproduction-driven innovation.\n\n\nillumos features an unparalleled combination of technologies, including the\nresilient ZFS storage system, production-safe dynamic tracing (DTrace), FMA\npredictive self-healing, the Service Management Framework for persistent\nprocess and boot management, zones for lightweight isolation and\nvirtualisation, the KVM hypervisor for full system virtualisation, Crossbow for\nvirtualised networks, a high-performance kernel CIFS/SMB client and server,\nboot environments for safe upgrades, and the MDB kernel and application\ndebugger. All of these subsystems are actively developed by the illumos\nproject. Both ZFS and DTrace have been ported beyond illumos (notably to\nFreeBSD, OS X, and Linux), where our community and sister OpenZFS community\nhave taken a leading role in coordinating new feature development across\nplatforms, serving as a reference platform and repository.\n\n\nTags\n\n\nillumos, operating system, unix, kernel, dtrace, zfs, openzfs, virtualization, device driver, c, python, c++, solaris\n\n\nMain license\n\n\nCDDL\n\n\nLogo URL\n\n\nhttp://wiki.illumos.org/download/attachments/327686/Phoenix64x64-RGB.png\n\n\nIdeas list\n\n\nProject Ideas\n\n\nMailing list\n\n\nillumos Mailing Lists\n\n\nOrganization website\n\n\nhttp://www.illumos.org/\n\n\nIRC channel\n\n\nillumos on chat.freenode.net\n\n\nFeed URL\n\n\nhttp://blog.illumos.org/feed/\n\n\nGoogle+ URL\n\n\nTwitter URL\n\n\nhttps://twitter.com/illumosnews\n\n\nBlog page\n\n\nhttp://blog.illumos.org/\n\n\nFacebook URL\n\n\nhttps://www.facebook.com/groups/illumos/\n\n\nVeteran organization\n\n\nVeteran\n\n\nQuestionnaire\n\n\nWhy is your organization applying to participate in Google Summer of Code 2014? What do you hope to gain by participating?\n\n\nOur previous GSoC efforts have greatly helped bring in talented long-term\ncontributors, even in addition to the applicants, and break ground in new\nareas.  GSoC allows us to work with an excellent talent pool from a much wider\nrange of institutions and geographies than we could hope to engage otherwise.\n\n\nAlso, GSoC has proven an extremely valuable link to the larger open source\ncommunity and a forum to engage on issues like community building and\ndevelopment process. We hope to recruit new contributors and encourage fresh\nideas, mature our processes, and deepen our ties to similarly minded open\nsource communities.\n\n\nHow many potential mentors do you have for this year's program? What criteria did you use to select them?\n\n\nWe have confirmed the availability of three mentors  so far, with more selected\nfrom established contributors and reviewers, drawing heavily on \"advocates\",\nsenior community members who ensure that changes are well-defined, tested, and\nreviewed before they are integrated. Without explicitly requiring it, we have\nalso drawn more or less exclusively on community members with professional\nexperience of development for our project.\n\n\nWhat is your plan for dealing with disappearing students?\n\n\nWe require students to report progress weekly via our developer list and to\nprovide prompt updates to their mentors whenever they experience setbacks.\nStudents are told that their proposal schedules and deliverables are considered\ncontracts: renegotiation is acceptable if it happens as unforeseen issues\narise, but waiting for evaluations to raise significant issues is considered a\nbreach and grounds for a failing evaluation. We've found a reasonable\ncompromise with less frequent but regular check-ins with their mentors still\nallows students some flexibility in using their time while remaining\naccountable to the proposed schedule. We've considered publicly visible\nrepositories during the program as an option, though not a requirement for all\nstudents.\n\n\nWhat is your plan for dealing with disappearing mentors?\n\n\nOrg admins monitor for mentor responses to student updates to the developer\nlist and regularly poll mentors to make sure that they have reasonably current\nstatus from students, are seeing working product to back that up, and are\neither satisfied with progress or have conversations promptly about issues. We\nalso make sure that all mentors have back-ups who are kept in the loop on the\nabove, as professional and personal obligations may require mentors to \"tag\nout\". We also encourage students to conduct most discussion in one of our open\nforums, so that others in the community can help them in addition to their\nmentor.\n\n\nWhat steps will you take to encourage students to interact with your project's community before and during the program?\n\n\nWe have basic policies that require students to interact with mentors via\ndeveloper IRC channels and mailing lists. Students are expected to take the\ninitiative to familiarise themselves with the community, participate in\ndiscussions, and eventually become regular members through the program: not\neverything has to happen in the open, but students have to show that they are\ncomfortable and proficient identifying themselves and talking about their work\nvia community channels. Mentors are expected to guide students through\ncommunity processes for peer review and integration.\n\n\nWhat will you do to encourage your accepted students to stick with the project after Google Summer of Code concludes?\n\n\nWe treat students like regular community members, and our hope and expectation\nis that students who function well in that context and produce work they can be\nproud of will continue doing so. Many of our participants in previous years\nwere students who had previous exposure to our community or were working with\nour code base in their coursework, and these students have unsurprisingly shown\nmuch greater ongoing affinity for and ongoing commitment to our project than\nstudents without, who tend to be active only for one summer.\n\n\nAre you a new organization who has a Googler or other organization to vouch for you? If so, please list their name(s) here.\n\n\nAre you an established or larger organization who would like to vouch for a new organization applying this year? If so, please list their name(s) here.\n\n\nIf you chose \"veteran\" in the dropdown above, please summarize your involvement and the successes and challenges of your participation. Please also list your pass/fail rate for each year.\n\n\nIn our first year we passed all of our students but had a nevertheless mixed\nexperience: students were in India and mentors in California, and students were\nundergraduates with less previous experience in our field of development.\n\n\nWe had a more structured and satisfying experience for students, mentors, and\nthe community generally in 2012, recruiting students with stronger backgrounds,\nwho were able to function independently and delivered superior results\n(accepted proposals demonstrated far greater expertise and preparation,\nprojects deliverables stayed on track or were more clearly renegotiated as\nissues arose, outcomes were more consistent with proposals).\n\n\nLast year, we a selected three from a healthy number of strong proposals\n(though we probably received proportionally more \"spammy\" submissions as well!)\nfrom qualified students. The work was definitely of excellent quality and\ndefinitely consistent with the proposals, but we were overly ambitious about\nscope. Our mentors encountered more difficulty getting students to stay on\nschedule towards the conclusion of the development phase, primarily not due to\nthe fault of the students themselves but our own difficulty in estimating the\nincrease in time involved in testing and reviewing substantial changes with\ninherently higher risk. As a result, we will be sizing projects less\nambitiously and providing feedback to applicants for pre-integration testing\nplans in their applications.\n\n\nWe are happy to say that despite occasional setbacks, all of our students\nselected so far have passed.\n\n\nIf you are a new organization, have you applied in the past? If so, for what year(s)?", 
            "title": "Mentoring Application"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#gsoc-mentoring-organization-application", 
            "text": "", 
            "title": "GSoC Mentoring Organization Application"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#profile", 
            "text": "", 
            "title": "Profile"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#organization-name", 
            "text": "illumos", 
            "title": "Organization name"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#description", 
            "text": "illumos is a fully open-source effort to produce a reliable, performant, and\nscalable operating system with leading-edge technologies and tools. We bring\ntogether a passionate community of developers and a growing base of commercial\nparticipants (Delphix, Joyent, Nexenta, OmniTI, Pluribus, and more).  illumos is the successor to Sun Microsystems' OpenSolaris project. Our culture\ndraws heavily on the qualities that distinguished Sun engineering culture:\nsystems engineering (component, interaction, and interface design with a strong\ncommitment to minimalism), architectural coherence (design cooperation across\nsubsystems), measurement-driven development (strong visibility tools, mature\nmethodologies for their use, embedding both thoroughly in the development\nprocess). We have adapted it to work beyond the framework of a single corporate\nentity via federated efforts of individuals and companies with distinct\ninterests in the technology (cloud infrastructure, storage systems, application\nservers, and others), sharing an interest in commodity hardware and\nproduction-driven innovation.  illumos features an unparalleled combination of technologies, including the\nresilient ZFS storage system, production-safe dynamic tracing (DTrace), FMA\npredictive self-healing, the Service Management Framework for persistent\nprocess and boot management, zones for lightweight isolation and\nvirtualisation, the KVM hypervisor for full system virtualisation, Crossbow for\nvirtualised networks, a high-performance kernel CIFS/SMB client and server,\nboot environments for safe upgrades, and the MDB kernel and application\ndebugger. All of these subsystems are actively developed by the illumos\nproject. Both ZFS and DTrace have been ported beyond illumos (notably to\nFreeBSD, OS X, and Linux), where our community and sister OpenZFS community\nhave taken a leading role in coordinating new feature development across\nplatforms, serving as a reference platform and repository.", 
            "title": "Description"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#tags", 
            "text": "illumos, operating system, unix, kernel, dtrace, zfs, openzfs, virtualization, device driver, c, python, c++, solaris", 
            "title": "Tags"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#main-license", 
            "text": "CDDL", 
            "title": "Main license"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#logo-url", 
            "text": "http://wiki.illumos.org/download/attachments/327686/Phoenix64x64-RGB.png", 
            "title": "Logo URL"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#ideas-list", 
            "text": "Project Ideas", 
            "title": "Ideas list"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#mailing-list", 
            "text": "illumos Mailing Lists", 
            "title": "Mailing list"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#organization-website", 
            "text": "http://www.illumos.org/", 
            "title": "Organization website"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#irc-channel", 
            "text": "", 
            "title": "IRC channel"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#illumos-on-chatfreenodenet", 
            "text": "", 
            "title": "illumos on chat.freenode.net"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#feed-url", 
            "text": "http://blog.illumos.org/feed/", 
            "title": "Feed URL"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#google-url", 
            "text": "", 
            "title": "Google+ URL"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#twitter-url", 
            "text": "https://twitter.com/illumosnews", 
            "title": "Twitter URL"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#blog-page", 
            "text": "http://blog.illumos.org/", 
            "title": "Blog page"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#facebook-url", 
            "text": "https://www.facebook.com/groups/illumos/", 
            "title": "Facebook URL"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#veteran-organization", 
            "text": "Veteran", 
            "title": "Veteran organization"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#questionnaire", 
            "text": "", 
            "title": "Questionnaire"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#why-is-your-organization-applying-to-participate-in-google-summer-of-code-2014-what-do-you-hope-to-gain-by-participating", 
            "text": "Our previous GSoC efforts have greatly helped bring in talented long-term\ncontributors, even in addition to the applicants, and break ground in new\nareas.  GSoC allows us to work with an excellent talent pool from a much wider\nrange of institutions and geographies than we could hope to engage otherwise.  Also, GSoC has proven an extremely valuable link to the larger open source\ncommunity and a forum to engage on issues like community building and\ndevelopment process. We hope to recruit new contributors and encourage fresh\nideas, mature our processes, and deepen our ties to similarly minded open\nsource communities.", 
            "title": "Why is your organization applying to participate in Google Summer of Code 2014? What do you hope to gain by participating?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#how-many-potential-mentors-do-you-have-for-this-years-program-what-criteria-did-you-use-to-select-them", 
            "text": "We have confirmed the availability of three mentors  so far, with more selected\nfrom established contributors and reviewers, drawing heavily on \"advocates\",\nsenior community members who ensure that changes are well-defined, tested, and\nreviewed before they are integrated. Without explicitly requiring it, we have\nalso drawn more or less exclusively on community members with professional\nexperience of development for our project.", 
            "title": "How many potential mentors do you have for this year's program? What criteria did you use to select them?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#what-is-your-plan-for-dealing-with-disappearing-students", 
            "text": "We require students to report progress weekly via our developer list and to\nprovide prompt updates to their mentors whenever they experience setbacks.\nStudents are told that their proposal schedules and deliverables are considered\ncontracts: renegotiation is acceptable if it happens as unforeseen issues\narise, but waiting for evaluations to raise significant issues is considered a\nbreach and grounds for a failing evaluation. We've found a reasonable\ncompromise with less frequent but regular check-ins with their mentors still\nallows students some flexibility in using their time while remaining\naccountable to the proposed schedule. We've considered publicly visible\nrepositories during the program as an option, though not a requirement for all\nstudents.", 
            "title": "What is your plan for dealing with disappearing students?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#what-is-your-plan-for-dealing-with-disappearing-mentors", 
            "text": "Org admins monitor for mentor responses to student updates to the developer\nlist and regularly poll mentors to make sure that they have reasonably current\nstatus from students, are seeing working product to back that up, and are\neither satisfied with progress or have conversations promptly about issues. We\nalso make sure that all mentors have back-ups who are kept in the loop on the\nabove, as professional and personal obligations may require mentors to \"tag\nout\". We also encourage students to conduct most discussion in one of our open\nforums, so that others in the community can help them in addition to their\nmentor.", 
            "title": "What is your plan for dealing with disappearing mentors?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#what-steps-will-you-take-to-encourage-students-to-interact-with-your-projects-community-before-and-during-the-program", 
            "text": "We have basic policies that require students to interact with mentors via\ndeveloper IRC channels and mailing lists. Students are expected to take the\ninitiative to familiarise themselves with the community, participate in\ndiscussions, and eventually become regular members through the program: not\neverything has to happen in the open, but students have to show that they are\ncomfortable and proficient identifying themselves and talking about their work\nvia community channels. Mentors are expected to guide students through\ncommunity processes for peer review and integration.", 
            "title": "What steps will you take to encourage students to interact with your project's community before and during the program?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#what-will-you-do-to-encourage-your-accepted-students-to-stick-with-the-project-after-google-summer-of-code-concludes", 
            "text": "We treat students like regular community members, and our hope and expectation\nis that students who function well in that context and produce work they can be\nproud of will continue doing so. Many of our participants in previous years\nwere students who had previous exposure to our community or were working with\nour code base in their coursework, and these students have unsurprisingly shown\nmuch greater ongoing affinity for and ongoing commitment to our project than\nstudents without, who tend to be active only for one summer.", 
            "title": "What will you do to encourage your accepted students to stick with the project after Google Summer of Code concludes?"
        }, 
        {
            "location": "/community/gsoc-mentor-application/#are-you-a-new-organization-who-has-a-googler-or-other-organization-to-vouch-for-you-if-so-please-list-their-names-here", 
            "text": "", 
            "title": "Are you a new organization who has a Googler or other organization to vouch for you? If so, please list their name(s) here."
        }, 
        {
            "location": "/community/gsoc-mentor-application/#are-you-an-established-or-larger-organization-who-would-like-to-vouch-for-a-new-organization-applying-this-year-if-so-please-list-their-names-here", 
            "text": "", 
            "title": "Are you an established or larger organization who would like to vouch for a new organization applying this year? If so, please list their name(s) here."
        }, 
        {
            "location": "/community/gsoc-mentor-application/#if-you-chose-veteran-in-the-dropdown-above-please-summarize-your-involvement-and-the-successes-and-challenges-of-your-participation-please-also-list-your-passfail-rate-for-each-year", 
            "text": "In our first year we passed all of our students but had a nevertheless mixed\nexperience: students were in India and mentors in California, and students were\nundergraduates with less previous experience in our field of development.  We had a more structured and satisfying experience for students, mentors, and\nthe community generally in 2012, recruiting students with stronger backgrounds,\nwho were able to function independently and delivered superior results\n(accepted proposals demonstrated far greater expertise and preparation,\nprojects deliverables stayed on track or were more clearly renegotiated as\nissues arose, outcomes were more consistent with proposals).  Last year, we a selected three from a healthy number of strong proposals\n(though we probably received proportionally more \"spammy\" submissions as well!)\nfrom qualified students. The work was definitely of excellent quality and\ndefinitely consistent with the proposals, but we were overly ambitious about\nscope. Our mentors encountered more difficulty getting students to stay on\nschedule towards the conclusion of the development phase, primarily not due to\nthe fault of the students themselves but our own difficulty in estimating the\nincrease in time involved in testing and reviewing substantial changes with\ninherently higher risk. As a result, we will be sizing projects less\nambitiously and providing feedback to applicants for pre-integration testing\nplans in their applications.  We are happy to say that despite occasional setbacks, all of our students\nselected so far have passed.", 
            "title": "If you chose \"veteran\" in the dropdown above, please summarize your involvement and the successes and challenges of your participation. Please also list your pass/fail rate for each year."
        }, 
        {
            "location": "/community/gsoc-mentor-application/#if-you-are-a-new-organization-have-you-applied-in-the-past-if-so-for-what-years", 
            "text": "", 
            "title": "If you are a new organization, have you applied in the past? If so, for what year(s)?"
        }, 
        {
            "location": "/projects/", 
            "text": "", 
            "title": "Projects"
        }
    ]
}